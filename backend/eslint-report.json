[{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\config\\database.config.js","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1179,1229],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1355,1411],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\config\\test-database.js","messages":[{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'extractTableName'.","line":102,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":102,"endColumn":19},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'createMockRecord'.","line":107,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":107,"endColumn":19},{"ruleId":"no-case-declarations","severity":1,"message":"Unexpected lexical declaration in case block.","line":113,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":113,"endColumn":89},{"ruleId":"camelcase","severity":1,"message":"Identifier 'first_name' is not in camel case.","line":113,"column":16,"nodeType":"Identifier","messageId":"notCamelCase","endLine":113,"endColumn":26},{"ruleId":"camelcase","severity":1,"message":"Identifier 'last_name' is not in camel case.","line":113,"column":28,"nodeType":"Identifier","messageId":"notCamelCase","endLine":113,"endColumn":37},{"ruleId":"camelcase","severity":1,"message":"Identifier 'password_hash' is not in camel case.","line":113,"column":53,"nodeType":"Identifier","messageId":"notCamelCase","endLine":113,"endColumn":66},{"ruleId":"camelcase","severity":1,"message":"Identifier 'first_name' is not in camel case.","line":115,"column":23,"nodeType":"Identifier","messageId":"notCamelCase","endLine":115,"endColumn":33},{"ruleId":"camelcase","severity":1,"message":"Identifier 'last_name' is not in camel case.","line":116,"column":22,"nodeType":"Identifier","messageId":"notCamelCase","endLine":116,"endColumn":31},{"ruleId":"camelcase","severity":1,"message":"Identifier 'password_hash' is not in camel case.","line":119,"column":26,"nodeType":"Identifier","messageId":"notCamelCase","endLine":119,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6476,6515],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[807,845],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[897,928],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mock Database for Testing\n * Simulates database operations without requiring PostgreSQL\n */\n\nclass MockDatabase {\n  constructor() {\n    this.tables = {\n      users: [],\n      products: [],\n      orders: [],\n      payments: [],\n      deliveries: [],\n      cart_items: [],\n      event_logs: [],\n      fraud_incidents: [],\n      user_behavior_tracking: [],\n      analytics_cache: []\n    };\n    this.idCounters = {};\n  }\n\n  // Generate unique ID for a table\n  generateId(tableName) {\n    if (!this.idCounters[tableName]) {\n      this.idCounters[tableName] = 1;\n    }\n    this.idCounters[tableName] += 1;\n    return this.idCounters[tableName] - 1;\n  }\n\n  // Mock query method\n  async query(text, params = []) {\n    if (process.env.NODE_ENV !== 'test') {\n      // eslint-disable-next-line no-console\n      console.log(`Mock DB Query: ${text}`);\n      // eslint-disable-next-line no-console\n      console.log('Params:', params);\n    }\n\n    // Simple pattern matching for common queries\n    const textLower = text.toLowerCase().trim();\n\n    // Handle SELECT queries\n    if (textLower.startsWith('select')) {\n      if (textLower.includes('users')) {\n        // Handle email/phone lookups\n        if (params.length > 0) {\n          const email = params[0];\n          const user = this.tables.users.find((u) => u.email === email || u.phone === email);\n          return { rows: user ? [user] : [] };\n        }\n        return { rows: this.tables.users };\n      }\n      if (textLower.includes('products')) {\n        return { rows: this.tables.products };\n      }\n      if (textLower.includes('orders')) {\n        return { rows: this.tables.orders };\n      }\n      if (textLower.includes('payments')) {\n        return { rows: this.tables.payments };\n      }\n      if (textLower.includes('event_logs')) {\n        return { rows: this.tables.event_logs };\n      }\n      // Default: return empty result\n      return { rows: [] };\n    }\n\n    // Handle INSERT queries\n    if (textLower.startsWith('insert')) {\n      const tableName = this.extractTableName(text);\n      if (tableName && this.tables[tableName]) {\n        const id = this.generateId(tableName);\n        const newRecord = { id, ...this.createMockRecord(tableName, params) };\n        this.tables[tableName].push(newRecord);\n        return { rows: [newRecord], insertId: id };\n      }\n      return { rows: [], insertId: 1 };\n    }\n\n    // Handle UPDATE queries\n    if (textLower.startsWith('update')) {\n      const tableName = this.extractTableName(text);\n      if (tableName && this.tables[tableName]) {\n        // Simple update - just return success\n        return { rows: [{ id: 1 }], rowCount: 1 };\n      }\n      return { rows: [], rowCount: 0 };\n    }\n\n    // Handle DELETE queries\n    if (textLower.startsWith('delete')) {\n      return { rows: [], rowCount: 0 };\n    }\n\n    // Default response\n    return { rows: [] };\n  }\n\n  extractTableName(query) {\n    const match = query.match(/(?:from|into|update)\\s+(\\w+)/i);\n    return match ? match[1] : null;\n  }\n\n  createMockRecord(tableName, params) {\n    const timestamp = new Date().toISOString();\n\n    switch (tableName) {\n      case 'users':\n        // Use params for user data if provided\n        const [first_name, last_name, email, phone, password_hash, role] = params || [];\n        return {\n          first_name: first_name || 'Test',\n          last_name: last_name || 'User',\n          email: email || 'test@example.com',\n          phone: phone || '+22670000000',\n          password_hash: password_hash || '$2b$10$hashedpassword',\n          role: role || 'buyer',\n          status: 'active',\n          created_at: timestamp,\n          updated_at: timestamp\n        };\n\n      case 'products':\n        return {\n          name: 'Test Product',\n          description: 'Test Description',\n          price: 10000,\n          category: 'test',\n          vendor_id: 1,\n          inventory_quantity: 100,\n          status: 'active',\n          created_at: timestamp,\n          updated_at: timestamp\n        };\n\n      case 'orders':\n        return {\n          buyer_id: 1,\n          status: 'pending',\n          total_amount: 25000,\n          shipping_address: JSON.stringify({}),\n          created_at: timestamp,\n          updated_at: timestamp\n        };\n\n      case 'payments':\n        return {\n          order_id: 1,\n          payment_method: 'orange_money',\n          amount: 25000,\n          status: 'pending',\n          created_at: timestamp,\n          updated_at: timestamp\n        };\n\n      case 'event_logs':\n        return {\n          event_type: 'test_event',\n          event_category: 'system',\n          actor_type: 'user',\n          event_data: JSON.stringify({}),\n          created_at: timestamp\n        };\n\n      default:\n        return {\n          created_at: timestamp,\n          updated_at: timestamp\n        };\n    }\n  }\n\n  // Helper method to add test data\n  addTestData() {\n    // Add test users\n    this.tables.users = [\n      {\n        id: 1,\n        first_name: 'Test',\n        last_name: 'Admin',\n        email: 'admin01@test.com',\n        role: 'admin',\n        status: 'active',\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 2,\n        first_name: 'Test',\n        last_name: 'Vendor',\n        email: 'vendor01@test.com',\n        role: 'vendor',\n        status: 'active',\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 3,\n        first_name: 'Test',\n        last_name: 'Buyer',\n        email: 'buyer01@test.com',\n        role: 'buyer',\n        status: 'active',\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 4,\n        first_name: 'Test',\n        last_name: 'Driver',\n        email: 'driver01@test.com',\n        role: 'driver',\n        status: 'active',\n        created_at: new Date().toISOString()\n      }\n    ];\n\n    // Add test products\n    this.tables.products = [\n      {\n        id: 1,\n        name: 'Traditional Burkina Fabric',\n        description: 'Beautiful fabric',\n        price: 25000,\n        category: 'fashion',\n        vendor_id: 2,\n        inventory_quantity: 50,\n        status: 'active',\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 2,\n        name: 'Shea Butter - Pure Organic',\n        description: 'Organic shea butter',\n        price: 15000,\n        category: 'beauty',\n        vendor_id: 2,\n        inventory_quantity: 100,\n        status: 'active',\n        created_at: new Date().toISOString()\n      }\n    ];\n\n    console.log('✅ Mock test data loaded');\n  }\n\n  // Get client method for compatibility\n  async getClient() {\n    return {\n      query: this.query.bind(this),\n      release: () => {}\n    };\n  }\n}\n\n// Create singleton instance\nconst mockDb = new MockDatabase();\n\n// Initialize with test data\nmockDb.addTestData();\n\nmodule.exports = {\n  pool: mockDb,\n  query: mockDb.query.bind(mockDb),\n  getClient: mockDb.getClient.bind(mockDb)\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\analytics.controller.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2217,2266],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":98,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":98,"endColumn":38,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2634,2634],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":99,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":99,"endColumn":23,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2665,2665],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":107,"column":17,"nodeType":"CallExpression","messageId":"missingRadix","endLine":107,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2854,2854],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3022,3070],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":130,"column":68,"nodeType":"CallExpression","messageId":"missingRadix","endLine":130,"endColumn":82,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3406,3406],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":137,"column":17,"nodeType":"CallExpression","messageId":"missingRadix","endLine":137,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3578,3578],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3746,3795],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":161,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":161,"endColumn":34,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4159,4159],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":162,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":162,"endColumn":23,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4190,4190],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":170,"column":17,"nodeType":"CallExpression","messageId":"missingRadix","endLine":170,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4373,4373],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4541,4587],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5016,5065],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5794,5847],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7209,7257],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7790,7839],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":325,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":325,"endColumn":27,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8429,8429],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":327,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":327,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8473,8473],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":328,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":328,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8509,8509],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":339,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":339,"endColumn":27,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8736,8736],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":351,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":351,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8986,9031],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":365,"column":58,"nodeType":"CallExpression","messageId":"missingRadix","endLine":365,"endColumn":72,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9401,9401],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9545,9593],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":396,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":396,"endColumn":25,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[10128,10128],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":398,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":398,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[10172,10172],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":399,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":399,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[10208,10208],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10461,10504],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":427,"column":57,"nodeType":"CallExpression","messageId":"missingRadix","endLine":427,"endColumn":80,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[10889,10889],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":447,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":447,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11315,11360],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'logTestEvent'.","line":456,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":456,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":479,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":479,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12155,12205],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1379,1430],"text":""},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const analyticsService = require('../services/analytics.service');\nconst EventLogger = require('../services/event-logger.service');\n\nclass AnalyticsController {\n  constructor() {\n    this.eventLogger = new EventLogger();\n  }\n\n  // GET /api/analytics/dashboard\n  static async getDashboard(req, res) {\n    try {\n      const { days = 30 } = req.query;\n\n      const startTime = Date.now();\n\n      // Get multiple analytics data in parallel\n      const [\n        summary,\n        dailyOverview,\n        realTimeMetrics\n      ] = await Promise.all([\n        analyticsService.getAnalyticsSummary(),\n        analyticsService.getDailyOverview(parseInt(days, 10)),\n        analyticsService.getRealTimeDashboard()\n      ]);\n\n      // Log dashboard access\n      await new EventLogger().logAdminAction(\n        'dashboard_accessed',\n        req.user.id,\n        null,\n        'analytics',\n        { days: parseInt(days, 10), duration_ms: Date.now() - startTime },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: {\n          summary: summary.summary,\n          dailyOverview: dailyOverview.data,\n          realTime: realTimeMetrics.metrics,\n          period: `${days} days`,\n          generatedAt: new Date().toISOString()\n        }\n      });\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'test') {\n        // eslint-disable-next-line no-console\n        console.error('Dashboard analytics error:', error);\n      }\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load dashboard analytics'\n      });\n    }\n  }\n\n  // GET /api/analytics/products\n  static async getProductAnalytics(req, res) {\n    try {\n      const { productId, days = 30 } = req.query;\n\n      const analytics = await analyticsService.getProductAnalytics(\n        productId ? parseInt(productId, 10) : null,\n        parseInt(days, 10)\n      );\n\n      await new EventLogger().logAdminAction(\n        'product_analytics_accessed',\n        req.user.id,\n        productId || null,\n        'product',\n        { days: parseInt(days, 10) },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: analytics.data,\n        period: analytics.period\n      });\n    } catch (error) {\n      console.error('Product analytics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load product analytics'\n      });\n    }\n  }\n\n  // GET /api/analytics/vendors\n  static async getVendorAnalytics(req, res) {\n    try {\n      const { vendorId, days = 30 } = req.query;\n\n      const analytics = await analyticsService.getVendorAnalytics(\n        vendorId ? parseInt(vendorId) : null,\n        parseInt(days)\n      );\n\n      await new EventLogger().logAdminAction(\n        'vendor_analytics_accessed',\n        req.user.id,\n        vendorId || null,\n        'vendor',\n        { days: parseInt(days) },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: analytics.data,\n        period: analytics.period\n      });\n    } catch (error) {\n      console.error('Vendor analytics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load vendor analytics'\n      });\n    }\n  }\n\n  // GET /api/analytics/payments\n  static async getPaymentAnalytics(req, res) {\n    try {\n      const { days = 30 } = req.query;\n\n      const analytics = await analyticsService.getPaymentAnalytics(parseInt(days));\n\n      await new EventLogger().logAdminAction(\n        'payment_analytics_accessed',\n        req.user.id,\n        null,\n        'payment',\n        { days: parseInt(days) },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: analytics.data,\n        period: analytics.period\n      });\n    } catch (error) {\n      console.error('Payment analytics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load payment analytics'\n      });\n    }\n  }\n\n  // GET /api/analytics/users\n  static async getUserAnalytics(req, res) {\n    try {\n      const { userId, days = 30 } = req.query;\n\n      const analytics = await analyticsService.getUserBehaviorAnalytics(\n        userId ? parseInt(userId) : null,\n        parseInt(days)\n      );\n\n      await new EventLogger().logAdminAction(\n        'user_analytics_accessed',\n        req.user.id,\n        userId || null,\n        'user',\n        { days: parseInt(days) },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: analytics.data,\n        period: analytics.period\n      });\n    } catch (error) {\n      console.error('User analytics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load user analytics'\n      });\n    }\n  }\n\n  // GET /api/analytics/realtime\n  static async getRealTimeMetrics(req, res) {\n    try {\n      const metrics = await analyticsService.getRealTimeDashboard();\n\n      res.json({\n        success: true,\n        data: metrics.metrics,\n        timestamp: metrics.timestamp\n      });\n    } catch (error) {\n      console.error('Real-time metrics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to load real-time metrics'\n      });\n    }\n  }\n\n  // POST /api/analytics/calculate\n  static async calculateDailyStats(req, res) {\n    try {\n      const { date } = req.body;\n\n      const result = await analyticsService.calculateDailyStats(date);\n\n      await new EventLogger().logAdminAction(\n        'analytics_calculation_triggered',\n        req.user.id,\n        null,\n        'analytics',\n        { date: date || 'today', stats_calculated: result.statsCalculated },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: 'Daily statistics calculated successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Calculate daily stats error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to calculate daily statistics'\n      });\n    }\n  }\n\n  // GET /api/analytics/export\n  static async exportAnalytics(req, res) {\n    try {\n      const { type = 'overview', format = 'json', startDate, endDate } = req.query;\n\n      const exportData = await analyticsService.getAnalyticsExport(\n        type,\n        startDate,\n        endDate,\n        format\n      );\n\n      await new EventLogger().logAdminAction(\n        'analytics_exported',\n        req.user.id,\n        null,\n        'analytics',\n        {\n          export_type: type,\n          format,\n          start_date: startDate,\n          end_date: endDate,\n          record_count: exportData.data?.length || 0\n        },\n        req\n      );\n\n      if (format === 'csv') {\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=${exportData.filename}`);\n        res.send(exportData.data);\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', `attachment; filename=${exportData.filename}`);\n        res.json({\n          success: true,\n          filename: exportData.filename,\n          data: exportData.data,\n          metadata: exportData.metadata\n        });\n      }\n    } catch (error) {\n      console.error('Export analytics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to export analytics data'\n      });\n    }\n  }\n\n  // GET /api/analytics/summary\n  static async getAnalyticsSummary(req, res) {\n    try {\n      const { startDate, endDate } = req.query;\n\n      const summary = await analyticsService.getAnalyticsSummary(startDate, endDate);\n\n      res.json({\n        success: true,\n        data: summary.summary,\n        period: summary.period,\n        generatedAt: summary.generatedAt\n      });\n    } catch (error) {\n      console.error('Analytics summary error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get analytics summary'\n      });\n    }\n  }\n\n  // GET /api/analytics/events/history/:targetType/:targetId\n  static async getEventHistory(req, res) {\n    try {\n      const { targetType, targetId } = req.params;\n      const {\n        limit = 50,\n        offset = 0,\n        eventCategory,\n        severity,\n        startDate,\n        endDate\n      } = req.query;\n\n      const eventLogger = new EventLogger();\n      const history = await eventLogger.getEventHistory(\n        targetType,\n        parseInt(targetId),\n        {\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          eventCategory,\n          severity,\n          startDate,\n          endDate\n        }\n      );\n\n      await eventLogger.logAdminAction(\n        'event_history_accessed',\n        req.user.id,\n        parseInt(targetId),\n        targetType,\n        { limit, offset, event_category: eventCategory },\n        req\n      );\n\n      res.json({\n        success: true,\n        data: history.events,\n        pagination: history.pagination\n      });\n    } catch (error) {\n      console.error('Event history error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get event history'\n      });\n    }\n  }\n\n  // GET /api/analytics/events/stats\n  static async getEventStatistics(req, res) {\n    try {\n      const { days = 30 } = req.query;\n\n      const eventLogger = new EventLogger();\n      const stats = await eventLogger.getEventStatistics(parseInt(days));\n\n      res.json({\n        success: true,\n        data: stats.statistics,\n        period: stats.period\n      });\n    } catch (error) {\n      console.error('Event statistics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get event statistics'\n      });\n    }\n  }\n\n  // GET /api/analytics/events/user/:userId\n  static async getUserEvents(req, res) {\n    try {\n      const { userId } = req.params;\n      const {\n        limit = 50,\n        offset = 0,\n        eventCategory,\n        eventType,\n        startDate,\n        endDate\n      } = req.query;\n\n      const eventLogger = new EventLogger();\n      const events = await eventLogger.getEventsByActor(\n        parseInt(userId),\n        {\n          limit: parseInt(limit),\n          offset: parseInt(offset),\n          eventCategory,\n          eventType,\n          startDate,\n          endDate\n        }\n      );\n\n      res.json({\n        success: true,\n        data: events.events,\n        pagination: events.pagination\n      });\n    } catch (error) {\n      console.error('User events error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get user events'\n      });\n    }\n  }\n\n  // POST /api/analytics/events/cleanup\n  static async cleanupOldEvents(req, res) {\n    try {\n      const { retentionDays = 90 } = req.body;\n\n      const eventLogger = new EventLogger();\n      const result = await eventLogger.cleanupOldEvents(parseInt(retentionDays));\n\n      await eventLogger.logAdminAction(\n        'event_cleanup_triggered',\n        req.user.id,\n        null,\n        'system',\n        {\n          retention_days: retentionDays,\n          deleted_count: result.deletedCount\n        },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: `Cleaned up ${result.deletedCount} old events`,\n        data: result\n      });\n    } catch (error) {\n      console.error('Event cleanup error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to cleanup old events'\n      });\n    }\n  }\n\n  // POST /api/analytics/events/log (for manual testing)\n  static async logTestEvent(req, res) {\n    try {\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(404).json({\n          success: false,\n          message: 'Test endpoint not available in production'\n        });\n      }\n\n      const eventLogger = new EventLogger();\n      const eventId = await eventLogger.log({\n        ...req.body,\n        actorId: req.user.id,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      res.json({\n        success: true,\n        message: 'Test event logged successfully',\n        eventId\n      });\n    } catch (error) {\n      console.error('Test event logging error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to log test event'\n      });\n    }\n  }\n}\n\nmodule.exports = AnalyticsController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\auth.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'refreshToken'.","line":32,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":32,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const AuthService = require('../services/auth.service');\n\nclass AuthController {\n  static async register(req, res, next) {\n    try {\n      const result = await AuthService.register(req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Registration successful',\n        data: result\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async login(req, res, next) {\n    try {\n      const result = await AuthService.login(req.body);\n\n      res.status(200).json({\n        success: true,\n        message: 'Login successful',\n        data: result\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async refreshToken(req, res, next) {\n    try {\n      const { refreshToken } = req.body;\n\n      if (!refreshToken) {\n        return res.status(400).json({\n          success: false,\n          message: 'Refresh token required'\n        });\n      }\n\n      const result = await AuthService.refreshTokens(refreshToken);\n\n      res.status(200).json({\n        success: true,\n        message: 'Tokens refreshed successfully',\n        data: result\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async logout(req, res, next) {\n    try {\n      // In a production app, you might want to:\n      // 1. Invalidate the refresh token in database\n      // 2. Add the access token to a blacklist\n      // For now, we'll just return success\n\n      res.status(200).json({\n        success: true,\n        message: 'Logout successful'\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getProfile(req, res, next) {\n    try {\n      res.status(200).json({\n        success: true,\n        data: { user: req.user }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async changePassword(req, res, next) {\n    try {\n      const { currentPassword, newPassword } = req.body;\n\n      const result = await AuthService.changePassword(\n        req.user.id,\n        currentPassword,\n        newPassword\n      );\n\n      res.status(200).json({\n        success: true,\n        message: result.message\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async verifyEmail(req, res, next) {\n    try {\n      // TODO: Implement email verification logic\n      // This would typically involve:\n      // 1. Generating a verification token\n      // 2. Sending an email with the token\n      // 3. Verifying the token when user clicks the link\n\n      res.status(200).json({\n        success: true,\n        message: 'Email verification sent'\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async verifyPhone(req, res, next) {\n    try {\n      // TODO: Implement phone verification logic\n      // This would typically involve:\n      // 1. Generating an OTP\n      // 2. Sending SMS with the OTP\n      // 3. Verifying the OTP\n\n      res.status(200).json({\n        success: true,\n        message: 'Phone verification code sent'\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = AuthController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\cart.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'addToCart'.","line":17,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":17,"endColumn":25},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'updateCartItem'.","line":47,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":47,"endColumn":30},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'validateCart'.","line":101,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":101,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const Cart = require('../models/cart.model');\n\nclass CartController {\n  static async getCart(req, res, next) {\n    try {\n      const cart = await Cart.getByUserId(req.userId);\n\n      res.status(200).json({\n        success: true,\n        data: { cart: cart ? cart.toJSON() : null }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async addToCart(req, res, next) {\n    try {\n      const { productId, quantity = 1 } = req.body;\n\n      if (!productId) {\n        return res.status(400).json({\n          success: false,\n          message: 'Product ID is required'\n        });\n      }\n\n      if (quantity <= 0) {\n        return res.status(400).json({\n          success: false,\n          message: 'Quantity must be greater than 0'\n        });\n      }\n\n      const cart = await Cart.addItem(req.userId, productId, quantity);\n\n      res.status(200).json({\n        success: true,\n        message: 'Item added to cart successfully',\n        data: { cart: cart.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updateCartItem(req, res, next) {\n    try {\n      const { itemId } = req.params;\n      const { quantity } = req.body;\n\n      if (!quantity || quantity < 0) {\n        return res.status(400).json({\n          success: false,\n          message: 'Valid quantity is required'\n        });\n      }\n\n      const cart = await Cart.updateItem(req.userId, itemId, quantity);\n\n      res.status(200).json({\n        success: true,\n        message: 'Cart item updated successfully',\n        data: { cart: cart.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async removeFromCart(req, res, next) {\n    try {\n      const { itemId } = req.params;\n\n      const cart = await Cart.removeItem(req.userId, itemId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Item removed from cart successfully',\n        data: { cart: cart.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async clearCart(req, res, next) {\n    try {\n      const cart = await Cart.clear(req.userId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Cart cleared successfully',\n        data: { cart: cart.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async validateCart(req, res, next) {\n    try {\n      const cart = await Cart.getByUserId(req.userId);\n\n      if (!cart) {\n        return res.status(404).json({\n          success: false,\n          message: 'Cart not found'\n        });\n      }\n\n      const validation = await cart.validateForCheckout();\n\n      res.status(200).json({\n        success: true,\n        data: {\n          validation,\n          cart: cart.toJSON()\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = CartController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\delivery.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'applyAsDriver'.","line":4,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":4,"endColumn":29},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'updateDeliveryStatus'.","line":65,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":65,"endColumn":36},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":109,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":109,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2788,2788],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":110,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":110,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2820,2820],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":120,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":120,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3102,3102],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":121,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":121,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3138,3138],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":122,"column":44,"nodeType":"CallExpression","messageId":"missingRadix","endLine":122,"endColumn":59,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3198,3198],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":178,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":178,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4266,4266],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":179,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":179,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4298,4298],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":189,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":189,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4565,4565],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":190,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":190,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4601,4601],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":191,"column":44,"nodeType":"CallExpression","messageId":"missingRadix","endLine":191,"endColumn":59,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4661,4661],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const DeliveryService = require('../services/delivery.service');\n\nclass DeliveryController {\n  static async applyAsDriver(req, res, next) {\n    try {\n      const { nationalId, vehicleType, licenseNumber } = req.body;\n\n      if (!nationalId || !vehicleType || !licenseNumber) {\n        return res.status(400).json({\n          success: false,\n          message: 'National ID, vehicle type, and license number are required'\n        });\n      }\n\n      const user = await DeliveryService.applyAsDriver(req.userId, {\n        nationalId,\n        vehicleType,\n        licenseNumber\n      });\n\n      res.status(200).json({\n        success: true,\n        message: 'Driver application submitted successfully. Awaiting approval.',\n        data: { user: user.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getAvailableDeliveries(req, res, next) {\n    try {\n      const { region } = req.query;\n\n      const deliveries = await DeliveryService.getAvailableDeliveries(\n        req.userId,\n        region\n      );\n\n      res.status(200).json({\n        success: true,\n        data: { deliveries: deliveries.map((d) => d.toJSON()) }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async acceptDelivery(req, res, next) {\n    try {\n      const { deliveryId } = req.params;\n\n      const delivery = await DeliveryService.acceptDelivery(deliveryId, req.userId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Delivery accepted successfully',\n        data: { delivery: delivery.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updateDeliveryStatus(req, res, next) {\n    try {\n      const { deliveryId } = req.params;\n      const { status, deliverySignature, deliveryPhotoUrl, deliveryNotes } = req.body;\n\n      if (!status) {\n        return res.status(400).json({\n          success: false,\n          message: 'Status is required'\n        });\n      }\n\n      const updateData = {};\n      if (deliverySignature) updateData.deliverySignature = deliverySignature;\n      if (deliveryPhotoUrl) updateData.deliveryPhotoUrl = deliveryPhotoUrl;\n      if (deliveryNotes) updateData.deliveryNotes = deliveryNotes;\n\n      const delivery = await DeliveryService.updateDeliveryStatus(\n        deliveryId,\n        status,\n        req.userId,\n        updateData\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Delivery status updated successfully',\n        data: { delivery: delivery.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getMyDeliveries(req, res, next) {\n    try {\n      const {\n        status,\n        page = 1,\n        limit = 20\n      } = req.query;\n\n      const options = {\n        status,\n        page: parseInt(page),\n        limit: parseInt(limit)\n      };\n\n      const deliveries = await DeliveryService.getDriverDeliveries(req.userId, options);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          deliveries: deliveries.map((d) => d.toJSON()),\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            hasMore: deliveries.length === parseInt(limit)\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getMyStats(req, res, next) {\n    try {\n      const { period = 'month' } = req.query;\n\n      const stats = await DeliveryService.getDriverStats(req.userId, period);\n\n      res.status(200).json({\n        success: true,\n        data: { stats }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async trackDelivery(req, res, next) {\n    try {\n      const { deliveryId } = req.params;\n\n      const delivery = await DeliveryService.trackDelivery(\n        deliveryId,\n        req.userId,\n        req.user.role\n      );\n\n      res.status(200).json({\n        success: true,\n        data: { delivery: delivery.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // Admin endpoints\n  static async getAllDeliveries(req, res, next) {\n    try {\n      const {\n        status,\n        driverId,\n        page = 1,\n        limit = 20\n      } = req.query;\n\n      const options = {\n        status,\n        driverId,\n        page: parseInt(page),\n        limit: parseInt(limit)\n      };\n\n      const deliveries = await DeliveryService.getAllDeliveries(options);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          deliveries: deliveries.map((d) => d.toJSON()),\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            hasMore: deliveries.length === parseInt(limit)\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async approveDriver(req, res, next) {\n    try {\n      const { driverId } = req.params;\n\n      const driver = await DeliveryService.approveDriver(driverId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Driver approved successfully',\n        data: { driver: driver.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async suspendDriver(req, res, next) {\n    try {\n      const { driverId } = req.params;\n      const { reason } = req.body;\n\n      const driver = await DeliveryService.suspendDriver(driverId, reason);\n\n      res.status(200).json({\n        success: true,\n        message: 'Driver suspended successfully',\n        data: {\n          driver: driver.toJSON(),\n          reason\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getDeliveryAnalytics(req, res, next) {\n    try {\n      const { period = 'month' } = req.query;\n\n      const analytics = await DeliveryService.getDeliveryAnalytics(period);\n\n      res.status(200).json({\n        success: true,\n        data: { analytics }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async runAutoMatch(req, res, next) {\n    try {\n      const matches = await DeliveryService.autoMatchDeliveries();\n\n      res.status(200).json({\n        success: true,\n        message: `Successfully matched ${matches.length} deliveries`,\n        data: { matches }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = DeliveryController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\job-queue.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getJobStatus'.","line":10,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":10,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[663,709],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":41,"column":53,"nodeType":"CallExpression","messageId":"missingRadix","endLine":41,"endColumn":68,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1013,1013],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":47,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":47,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1134,1134],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1217,1264],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1659,1707],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2359,2402],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3030,3070],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3699,3740],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4316,4364],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4918,4963],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'queueOneTimeJob'.","line":226,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":226,"endColumn":31},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":240,"column":36,"nodeType":"CallExpression","messageId":"unexpected","endLine":240,"endColumn":76},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":241,"column":18,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":241,"endColumn":77,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5616,5622],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":244,"column":34,"nodeType":"CallExpression","messageId":"unexpected","endLine":244,"endColumn":72},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":245,"column":18,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":245,"endColumn":63,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5819,5825],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":249,"column":18,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":249,"endColumn":84,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5982,5988],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6164,6223],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6371,6430],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":272,"column":60,"nodeType":"CallExpression","messageId":"missingRadix","endLine":272,"endColumn":75,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6790,6790],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":296,"column":57,"nodeType":"CallExpression","messageId":"missingRadix","endLine":296,"endColumn":72,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7340,7340],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7391,7441],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8680,8728],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const jobQueueService = require('../services/job-queue.service');\nconst EventLogger = require('../services/event-logger.service');\n\nclass JobQueueController {\n  constructor() {\n    this.eventLogger = new EventLogger();\n  }\n\n  // GET /api/jobs/status\n  static async getJobStatus(req, res) {\n    try {\n      const { jobName } = req.query;\n\n      const status = jobQueueService.getJobStatus(jobName);\n\n      if (jobName && !status) {\n        return res.status(404).json({\n          success: false,\n          message: `Job '${jobName}' not found`\n        });\n      }\n\n      res.json({\n        success: true,\n        data: status\n      });\n    } catch (error) {\n      console.error('Get job status error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get job status'\n      });\n    }\n  }\n\n  // GET /api/jobs/history\n  static async getJobHistory(req, res) {\n    try {\n      const { limit = 50 } = req.query;\n\n      const history = jobQueueService.getJobHistory(parseInt(limit));\n\n      res.json({\n        success: true,\n        data: history,\n        pagination: {\n          limit: parseInt(limit),\n          total: history.length\n        }\n      });\n    } catch (error) {\n      console.error('Get job history error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get job history'\n      });\n    }\n  }\n\n  // GET /api/jobs/stats\n  static async getSystemStats(req, res) {\n    try {\n      const stats = jobQueueService.getSystemStats();\n\n      res.json({\n        success: true,\n        data: stats,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Get system stats error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get system statistics'\n      });\n    }\n  }\n\n  // POST /api/jobs/:jobName/trigger\n  static async triggerJob(req, res) {\n    try {\n      const { jobName } = req.params;\n\n      await jobQueueService.triggerJob(jobName);\n\n      // Log the manual trigger\n      await new EventLogger().logAdminAction(\n        'job_manually_triggered',\n        req.user.id,\n        null,\n        'job',\n        { job_name: jobName },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: `Job '${jobName}' triggered successfully`\n      });\n    } catch (error) {\n      console.error('Trigger job error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Failed to trigger job'\n      });\n    }\n  }\n\n  // POST /api/jobs/:jobName/stop\n  static async stopJob(req, res) {\n    try {\n      const { jobName } = req.params;\n\n      jobQueueService.stopJob(jobName);\n\n      // Log the stop action\n      await new EventLogger().logAdminAction(\n        'job_stopped',\n        req.user.id,\n        null,\n        'job',\n        { job_name: jobName },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: `Job '${jobName}' stopped successfully`\n      });\n    } catch (error) {\n      console.error('Stop job error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Failed to stop job'\n      });\n    }\n  }\n\n  // POST /api/jobs/:jobName/start\n  static async startJob(req, res) {\n    try {\n      const { jobName } = req.params;\n\n      jobQueueService.startJob(jobName);\n\n      // Log the start action\n      await new EventLogger().logAdminAction(\n        'job_started',\n        req.user.id,\n        null,\n        'job',\n        { job_name: jobName },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: `Job '${jobName}' started successfully`\n      });\n    } catch (error) {\n      console.error('Start job error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Failed to start job'\n      });\n    }\n  }\n\n  // POST /api/jobs/restart-all\n  static async restartAllJobs(req, res) {\n    try {\n      jobQueueService.restartAll();\n\n      // Log the restart action\n      await new EventLogger().logAdminAction(\n        'all_jobs_restarted',\n        req.user.id,\n        null,\n        'system',\n        {},\n        req\n      );\n\n      res.json({\n        success: true,\n        message: 'All jobs restarted successfully'\n      });\n    } catch (error) {\n      console.error('Restart all jobs error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to restart all jobs'\n      });\n    }\n  }\n\n  // POST /api/jobs/stop-all\n  static async stopAllJobs(req, res) {\n    try {\n      jobQueueService.stopAll();\n\n      // Log the stop all action\n      await new EventLogger().logAdminAction(\n        'all_jobs_stopped',\n        req.user.id,\n        null,\n        'system',\n        {},\n        req\n      );\n\n      res.json({\n        success: true,\n        message: 'All jobs stopped successfully'\n      });\n    } catch (error) {\n      console.error('Stop all jobs error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to stop all jobs'\n      });\n    }\n  }\n\n  // POST /api/jobs/queue\n  static async queueOneTimeJob(req, res) {\n    try {\n      const { jobName, jobType, delay = 0, parameters = {} } = req.body;\n\n      if (!jobName || !jobType) {\n        return res.status(400).json({\n          success: false,\n          message: 'Job name and type are required'\n        });\n      }\n\n      // Define available one-time job types\n      const jobTypes = {\n        'analytics-calculation': async () => {\n          const analyticsService = require('../services/analytics.service');\n          return await analyticsService.calculateDailyStats(parameters.date);\n        },\n        'payment-cleanup': async () => {\n          const paymentService = require('../services/payment.service');\n          return await paymentService.cleanupExpiredPayments();\n        },\n        'event-cleanup': async () => {\n          const eventLogger = new EventLogger();\n          return await eventLogger.cleanupOldEvents(parameters.retentionDays || 90);\n        },\n        'send-notification': async () => {\n          // Placeholder for notification sending\n          console.log(`Sending notification: ${parameters.message}`);\n          return 'Notification sent';\n        },\n        'generate-report': async () => {\n          // Placeholder for report generation\n          console.log(`Generating report: ${parameters.reportType}`);\n          return 'Report generated';\n        }\n      };\n\n      const jobFunction = jobTypes[jobType];\n      if (!jobFunction) {\n        return res.status(400).json({\n          success: false,\n          message: `Unknown job type: ${jobType}`\n        });\n      }\n\n      // Queue the job\n      await jobQueueService.queueJob(jobName, jobFunction, parseInt(delay));\n\n      // Log the queuing action\n      await new EventLogger().logAdminAction(\n        'one_time_job_queued',\n        req.user.id,\n        null,\n        'job',\n        {\n          job_name: jobName,\n          job_type: jobType,\n          delay,\n          parameters\n        },\n        req\n      );\n\n      res.json({\n        success: true,\n        message: `One-time job '${jobName}' queued successfully`,\n        data: {\n          jobName,\n          jobType,\n          delay,\n          estimatedExecutionTime: new Date(Date.now() + parseInt(delay))\n        }\n      });\n    } catch (error) {\n      console.error('Queue one-time job error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to queue one-time job'\n      });\n    }\n  }\n\n  // GET /api/jobs/health\n  static async getHealthCheck(req, res) {\n    try {\n      const stats = jobQueueService.getSystemStats();\n      const recentFailures = jobQueueService.getJobHistory(10)\n        .filter((job) => job.status === 'failed');\n\n      const healthStatus = {\n        status: stats.isRunning ? 'healthy' : 'stopped',\n        totalJobs: stats.totalScheduledJobs,\n        successRate: parseFloat(stats.last24Hours.successRate),\n        recentFailures: recentFailures.length,\n        lastFailure: recentFailures.length > 0 ? recentFailures[0] : null,\n        uptime: stats.isRunning,\n        timestamp: new Date().toISOString()\n      };\n\n      // Determine overall health\n      let overallHealth = 'healthy';\n      if (!stats.isRunning) {\n        overallHealth = 'critical';\n      } else if (parseFloat(stats.last24Hours.successRate) < 90) {\n        overallHealth = 'warning';\n      } else if (recentFailures.length > 3) {\n        overallHealth = 'warning';\n      }\n\n      res.json({\n        success: true,\n        health: overallHealth,\n        data: healthStatus\n      });\n    } catch (error) {\n      console.error('Get health check error:', error);\n      res.status(500).json({\n        success: false,\n        health: 'critical',\n        message: 'Health check failed'\n      });\n    }\n  }\n}\n\nmodule.exports = JobQueueController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\order.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'createOrder'.","line":5,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":5,"endColumn":27},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":84,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":84,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2058,2058],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":85,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":85,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2090,2090],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":95,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":95,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2374,2374],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":96,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":96,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2410,2410],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":97,"column":40,"nodeType":"CallExpression","messageId":"missingRadix","endLine":97,"endColumn":55,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2466,2466],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'updateOrderStatus'.","line":106,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":106,"endColumn":33},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'trackOrder'.","line":157,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":157,"endColumn":26},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":162,"column":18,"nodeType":"CallExpression","messageId":"unexpected","endLine":162,"endColumn":54},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":178,"column":24,"nodeType":"CallExpression","messageId":"unexpected","endLine":178,"endColumn":59},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":221,"column":9,"nodeType":"CallExpression","messageId":"missingRadix","endLine":221,"endColumn":24,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5348,5348],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":246,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":246,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5778,5778],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":247,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":247,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5810,5810],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":257,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":257,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6027,6027],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":258,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":258,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6063,6063],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":259,"column":40,"nodeType":"CallExpression","messageId":"missingRadix","endLine":259,"endColumn":55,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6119,6119],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'updatePaymentStatus'.","line":268,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":268,"endColumn":35},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'initiateOrderPayment'.","line":297,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":297,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const OrderService = require('../services/order.service');\nconst paymentService = require('../services/payment.service');\n\nclass OrderController {\n  static async createOrder(req, res, next) {\n    try {\n      const { fromCart = true, items, shippingAddress, paymentMethod, notes } = req.body;\n\n      if (!shippingAddress) {\n        return res.status(400).json({\n          success: false,\n          message: 'Shipping address is required'\n        });\n      }\n\n      if (!paymentMethod) {\n        return res.status(400).json({\n          success: false,\n          message: 'Payment method is required'\n        });\n      }\n\n      let order;\n\n      if (fromCart) {\n        // Create order from user's cart\n        order = await OrderService.createFromCart(req.userId, {\n          shippingAddress,\n          paymentMethod,\n          notes\n        });\n      } else {\n        // Create order from provided items\n        if (!items || !Array.isArray(items) || items.length === 0) {\n          return res.status(400).json({\n            success: false,\n            message: 'Items are required when not ordering from cart'\n          });\n        }\n\n        order = await OrderService.createOrder(req.userId, {\n          items,\n          shippingAddress,\n          paymentMethod,\n          notes\n        });\n      }\n\n      res.status(201).json({\n        success: true,\n        message: 'Order created successfully',\n        data: { order: order.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getOrder(req, res, next) {\n    try {\n      const { id } = req.params;\n\n      const order = await OrderService.getOrder(id, req.userId, req.user.role);\n\n      res.status(200).json({\n        success: true,\n        data: { order: order.toJSON ? order.toJSON() : order }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getMyOrders(req, res, next) {\n    try {\n      const {\n        status,\n        page = 1,\n        limit = 20\n      } = req.query;\n\n      const options = {\n        status,\n        page: parseInt(page),\n        limit: parseInt(limit)\n      };\n\n      const orders = await OrderService.getUserOrders(req.userId, req.user.role, options);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          orders: orders.map((order) => order.toJSON()),\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            hasMore: orders.length === parseInt(limit)\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updateOrderStatus(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n\n      if (!status) {\n        return res.status(400).json({\n          success: false,\n          message: 'Status is required'\n        });\n      }\n\n      const order = await OrderService.updateOrderStatus(\n        id,\n        status,\n        req.userId,\n        req.user.role\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Order status updated successfully',\n        data: { order: order.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async cancelOrder(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      const order = await OrderService.cancelOrder(\n        id,\n        req.userId,\n        req.user.role,\n        reason\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Order cancelled successfully',\n        data: { order: order.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async trackOrder(req, res, next) {\n    try {\n      const { orderNumber } = req.params;\n\n      // Find order by order number\n      const db = require('../config/database.config');\n      const { rows } = await db.query(\n        'SELECT id FROM orders WHERE order_number = $1',\n        [orderNumber]\n      );\n\n      if (!rows.length) {\n        return res.status(404).json({\n          success: false,\n          message: 'Order not found'\n        });\n      }\n\n      const order = await OrderService.getOrder(rows[0].id, req.userId, req.user.role);\n\n      // Get delivery information\n      const Delivery = require('../models/delivery.model');\n      const delivery = await Delivery.findByOrder(order.id);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          order: {\n            orderNumber: order.orderNumber,\n            status: order.status,\n            totalAmount: order.totalAmount,\n            createdAt: order.createdAt,\n            estimatedDeliveryDate: order.estimatedDeliveryDate\n          },\n          delivery: delivery ? delivery.toJSON() : null\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getOrderStats(req, res, next) {\n    try {\n      const { period = 'month' } = req.query;\n\n      const stats = await OrderService.getOrderStats(req.userId, req.user.role, period);\n\n      res.status(200).json({\n        success: true,\n        data: { stats }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getRecentOrders(req, res, next) {\n    try {\n      const { limit = 5 } = req.query;\n\n      const orders = await OrderService.getRecentOrders(\n        req.userId,\n        req.user.role,\n        parseInt(limit)\n      );\n\n      res.status(200).json({\n        success: true,\n        data: { orders }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // Admin endpoints\n  static async getAllOrders(req, res, next) {\n    try {\n      const {\n        status,\n        paymentStatus,\n        page = 1,\n        limit = 20\n      } = req.query;\n\n      const options = {\n        status,\n        paymentStatus,\n        page: parseInt(page),\n        limit: parseInt(limit)\n      };\n\n      const orders = await OrderService.getAllOrders(options);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          orders,\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            hasMore: orders.length === parseInt(limit)\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updatePaymentStatus(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { paymentStatus, paymentReference } = req.body;\n\n      if (!paymentStatus) {\n        return res.status(400).json({\n          success: false,\n          message: 'Payment status is required'\n        });\n      }\n\n      const order = await OrderService.updatePaymentStatus(\n        id,\n        paymentStatus,\n        paymentReference\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Payment status updated successfully',\n        data: { order: order.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // POST /api/orders/:id/pay\n  static async initiateOrderPayment(req, res, next) {\n    try {\n      const { id } = req.params;\n      const {\n        paymentMethod,\n        customerPhone,\n        customerName,\n        customerEmail,\n        otpCode\n      } = req.body;\n\n      // Validate required fields\n      if (!paymentMethod) {\n        return res.status(400).json({\n          success: false,\n          message: 'Payment method is required'\n        });\n      }\n\n      if (paymentMethod === 'orange_money' && !customerPhone) {\n        return res.status(400).json({\n          success: false,\n          message: 'Customer phone number is required for Orange Money payments'\n        });\n      }\n\n      // Get order details\n      const order = await OrderService.getOrder(id, req.userId, req.user.role);\n\n      if (!order) {\n        return res.status(404).json({\n          success: false,\n          message: 'Order not found'\n        });\n      }\n\n      // Check if order can be paid\n      if (order.paymentStatus === 'paid') {\n        return res.status(400).json({\n          success: false,\n          message: 'Order is already paid'\n        });\n      }\n\n      if (order.status === 'cancelled') {\n        return res.status(400).json({\n          success: false,\n          message: 'Cannot pay for cancelled order'\n        });\n      }\n\n      // Prepare payment data\n      const paymentData = {\n        orderId: order.id,\n        paymentMethod,\n        customerPhone: customerPhone || req.user.phone,\n        customerName: customerName || `${req.user.firstName} ${req.user.lastName}`,\n        customerEmail: customerEmail || req.user.email,\n        otpCode,\n        userId: req.user.id,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      };\n\n      // Initiate payment\n      const result = await paymentService.initiatePayment(paymentData);\n\n      res.status(201).json({\n        success: true,\n        message: 'Payment initiated successfully',\n        data: {\n          order: {\n            id: order.id,\n            orderNumber: order.orderNumber,\n            totalAmount: order.totalAmount,\n            currency: order.currency\n          },\n          payment: result\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = OrderController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\payment.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'initiatePayment'.","line":6,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":6,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1712,1762],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2193,2383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2691,2741],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'verifyPayment'.","line":104,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":104,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3392,3444],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getPayment'.","line":132,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":132,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4322,4365],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getOrderPayments'.","line":167,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":167,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5207,5257],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'cancelPayment'.","line":197,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":197,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6229,6275],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'retryPayment'.","line":236,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":236,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7913,7958],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getPaymentStatistics'.","line":295,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":295,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8991,9045],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'refundPayment'.","line":337,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":337,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9862,9908],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getPaymentAudit'.","line":372,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":372,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10817,10866],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'cleanupExpiredPayments'.","line":411,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":411,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":429,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":429,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11555,11611],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'confirmMockPayment'.","line":438,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":438,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":456,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":456,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12300,12357],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":471,"column":19,"nodeType":"CallExpression","messageId":"unexpected","endLine":471,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const paymentService = require('../services/payment.service');\nconst Payment = require('../models/payment.model');\n\nclass PaymentController {\n  // POST /api/payments/initiate\n  static async initiatePayment(req, res) {\n    try {\n      const {\n        orderId,\n        paymentMethod,\n        customerPhone,\n        customerName,\n        customerEmail,\n        otpCode\n      } = req.body;\n\n      // Validation\n      if (!orderId || !paymentMethod) {\n        return res.status(400).json({\n          success: false,\n          message: 'Order ID and payment method are required'\n        });\n      }\n\n      if (paymentMethod === 'orange_money' && !customerPhone) {\n        return res.status(400).json({\n          success: false,\n          message: 'Customer phone number is required for Orange Money payments'\n        });\n      }\n\n      // Validate phone number format for Burkina Faso\n      if (customerPhone && !customerPhone.match(/^\\+226\\d{8}$/)) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid phone number format. Use +226XXXXXXXX format for Burkina Faso'\n        });\n      }\n\n      const paymentData = {\n        orderId,\n        paymentMethod,\n        customerPhone,\n        customerName: customerName || `${req.user.firstName} ${req.user.lastName}`,\n        customerEmail: customerEmail || req.user.email,\n        otpCode,\n        userId: req.user.id,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      };\n\n      const result = await paymentService.initiatePayment(paymentData);\n\n      res.status(201).json({\n        success: true,\n        message: 'Payment initiated successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Payment initiation error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Payment initiation failed'\n      });\n    }\n  }\n\n  // POST /api/payments/webhook\n  static async handleWebhook(req, res) {\n    try {\n      const webhookData = req.body;\n      const signature = req.get('X-Orange-Signature') || req.get('X-Hub-Signature-256');\n      const ipAddress = req.ip;\n      const userAgent = req.get('User-Agent');\n\n      console.log('[WEBHOOK] Received notification:', {\n        reference: webhookData.reference,\n        status: webhookData.status,\n        signature: signature ? 'Present' : 'Missing'\n      });\n\n      const result = await paymentService.handleWebhook(\n        webhookData,\n        signature,\n        ipAddress,\n        userAgent\n      );\n\n      res.status(200).json({\n        success: true,\n        message: 'Webhook processed successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Webhook processing error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Webhook processing failed'\n      });\n    }\n  }\n\n  // GET /api/payments/verify/:reference\n  static async verifyPayment(req, res) {\n    try {\n      const { reference } = req.params;\n\n      if (!reference) {\n        return res.status(400).json({\n          success: false,\n          message: 'Payment reference is required'\n        });\n      }\n\n      const payment = await paymentService.verifyPayment(reference);\n\n      res.json({\n        success: true,\n        message: 'Payment verification completed',\n        data: payment\n      });\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Payment verification failed'\n      });\n    }\n  }\n\n  // GET /api/payments/:reference\n  static async getPayment(req, res) {\n    try {\n      const { reference } = req.params;\n      const payment = await Payment.findByReference(reference);\n\n      if (!payment) {\n        return res.status(404).json({\n          success: false,\n          message: 'Payment not found'\n        });\n      }\n\n      // Check if user has access to this payment\n      const hasAccess = await PaymentController.checkPaymentAccess(payment, req.user);\n      if (!hasAccess) {\n        return res.status(403).json({\n          success: false,\n          message: 'Access denied to this payment'\n        });\n      }\n\n      res.json({\n        success: true,\n        data: payment.toJSON()\n      });\n    } catch (error) {\n      console.error('Get payment error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payment'\n      });\n    }\n  }\n\n  // GET /api/payments/order/:orderId\n  static async getOrderPayments(req, res) {\n    try {\n      const { orderId } = req.params;\n      const payments = await Payment.findByOrderId(orderId);\n\n      // Check access to at least one payment (they should all belong to same order)\n      if (payments.length > 0) {\n        const hasAccess = await PaymentController.checkPaymentAccess(payments[0], req.user);\n        if (!hasAccess) {\n          return res.status(403).json({\n            success: false,\n            message: 'Access denied to these payments'\n          });\n        }\n      }\n\n      res.json({\n        success: true,\n        data: payments.map((payment) => payment.toJSON())\n      });\n    } catch (error) {\n      console.error('Get order payments error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve order payments'\n      });\n    }\n  }\n\n  // PUT /api/payments/:reference/cancel\n  static async cancelPayment(req, res) {\n    try {\n      const { reference } = req.params;\n      const { reason } = req.body;\n\n      const payment = await Payment.findByReference(reference);\n      if (!payment) {\n        return res.status(404).json({\n          success: false,\n          message: 'Payment not found'\n        });\n      }\n\n      // Check access\n      const hasAccess = await PaymentController.checkPaymentAccess(payment, req.user);\n      if (!hasAccess) {\n        return res.status(403).json({\n          success: false,\n          message: 'Access denied to this payment'\n        });\n      }\n\n      await payment.cancel(reason);\n\n      res.json({\n        success: true,\n        message: 'Payment cancelled successfully',\n        data: payment.toJSON()\n      });\n    } catch (error) {\n      console.error('Cancel payment error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Payment cancellation failed'\n      });\n    }\n  }\n\n  // POST /api/payments/:reference/retry\n  static async retryPayment(req, res) {\n    try {\n      const { reference } = req.params;\n      const { otpCode } = req.body;\n\n      const oldPayment = await Payment.findByReference(reference);\n      if (!oldPayment) {\n        return res.status(404).json({\n          success: false,\n          message: 'Payment not found'\n        });\n      }\n\n      // Check access\n      const hasAccess = await PaymentController.checkPaymentAccess(oldPayment, req.user);\n      if (!hasAccess) {\n        return res.status(403).json({\n          success: false,\n          message: 'Access denied to this payment'\n        });\n      }\n\n      if (!oldPayment.canRetry()) {\n        return res.status(400).json({\n          success: false,\n          message: 'This payment cannot be retried'\n        });\n      }\n\n      // Create new payment with same details\n      const paymentData = {\n        orderId: oldPayment.orderId,\n        paymentMethod: oldPayment.paymentMethod,\n        customerPhone: oldPayment.customerPhone,\n        customerName: oldPayment.customerName,\n        customerEmail: oldPayment.customerEmail,\n        otpCode,\n        userId: req.user.id,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      };\n\n      const result = await paymentService.initiatePayment(paymentData);\n\n      res.status(201).json({\n        success: true,\n        message: 'Payment retry initiated successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Retry payment error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Payment retry failed'\n      });\n    }\n  }\n\n  // GET /api/payments/statistics\n  static async getPaymentStatistics(req, res) {\n    try {\n      // Only admins can view payment statistics\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({\n          success: false,\n          message: 'Admin access required'\n        });\n      }\n\n      const {\n        startDate,\n        endDate,\n        paymentMethod,\n        status\n      } = req.query;\n\n      const options = {};\n      if (startDate) options.startDate = new Date(startDate);\n      if (endDate) options.endDate = new Date(endDate);\n      if (paymentMethod) options.paymentMethod = paymentMethod;\n      if (status) options.status = status;\n\n      const statistics = await paymentService.getPaymentStatistics(options);\n\n      res.json({\n        success: true,\n        data: {\n          statistics,\n          filters: options\n        }\n      });\n    } catch (error) {\n      console.error('Get payment statistics error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payment statistics'\n      });\n    }\n  }\n\n  // POST /api/payments/:reference/refund\n  static async refundPayment(req, res) {\n    try {\n      // Only admins can initiate refunds\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({\n          success: false,\n          message: 'Admin access required for refunds'\n        });\n      }\n\n      const { reference } = req.params;\n      const { amount, reason } = req.body;\n\n      const result = await paymentService.refundPayment(\n        reference,\n        amount,\n        reason,\n        req.user.id\n      );\n\n      res.json({\n        success: true,\n        message: 'Refund initiated successfully',\n        data: result\n      });\n    } catch (error) {\n      console.error('Refund payment error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Refund initiation failed'\n      });\n    }\n  }\n\n  // GET /api/payments/:reference/audit\n  static async getPaymentAudit(req, res) {\n    try {\n      // Only admins can view audit trails\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({\n          success: false,\n          message: 'Admin access required'\n        });\n      }\n\n      const { reference } = req.params;\n      const payment = await Payment.findByReference(reference);\n\n      if (!payment) {\n        return res.status(404).json({\n          success: false,\n          message: 'Payment not found'\n        });\n      }\n\n      const auditTrail = await payment.getAuditTrail();\n\n      res.json({\n        success: true,\n        data: {\n          payment: payment.toJSON(),\n          auditTrail\n        }\n      });\n    } catch (error) {\n      console.error('Get payment audit error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to retrieve payment audit trail'\n      });\n    }\n  }\n\n  // POST /api/payments/cleanup-expired\n  static async cleanupExpiredPayments(req, res) {\n    try {\n      // Only admins can trigger cleanup\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({\n          success: false,\n          message: 'Admin access required'\n        });\n      }\n\n      const expiredCount = await paymentService.cleanupExpiredPayments();\n\n      res.json({\n        success: true,\n        message: `Cleaned up ${expiredCount} expired payments`,\n        data: { expiredCount }\n      });\n    } catch (error) {\n      console.error('Cleanup expired payments error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to cleanup expired payments'\n      });\n    }\n  }\n\n  // Mock payment confirmation endpoint (for testing)\n  static async confirmMockPayment(req, res) {\n    try {\n      if (process.env.NODE_ENV === 'production') {\n        return res.status(404).json({\n          success: false,\n          message: 'Endpoint not available in production'\n        });\n      }\n\n      const { reference } = req.params;\n      const result = await paymentService.confirmMockPayment(reference);\n\n      res.json({\n        success: true,\n        message: 'Mock payment confirmed',\n        data: result\n      });\n    } catch (error) {\n      console.error('Mock payment confirmation error:', error);\n      res.status(400).json({\n        success: false,\n        message: error.message || 'Mock payment confirmation failed'\n      });\n    }\n  }\n\n  // Check if user has access to payment\n  static async checkPaymentAccess(payment, user) {\n    if (user.role === 'admin') {\n      return true; // Admins have access to all payments\n    }\n\n    // Users can access their own payments\n    const Order = require('../models/order.model');\n    const order = await Order.findById(payment.orderId);\n\n    if (!order) {\n      return false;\n    }\n\n    // Buyers can access payments for their orders\n    if (user.role === 'buyer' && order.buyerId === user.id) {\n      return true;\n    }\n\n    // Vendors can access payments for orders containing their products\n    if (user.role === 'vendor') {\n      const vendorOrders = await Order.findByVendor(user.id);\n      return vendorOrders.some((vendorOrder) => vendorOrder.id === order.id);\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = PaymentController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\product.controller.js","messages":[{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":85,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":85,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2032,2032],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":86,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":86,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2064,2064],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'searchProducts'.","line":112,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":112,"endColumn":30},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":124,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":124,"endColumn":37,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3078,3078],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":125,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":125,"endColumn":39,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3123,3123],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":152,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":152,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3970,3970],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":153,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":153,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4002,4002],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":174,"column":65,"nodeType":"CallExpression","messageId":"missingRadix","endLine":174,"endColumn":80,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4477,4477],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":216,"column":71,"nodeType":"CallExpression","messageId":"missingRadix","endLine":216,"endColumn":89,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5384,5384],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":233,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":233,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5782,5782],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":234,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":234,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[5814,5814],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const ProductService = require('../services/product.service');\n\nclass ProductController {\n  static async createProduct(req, res, next) {\n    try {\n      const product = await ProductService.createProduct(req.userId, req.body);\n\n      res.status(201).json({\n        success: true,\n        message: 'Product created successfully',\n        data: { product: product.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getProduct(req, res, next) {\n    try {\n      const { id } = req.params;\n      const includeVendor = req.query.include === 'vendor';\n\n      const product = await ProductService.getProduct(id, includeVendor);\n\n      res.status(200).json({\n        success: true,\n        data: { product: product.toJSON ? product.toJSON() : product }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updateProduct(req, res, next) {\n    try {\n      const { id } = req.params;\n      const product = await ProductService.updateProduct(id, req.userId, req.body);\n\n      res.status(200).json({\n        success: true,\n        message: 'Product updated successfully',\n        data: { product: product.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async deleteProduct(req, res, next) {\n    try {\n      const { id } = req.params;\n      await ProductService.deleteProduct(id, req.userId);\n\n      res.status(200).json({\n        success: true,\n        message: 'Product deleted successfully'\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getProducts(req, res, next) {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        category,\n        subcategory,\n        minPrice,\n        maxPrice,\n        tags,\n        search,\n        sortBy = 'created_at',\n        sortOrder = 'DESC'\n      } = req.query;\n\n      // Parse tags if provided\n      let parsedTags = [];\n      if (tags) {\n        parsedTags = Array.isArray(tags) ? tags : tags.split(',');\n      }\n\n      const options = {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        category,\n        subcategory,\n        minPrice: minPrice ? parseFloat(minPrice) : null,\n        maxPrice: maxPrice ? parseFloat(maxPrice) : null,\n        tags: parsedTags,\n        search,\n        sortBy,\n        sortOrder: sortOrder.toUpperCase(),\n        status: 'active' // Only show active products to public\n      };\n\n      const result = await ProductService.getProducts(options);\n\n      res.status(200).json({\n        success: true,\n        data: {\n          products: result.products.map((p) => p.toJSON()),\n          pagination: result.pagination\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async searchProducts(req, res, next) {\n    try {\n      const { q: searchTerm, ...options } = req.query;\n\n      if (!searchTerm) {\n        return res.status(400).json({\n          success: false,\n          message: 'Search term is required'\n        });\n      }\n\n      const result = await ProductService.searchProducts(searchTerm, {\n        page: parseInt(options.page) || 1,\n        limit: parseInt(options.limit) || 20,\n        category: options.category,\n        minPrice: options.minPrice ? parseFloat(options.minPrice) : null,\n        maxPrice: options.maxPrice ? parseFloat(options.maxPrice) : null,\n        sortBy: options.sortBy || 'created_at',\n        sortOrder: (options.sortOrder || 'DESC').toUpperCase()\n      });\n\n      res.status(200).json({\n        success: true,\n        data: {\n          products: result.products.map((p) => p.toJSON()),\n          pagination: result.pagination,\n          searchTerm\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getProductsByCategory(req, res, next) {\n    try {\n      const { category } = req.params;\n      const { page = 1, limit = 20, ...options } = req.query;\n\n      const result = await ProductService.getProductsByCategory(category, {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        ...options\n      });\n\n      res.status(200).json({\n        success: true,\n        data: {\n          products: result.products.map((p) => p.toJSON()),\n          pagination: result.pagination,\n          category\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getFeaturedProducts(req, res, next) {\n    try {\n      const { limit = 10 } = req.query;\n\n      const products = await ProductService.getFeaturedProducts(parseInt(limit));\n\n      res.status(200).json({\n        success: true,\n        data: { products: products.map((p) => p.toJSON()) }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getCategories(req, res, next) {\n    try {\n      const categories = await ProductService.getCategories();\n\n      res.status(200).json({\n        success: true,\n        data: { categories }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getTags(req, res, next) {\n    try {\n      const tags = await ProductService.getTags();\n\n      res.status(200).json({\n        success: true,\n        data: { tags }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async checkAvailability(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { quantity = 1 } = req.query;\n\n      const availability = await ProductService.checkAvailability(id, parseInt(quantity));\n\n      res.status(200).json({\n        success: true,\n        data: { availability }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // Vendor-specific endpoints\n  static async getMyProducts(req, res, next) {\n    try {\n      const { page = 1, limit = 20, status } = req.query;\n\n      const result = await ProductService.getVendorProducts(req.userId, {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        status\n      });\n\n      res.status(200).json({\n        success: true,\n        data: {\n          products: result.products.map((p) => p.toJSON()),\n          pagination: result.pagination\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getMyProductStats(req, res, next) {\n    try {\n      const stats = await ProductService.getProductStats(req.userId);\n\n      res.status(200).json({\n        success: true,\n        data: { stats }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = ProductController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\controllers\\vendor.controller.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'applyAsVendor'.","line":5,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":5,"endColumn":29},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":55,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":55,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1376,1376],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":56,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":56,"endColumn":32,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1409,1409],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":56,"column":40,"nodeType":"CallExpression","messageId":"missingRadix","endLine":56,"endColumn":55,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1432,1432],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":68,"column":49,"nodeType":"CallExpression","messageId":"missingRadix","endLine":68,"endColumn":64,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[1855,1855],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":75,"column":19,"nodeType":"CallExpression","messageId":"missingRadix","endLine":75,"endColumn":33,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2034,2034],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":76,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":76,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2070,2070],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":79,"column":22,"nodeType":"CallExpression","messageId":"missingRadix","endLine":79,"endColumn":36,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2162,2162],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":80,"column":22,"nodeType":"CallExpression","messageId":"missingRadix","endLine":80,"endColumn":36,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2212,2212],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getVendor'.","line":89,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":89,"endColumn":25},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getVendorProducts'.","line":119,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":119,"endColumn":33},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":134,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":134,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3532,3532],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":135,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":135,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3564,3564],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'updateVendorProfile'.","line":157,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":157,"endColumn":35},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'getVendorDashboard'.","line":201,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":201,"endColumn":34},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'approveVendor'.","line":239,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":239,"endColumn":29},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of static async method 'suspendVendor'.","line":265,"column":16,"nodeType":"FunctionExpression","messageId":"missingReturn","endLine":265,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const User = require('../models/user.model');\nconst ProductService = require('../services/product.service');\n\nclass VendorController {\n  static async applyAsVendor(req, res, next) {\n    try {\n      const { businessName, nationalId } = req.body;\n\n      if (!businessName || !nationalId) {\n        return res.status(400).json({\n          success: false,\n          message: 'Business name and national ID are required'\n        });\n      }\n\n      const user = await User.findById(req.userId);\n      if (!user) {\n        return res.status(404).json({\n          success: false,\n          message: 'User not found'\n        });\n      }\n\n      await user.applyAsVendor({ businessName, nationalId });\n\n      res.status(200).json({\n        success: true,\n        message: 'Vendor application submitted successfully. Awaiting approval.',\n        data: { user: user.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getVendors(req, res, next) {\n    try {\n      const {\n        page = 1,\n        limit = 20,\n        status = 'active',\n        verified\n      } = req.query;\n\n      let verifiedValue = null;\n      if (verified === 'true') {\n        verifiedValue = true;\n      } else if (verified === 'false') {\n        verifiedValue = false;\n      }\n\n      const options = {\n        status,\n        verified: verifiedValue,\n        limit: parseInt(limit),\n        offset: (parseInt(page) - 1) * parseInt(limit)\n      };\n\n      const vendors = await User.getVendors(options);\n\n      // Get total count for pagination\n      const totalOptions = { status };\n      if (options.verified !== null) {\n        totalOptions.verified = options.verified;\n      }\n      const total = await User.getVendors({ ...totalOptions, limit: 999999 });\n      const totalCount = total.length;\n      const totalPages = Math.ceil(totalCount / parseInt(limit));\n\n      res.status(200).json({\n        success: true,\n        data: {\n          vendors: vendors.map((v) => v.toJSON()),\n          pagination: {\n            page: parseInt(page),\n            limit: parseInt(limit),\n            total: totalCount,\n            totalPages,\n            hasNext: parseInt(page) < totalPages,\n            hasPrev: parseInt(page) > 1\n          }\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getVendor(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { includeStats = false } = req.query;\n\n      const vendor = await User.findById(id);\n      if (!vendor || !vendor.isVendor()) {\n        return res.status(404).json({\n          success: false,\n          message: 'Vendor not found'\n        });\n      }\n\n      const vendorData = vendor.toJSON();\n\n      // Include product stats if requested\n      if (includeStats === 'true') {\n        const stats = await ProductService.getProductStats(id);\n        vendorData.stats = stats;\n      }\n\n      res.status(200).json({\n        success: true,\n        data: { vendor: vendorData }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getVendorProducts(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { page = 1, limit = 20, status = 'active' } = req.query;\n\n      // Verify vendor exists\n      const vendor = await User.findById(id);\n      if (!vendor || !vendor.isVendor()) {\n        return res.status(404).json({\n          success: false,\n          message: 'Vendor not found'\n        });\n      }\n\n      const result = await ProductService.getVendorProducts(id, {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        status\n      });\n\n      res.status(200).json({\n        success: true,\n        data: {\n          vendor: {\n            id: vendor.id,\n            businessName: vendor.businessName,\n            firstName: vendor.firstName,\n            lastName: vendor.lastName\n          },\n          products: result.products.map((p) => p.toJSON()),\n          pagination: result.pagination\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async updateVendorProfile(req, res, next) {\n    try {\n      const allowedUpdates = [\n        'firstName', 'lastName', 'businessName',\n        'addressStreet', 'addressCity', 'addressRegion',\n        'addressLat', 'addressLng'\n      ];\n\n      const updates = {};\n      Object.keys(req.body).forEach((key) => {\n        if (allowedUpdates.includes(key)) {\n          // Convert camelCase to snake_case for database\n          const dbKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n          updates[dbKey] = req.body[key];\n        }\n      });\n\n      if (Object.keys(updates).length === 0) {\n        return res.status(400).json({\n          success: false,\n          message: 'No valid fields to update'\n        });\n      }\n\n      const user = await User.findById(req.userId);\n      if (!user || !user.isVendor()) {\n        return res.status(403).json({\n          success: false,\n          message: 'Only vendors can update vendor profile'\n        });\n      }\n\n      await user.update(updates);\n\n      res.status(200).json({\n        success: true,\n        message: 'Profile updated successfully',\n        data: { vendor: user.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async getVendorDashboard(req, res, next) {\n    try {\n      const user = await User.findById(req.userId);\n      if (!user || !user.isVendor()) {\n        return res.status(403).json({\n          success: false,\n          message: 'Access denied. Vendors only.'\n        });\n      }\n\n      // Get product stats\n      const productStats = await ProductService.getProductStats(req.userId);\n\n      // Get recent products\n      const recentProducts = await ProductService.getVendorProducts(req.userId, {\n        limit: 5,\n        page: 1\n      });\n\n      const dashboardData = {\n        vendor: user.toJSON(),\n        stats: {\n          products: productStats\n          // Add more stats here as needed (orders, revenue, etc.)\n        },\n        recentProducts: recentProducts.products.map((p) => p.toJSON())\n      };\n\n      res.status(200).json({\n        success: true,\n        data: dashboardData\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  // Admin endpoints for vendor management\n  static async approveVendor(req, res, next) {\n    try {\n      const { id } = req.params;\n\n      const vendor = await User.findById(id);\n      if (!vendor || !vendor.isVendor()) {\n        return res.status(404).json({\n          success: false,\n          message: 'Vendor not found'\n        });\n      }\n\n      await vendor.updateStatus('active');\n      await vendor.verifyIdentity();\n      await vendor.verifyBusinessLicense();\n\n      res.status(200).json({\n        success: true,\n        message: 'Vendor approved successfully',\n        data: { vendor: vendor.toJSON() }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  static async suspendVendor(req, res, next) {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      const vendor = await User.findById(id);\n      if (!vendor || !vendor.isVendor()) {\n        return res.status(404).json({\n          success: false,\n          message: 'Vendor not found'\n        });\n      }\n\n      await vendor.updateStatus('suspended');\n\n      // TODO: Log suspension reason in audit table\n      // TODO: Send notification to vendor\n\n      res.status(200).json({\n        success: true,\n        message: 'Vendor suspended successfully',\n        data: {\n          vendor: vendor.toJSON(),\n          reason\n        }\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n\nmodule.exports = VendorController;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\middlewares\\auth.middleware.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of async arrow function.","line":4,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":4,"endColumn":47},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":64,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":64,"endColumn":52},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of async arrow function.","line":82,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":82,"endColumn":47},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":110,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":110,"endColumn":42},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":135,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":135,"endColumn":41},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":153,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":153,"endColumn":42},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":178,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":178,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { verifyToken } = require('../utils/jwt');\nconst User = require('../models/user.model');\n\nconst authenticate = async (req, res, next) => {\n  try {\n    // Get token from header\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        success: false,\n        message: 'No token provided'\n      });\n    }\n\n    const token = authHeader.substring(7);\n\n    try {\n      // Verify token\n      const decoded = verifyToken(token);\n\n      // Get user from database\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        return res.status(401).json({\n          success: false,\n          message: 'User not found'\n        });\n      }\n\n      if (user.status === 'suspended') {\n        return res.status(403).json({\n          success: false,\n          message: 'Account suspended'\n        });\n      }\n\n      // Attach user to request\n      req.user = user.toJSON();\n      req.userId = user.id;\n\n      next();\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        return res.status(401).json({\n          success: false,\n          message: 'Token expired'\n        });\n      }\n      if (error.name === 'JsonWebTokenError') {\n        return res.status(401).json({\n          success: false,\n          message: 'Invalid token'\n        });\n      }\n      throw error;\n    }\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst authorize = (...roles) => (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      success: false,\n      message: 'Authentication required'\n    });\n  }\n\n  if (!roles.includes(req.user.role)) {\n    return res.status(403).json({\n      success: false,\n      message: 'Insufficient permissions'\n    });\n  }\n\n  next();\n};\n\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return next();\n    }\n\n    const token = authHeader.substring(7);\n\n    try {\n      const decoded = verifyToken(token);\n      const user = await User.findById(decoded.userId);\n\n      if (user && user.status !== 'suspended') {\n        req.user = user.toJSON();\n        req.userId = user.id;\n      }\n    } catch (error) {\n      // Ignore token errors for optional auth\n    }\n\n    next();\n  } catch (error) {\n    next(error);\n  }\n};\n\nconst requireVendor = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      success: false,\n      message: 'Authentication required'\n    });\n  }\n\n  if (req.user.role !== 'vendor') {\n    return res.status(403).json({\n      success: false,\n      message: 'Vendor access required'\n    });\n  }\n\n  if (req.user.status !== 'active') {\n    return res.status(403).json({\n      success: false,\n      message: 'Vendor account must be active'\n    });\n  }\n\n  next();\n};\n\nconst requireAdmin = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      success: false,\n      message: 'Authentication required'\n    });\n  }\n\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({\n      success: false,\n      message: 'Admin access required'\n    });\n  }\n\n  next();\n};\n\nconst requireDriver = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      success: false,\n      message: 'Authentication required'\n    });\n  }\n\n  if (req.user.role !== 'driver') {\n    return res.status(403).json({\n      success: false,\n      message: 'Driver access required'\n    });\n  }\n\n  if (req.user.status !== 'active') {\n    return res.status(403).json({\n      success: false,\n      message: 'Driver account must be active'\n    });\n  }\n\n  next();\n};\n\nconst requireBuyer = (req, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({\n      success: false,\n      message: 'Authentication required'\n    });\n  }\n\n  if (req.user.role !== 'buyer') {\n    return res.status(403).json({\n      success: false,\n      message: 'Buyer access required'\n    });\n  }\n\n  if (req.user.status !== 'active') {\n    return res.status(403).json({\n      success: false,\n      message: 'Account must be active'\n    });\n  }\n\n  next();\n};\n\nmodule.exports = {\n  authenticate,\n  authorize,\n  optionalAuth,\n  requireVendor,\n  requireAdmin,\n  requireDriver,\n  requireBuyer\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\middlewares\\validation.middleware.js","messages":[{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":1,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":1,"endColumn":56},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":80,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":80,"endColumn":45},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":108,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":108,"endColumn":42},{"ruleId":"consistent-return","severity":1,"message":"Expected to return a value at the end of arrow function.","line":146,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturn","endLine":146,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const validateRequest = (schema) => (req, res, next) => {\n  const { error } = schema.validate(req.body, { abortEarly: false });\n\n  if (error) {\n    const errors = error.details.map((detail) => ({\n      field: detail.path.join('.'),\n      message: detail.message\n    }));\n\n    return res.status(400).json({\n      success: false,\n      message: 'Validation failed',\n      errors\n    });\n  }\n\n  next();\n};\n\n// Email validation regex\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n// Phone validation regex (Burkina Faso format)\nconst phoneRegex = /^\\+226[0-9]{8}$/;\n\n// Password validation (at least 8 chars, 1 uppercase, 1 lowercase, 1 number)\nconst passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n\nconst authValidation = {\n  register: {\n    email: (value) => {\n      if (!value || !emailRegex.test(value)) {\n        throw new Error('Invalid email format');\n      }\n      return value.toLowerCase();\n    },\n    phone: (value) => {\n      if (!value || !phoneRegex.test(value)) {\n        throw new Error('Invalid phone number. Format: +226XXXXXXXX');\n      }\n      return value;\n    },\n    password: (value) => {\n      if (!value || !passwordRegex.test(value)) {\n        throw new Error('Password must be at least 8 characters with 1 uppercase, 1 lowercase, and 1 number');\n      }\n      return value;\n    },\n    role: (value) => {\n      const allowedRoles = ['buyer', 'vendor', 'driver', 'admin'];\n      if (!allowedRoles.includes(value)) {\n        throw new Error('Invalid role. Must be: buyer, vendor, driver, or admin');\n      }\n      return value;\n    }\n  },\n  login: {\n    emailOrPhone: (value, isEmail = true) => {\n      if (isEmail) {\n        if (!value || !emailRegex.test(value)) {\n          throw new Error('Invalid email format');\n        }\n        return value.toLowerCase();\n      }\n      if (!value || !phoneRegex.test(value)) {\n        throw new Error('Invalid phone number');\n      }\n      return value;\n    },\n    password: (value) => {\n      if (!value) {\n        throw new Error('Password is required');\n      }\n      return value;\n    }\n  }\n};\n\n// Manual validation functions for auth routes\nconst validateRegister = (req, res, next) => {\n  try {\n    const { email, phone, password, role = 'buyer' } = req.body;\n\n    // Validate required fields\n    if (!email || !phone || !password) {\n      return res.status(400).json({\n        success: false,\n        message: 'Email, phone, and password are required'\n      });\n    }\n\n    // Validate each field\n    req.body.email = authValidation.register.email(email);\n    req.body.phone = authValidation.register.phone(phone);\n    req.body.password = authValidation.register.password(password);\n    req.body.role = authValidation.register.role(role);\n\n    next();\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      message: 'Validation failed',\n      errors: [{ message: error.message }]\n    });\n  }\n};\n\nconst validateLogin = (req, res, next) => {\n  try {\n    const { email, phone, password } = req.body;\n\n    // Require either email or phone\n    if (!email && !phone) {\n      return res.status(400).json({\n        success: false,\n        message: 'Email or phone number is required'\n      });\n    }\n\n    if (!password) {\n      return res.status(400).json({\n        success: false,\n        message: 'Password is required'\n      });\n    }\n\n    // Validate fields\n    if (email) {\n      req.body.email = authValidation.login.emailOrPhone(email, true);\n    }\n    if (phone) {\n      req.body.phone = authValidation.login.emailOrPhone(phone, false);\n    }\n    req.body.password = authValidation.login.password(password);\n\n    next();\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      message: 'Validation failed',\n      errors: [{ message: error.message }]\n    });\n  }\n};\n\nconst validateChangePassword = (req, res, next) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'Current password and new password are required'\n      });\n    }\n\n    // Validate new password format\n    req.body.newPassword = authValidation.register.password(newPassword);\n\n    next();\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      message: 'Validation failed',\n      errors: [{ message: error.message }]\n    });\n  }\n};\n\nmodule.exports = {\n  validateRequest,\n  validateRegister,\n  validateLogin,\n  validateChangePassword,\n  authValidation\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\cart.model.js","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":118,"column":1,"nodeType":"Program","messageId":"max","endLine":118,"endColumn":106},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":135,"column":14,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":135,"endColumn":51,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4331,4337],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":200,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":200,"endColumn":42,"suggestions":[{"messageId":"removeAwait","fix":{"range":[6086,6092],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":212,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":212,"endColumn":42,"suggestions":[{"messageId":"removeAwait","fix":{"range":[6341,6347],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":225,"column":1,"nodeType":"Program","messageId":"max","endLine":225,"endColumn":106}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass Cart {\n  constructor(data) {\n    this.id = data.id;\n    this.userId = data.user_id;\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.items = data.items || [];\n  }\n\n  static async getByUserId(userId) {\n    // Use the database function to get or create cart\n    const cartQuery = 'SELECT get_or_create_cart($1) as cart_id';\n    const { rows: cartRows } = await db.query(cartQuery, [userId]);\n    const cartId = cartRows[0].cart_id;\n\n    // Get cart details with items\n    const query = `\n      SELECT \n        c.*,\n        COALESCE(\n          JSON_AGG(\n            JSON_BUILD_OBJECT(\n              'id', ci.id,\n              'productId', ci.product_id,\n              'vendorId', ci.vendor_id,\n              'quantity', ci.quantity,\n              'price', ci.price,\n              'createdAt', ci.created_at,\n              'updatedAt', ci.updated_at,\n              'product', JSON_BUILD_OBJECT(\n                'id', p.id,\n                'title', p.title,\n                'description', p.description,\n                'images', p.images,\n                'slug', p.slug,\n                'status', p.status,\n                'inventory', JSON_BUILD_OBJECT(\n                  'quantity', p.quantity,\n                  'trackInventory', p.track_inventory,\n                  'allowBackorder', p.allow_backorder\n                )\n              )\n            )\n          ) FILTER (WHERE ci.id IS NOT NULL), \n          '[]'\n        ) as items\n      FROM carts c\n      LEFT JOIN cart_items ci ON c.id = ci.cart_id\n      LEFT JOIN products p ON ci.product_id = p.id\n      WHERE c.id = $1\n      GROUP BY c.id\n    `;\n\n    const { rows } = await db.query(query, [cartId]);\n    if (!rows.length) return null;\n\n    return new Cart(rows[0]);\n  }\n\n  static async addItem(userId, productId, quantity = 1) {\n    const client = await db.getClient();\n\n    try {\n      await client.query('BEGIN');\n\n      // Get or create cart\n      const cartQuery = 'SELECT get_or_create_cart($1) as cart_id';\n      const { rows: cartRows } = await client.query(cartQuery, [userId]);\n      const cartId = cartRows[0].cart_id;\n\n      // Get product details\n      const productQuery = 'SELECT * FROM products WHERE id = $1 AND status = $2';\n      const { rows: productRows } = await client.query(productQuery, [productId, 'active']);\n\n      if (!productRows.length) {\n        throw new Error('Product not found or not available');\n      }\n\n      const product = productRows[0];\n\n      // Check inventory if tracking is enabled\n      if (product.track_inventory && product.quantity < quantity && !product.allow_backorder) {\n        throw new Error(`Only ${product.quantity} items available in stock`);\n      }\n\n      // Check if item already exists in cart\n      const existingItemQuery = `\n        SELECT * FROM cart_items \n        WHERE cart_id = $1 AND product_id = $2\n      `;\n      const { rows: existingItems } = await client.query(existingItemQuery, [cartId, productId]);\n\n      if (existingItems.length > 0) {\n        // Update existing item\n        const newQuantity = existingItems[0].quantity + quantity;\n\n        // Check inventory for new total quantity\n        if (product.track_inventory && product.quantity < newQuantity && !product.allow_backorder) {\n          throw new Error(`Only ${product.quantity} items available in stock`);\n        }\n\n        const updateQuery = `\n          UPDATE cart_items \n          SET quantity = $1, updated_at = CURRENT_TIMESTAMP\n          WHERE id = $2\n          RETURNING *\n        `;\n        await client.query(updateQuery, [newQuantity, existingItems[0].id]);\n      } else {\n        // Add new item\n        const insertQuery = `\n          INSERT INTO cart_items (cart_id, product_id, vendor_id, quantity, price)\n          VALUES ($1, $2, $3, $4, $5)\n          RETURNING *\n        `;\n        await client.query(insertQuery, [cartId, productId, product.vendor_id, quantity, product.price]);\n      }\n\n      await client.query('COMMIT');\n\n      // Return updated cart\n      return await Cart.getByUserId(userId);\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async updateItem(userId, itemId, quantity) {\n    if (quantity <= 0) {\n      return await Cart.removeItem(userId, itemId);\n    }\n\n    const client = await db.getClient();\n\n    try {\n      await client.query('BEGIN');\n\n      // Verify item belongs to user's cart\n      const verifyQuery = `\n        SELECT ci.*, p.quantity as stock_quantity, p.track_inventory, p.allow_backorder\n        FROM cart_items ci\n        JOIN carts c ON ci.cart_id = c.id\n        JOIN products p ON ci.product_id = p.id\n        WHERE ci.id = $1 AND c.user_id = $2\n      `;\n      const { rows: itemRows } = await client.query(verifyQuery, [itemId, userId]);\n\n      if (!itemRows.length) {\n        throw new Error('Cart item not found');\n      }\n\n      const item = itemRows[0];\n\n      // Check inventory\n      if (item.track_inventory && item.stock_quantity < quantity && !item.allow_backorder) {\n        throw new Error(`Only ${item.stock_quantity} items available in stock`);\n      }\n\n      // Update quantity\n      const updateQuery = `\n        UPDATE cart_items \n        SET quantity = $1, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $2\n        RETURNING *\n      `;\n      await client.query(updateQuery, [quantity, itemId]);\n\n      await client.query('COMMIT');\n\n      return await Cart.getByUserId(userId);\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async removeItem(userId, itemId) {\n    // Verify item belongs to user's cart and delete\n    const query = `\n      DELETE FROM cart_items \n      WHERE id = $1 AND cart_id IN (\n        SELECT id FROM carts WHERE user_id = $2\n      )\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, [itemId, userId]);\n\n    if (!rows.length) {\n      throw new Error('Cart item not found');\n    }\n\n    return await Cart.getByUserId(userId);\n  }\n\n  static async clear(userId) {\n    const query = `\n      DELETE FROM cart_items \n      WHERE cart_id IN (\n        SELECT id FROM carts WHERE user_id = $1\n      )\n    `;\n\n    await db.query(query, [userId]);\n    return await Cart.getByUserId(userId);\n  }\n\n  // Calculate cart totals\n  getTotals() {\n    if (!this.items || this.items.length === 0) {\n      return {\n        subtotal: 0,\n        itemCount: 0,\n        uniqueVendors: 0\n      };\n    }\n\n    const subtotal = this.items.reduce((sum, item) => sum + (parseFloat(item.price) * item.quantity), 0);\n\n    const itemCount = this.items.reduce((sum, item) => sum + item.quantity, 0);\n\n    const uniqueVendors = [...new Set(this.items.map((item) => item.vendorId))].length;\n\n    return {\n      subtotal: parseFloat(subtotal.toFixed(2)),\n      itemCount,\n      uniqueVendors\n    };\n  }\n\n  // Check if cart is valid for checkout\n  async validateForCheckout() {\n    const issues = [];\n\n    if (!this.items || this.items.length === 0) {\n      issues.push('Cart is empty');\n      return { valid: false, issues };\n    }\n\n    // Check each item\n    this.items.forEach((item) => {\n      const { product } = item;\n\n      // Check if product is still active\n      if (product.status !== 'active') {\n        issues.push(`Product \"${product.title}\" is no longer available`);\n        return;\n      }\n\n      // Check inventory\n      if (product.inventory.trackInventory) {\n        if (product.inventory.quantity < item.quantity && !product.inventory.allowBackorder) {\n          issues.push(`Only ${product.inventory.quantity} of \"${product.title}\" available`);\n        }\n      }\n    });\n\n    return {\n      valid: issues.length === 0,\n      issues\n    };\n  }\n\n  toJSON() {\n    const totals = this.getTotals();\n\n    return {\n      id: this.id,\n      userId: this.userId,\n      items: this.items.map((item) => ({\n        id: item.id,\n        productId: item.productId,\n        vendorId: item.vendorId,\n        quantity: item.quantity,\n        price: parseFloat(item.price),\n        subtotal: parseFloat((item.price * item.quantity).toFixed(2)),\n        product: item.product,\n        createdAt: item.createdAt,\n        updatedAt: item.updatedAt\n      })),\n      totals,\n      createdAt: this.createdAt,\n      updatedAt: this.updatedAt\n    };\n  }\n}\n\nmodule.exports = Cart;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\delivery.model.js","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":137,"column":1,"nodeType":"Program","messageId":"max","endLine":137,"endColumn":102},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":179,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":179,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":185,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":185,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":191,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":191,"endColumn":21},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":271,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":271,"endColumn":58,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8994,8994],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":272,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":272,"endColumn":66,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9061,9061],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":273,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":273,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9122,9122],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":277,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":277,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9365,9365],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 106. Maximum allowed is 100.","line":278,"column":1,"nodeType":"Program","messageId":"max","endLine":278,"endColumn":107},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":278,"column":13,"nodeType":"CallExpression","messageId":"missingRadix","endLine":278,"endColumn":51,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9420,9420],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":278,"column":54,"nodeType":"CallExpression","messageId":"missingRadix","endLine":278,"endColumn":88,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9457,9457],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass Delivery {\n  constructor(data) {\n    this.id = data.id;\n    this.orderId = data.order_id;\n    this.driverId = data.driver_id;\n    this.pickupAddress = data.pickup_address;\n    this.deliveryAddress = data.delivery_address;\n    this.estimatedDistance = data.estimated_distance ? parseFloat(data.estimated_distance) : null;\n    this.estimatedDuration = data.estimated_duration;\n    this.status = data.status;\n    this.assignedAt = data.assigned_at;\n    this.pickupTime = data.pickup_time;\n    this.deliveryTime = data.delivery_time;\n    this.deliverySignature = data.delivery_signature;\n    this.deliveryPhotoUrl = data.delivery_photo_url;\n    this.deliveryNotes = data.delivery_notes;\n    this.deliveryFee = data.delivery_fee ? parseFloat(data.delivery_fee) : 0;\n    this.driverEarnings = data.driver_earnings ? parseFloat(data.driver_earnings) : 0;\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.order = data.order || null;\n    this.driver = data.driver || null;\n  }\n\n  static async findById(id) {\n    const query = `\n      SELECT d.*,\n        JSON_BUILD_OBJECT(\n          'id', o.id,\n          'orderNumber', o.order_number,\n          'buyerId', o.buyer_id,\n          'totalAmount', o.total_amount,\n          'status', o.status\n        ) as order,\n        JSON_BUILD_OBJECT(\n          'id', u.id,\n          'firstName', u.first_name,\n          'lastName', u.last_name,\n          'phone', u.phone\n        ) as driver\n      FROM deliveries d\n      LEFT JOIN orders o ON d.order_id = o.id\n      LEFT JOIN users u ON d.driver_id = u.id\n      WHERE d.id = $1\n    `;\n\n    const { rows } = await db.query(query, [id]);\n    return rows.length ? new Delivery(rows[0]) : null;\n  }\n\n  static async findByOrder(orderId) {\n    const query = 'SELECT * FROM deliveries WHERE order_id = $1';\n    const { rows } = await db.query(query, [orderId]);\n    return rows.length ? new Delivery(rows[0]) : null;\n  }\n\n  static async findAvailableDeliveries(limit = 20) {\n    const query = `\n      SELECT d.*,\n        JSON_BUILD_OBJECT(\n          'id', o.id,\n          'orderNumber', o.order_number,\n          'totalAmount', o.total_amount,\n          'shippingAddress', o.shipping_address,\n          'createdAt', o.created_at\n        ) as order\n      FROM deliveries d\n      JOIN orders o ON d.order_id = o.id\n      WHERE d.status = 'pending' AND d.driver_id IS NULL\n        AND o.status IN ('confirmed', 'processing')\n      ORDER BY d.created_at ASC\n      LIMIT $1\n    `;\n\n    const { rows } = await db.query(query, [limit]);\n    return rows.map((row) => new Delivery(row));\n  }\n\n  static async findByDriver(driverId, options = {}) {\n    const { status = null, limit = 20, offset = 0 } = options;\n\n    let query = `\n      SELECT d.*,\n        JSON_BUILD_OBJECT(\n          'id', o.id,\n          'orderNumber', o.order_number,\n          'buyerId', o.buyer_id,\n          'totalAmount', o.total_amount,\n          'status', o.status,\n          'shippingAddress', o.shipping_address\n        ) as order\n      FROM deliveries d\n      JOIN orders o ON d.order_id = o.id\n      WHERE d.driver_id = $1\n    `;\n\n    const values = [driverId];\n\n    if (status) {\n      query += ' AND d.status = $2';\n      values.push(status);\n    }\n\n    query += ` \n      ORDER BY d.created_at DESC \n      LIMIT $${values.length + 1} OFFSET $${values.length + 2}\n    `;\n    values.push(limit, offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new Delivery(row));\n  }\n\n  async assignToDriver(driverId) {\n    if (this.status !== 'pending') {\n      throw new Error('Delivery is not available for assignment');\n    }\n\n    if (this.driverId) {\n      throw new Error('Delivery is already assigned');\n    }\n\n    // Verify driver exists and is active\n    const driverQuery = `\n      SELECT * FROM users \n      WHERE id = $1 AND role = 'driver' AND status = 'active'\n    `;\n    const { rows: driverRows } = await db.query(driverQuery, [driverId]);\n\n    if (!driverRows.length) {\n      throw new Error('Driver not found or not active');\n    }\n\n    // Calculate delivery fee and driver earnings (simplified)\n    const deliveryFee = this.estimatedDistance ? Math.max(2.00, this.estimatedDistance * 0.5) : 3.00;\n    const driverEarnings = deliveryFee * 0.8; // Driver gets 80%\n\n    const query = `\n      UPDATE deliveries \n      SET driver_id = $1, status = 'assigned', assigned_at = CURRENT_TIMESTAMP,\n          delivery_fee = $2, driver_earnings = $3, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $4\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, [driverId, deliveryFee, driverEarnings, this.id]);\n    Object.assign(this, new Delivery(rows[0]));\n    return this;\n  }\n\n  async updateStatus(newStatus, updateData = {}) {\n    const allowedTransitions = {\n      pending: ['assigned'],\n      assigned: ['picked_up', 'failed'],\n      picked_up: ['in_transit', 'failed'],\n      in_transit: ['delivered', 'failed'],\n      delivered: [],\n      failed: ['pending'] // Can be reassigned\n    };\n\n    if (!allowedTransitions[this.status].includes(newStatus)) {\n      throw new Error(`Cannot transition from ${this.status} to ${newStatus}`);\n    }\n\n    let query = 'UPDATE deliveries SET status = $1, updated_at = CURRENT_TIMESTAMP';\n    const values = [newStatus, this.id];\n    let paramCount = 2;\n\n    // Set timestamp fields based on status\n    if (newStatus === 'picked_up') {\n      query += ', pickup_time = CURRENT_TIMESTAMP';\n    } else if (newStatus === 'delivered') {\n      query += ', delivery_time = CURRENT_TIMESTAMP';\n\n      // Add delivery confirmation data\n      if (updateData.deliverySignature) {\n        paramCount++;\n        query += `, delivery_signature = $${paramCount}`;\n        values.splice(-1, 0, JSON.stringify(updateData.deliverySignature));\n      }\n\n      if (updateData.deliveryPhotoUrl) {\n        paramCount++;\n        query += `, delivery_photo_url = $${paramCount}`;\n        values.splice(-1, 0, updateData.deliveryPhotoUrl);\n      }\n\n      if (updateData.deliveryNotes) {\n        paramCount++;\n        query += `, delivery_notes = $${paramCount}`;\n        values.splice(-1, 0, updateData.deliveryNotes);\n      }\n    } else if (newStatus === 'failed') {\n      // Reset driver assignment for failed deliveries\n      query += ', driver_id = NULL, assigned_at = NULL';\n    }\n\n    query += ` WHERE id = $${values.length} RETURNING *`;\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new Delivery(rows[0]));\n\n    // Update order status if delivery is completed\n    if (newStatus === 'delivered') {\n      await db.query(\n        \"UPDATE orders SET status = 'delivered', delivered_at = CURRENT_TIMESTAMP WHERE id = $1\",\n        [this.orderId]\n      );\n    }\n\n    return this;\n  }\n\n  async calculateRoute() {\n    // This is a simplified version. In production, you'd use a real routing service\n    // like Google Maps API, Mapbox, or OpenRouteService\n\n    if (!this.deliveryAddress || !this.pickupAddress) {\n      return this;\n    }\n\n    // For now, return dummy data\n    // In real implementation, you'd call a routing API\n    const estimatedDistance = Math.random() * 20 + 5; // 5-25 km\n    const estimatedDuration = Math.round(estimatedDistance * 3); // ~3 minutes per km\n\n    const query = `\n      UPDATE deliveries \n      SET estimated_distance = $1, estimated_duration = $2, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $3\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, [estimatedDistance, estimatedDuration, this.id]);\n    Object.assign(this, new Delivery(rows[0]));\n    return this;\n  }\n\n  // Get delivery statistics for a driver\n  static async getDriverStats(driverId, period = 'month') {\n    let dateFilter = '';\n    const now = new Date();\n\n    if (period === 'week') {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND d.created_at >= '${weekAgo.toISOString()}'`;\n    } else if (period === 'month') {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND d.created_at >= '${monthAgo.toISOString()}'`;\n    }\n\n    const query = `\n      SELECT \n        COUNT(*) as total_deliveries,\n        COUNT(CASE WHEN d.status = 'delivered' THEN 1 END) as completed_deliveries,\n        COUNT(CASE WHEN d.status = 'failed' THEN 1 END) as failed_deliveries,\n        COALESCE(SUM(CASE WHEN d.status = 'delivered' THEN d.driver_earnings ELSE 0 END), 0) as total_earnings,\n        COALESCE(AVG(CASE WHEN d.status = 'delivered' THEN d.estimated_distance END), 0) as avg_distance,\n        COALESCE(AVG(CASE WHEN d.status = 'delivered' THEN \n          EXTRACT(EPOCH FROM (d.delivery_time - d.pickup_time))/60 \n        END), 0) as avg_delivery_time_minutes\n      FROM deliveries d\n      WHERE d.driver_id = $1 ${dateFilter}\n    `;\n\n    const { rows } = await db.query(query, [driverId]);\n\n    return {\n      totalDeliveries: parseInt(rows[0].total_deliveries),\n      completedDeliveries: parseInt(rows[0].completed_deliveries),\n      failedDeliveries: parseInt(rows[0].failed_deliveries),\n      totalEarnings: parseFloat(rows[0].total_earnings),\n      averageDistance: parseFloat(rows[0].avg_distance),\n      averageDeliveryTime: parseFloat(rows[0].avg_delivery_time_minutes),\n      successRate: parseInt(rows[0].total_deliveries) > 0\n        ? ((parseInt(rows[0].completed_deliveries) / parseInt(rows[0].total_deliveries)) * 100).toFixed(2)\n        : 0\n    };\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      orderId: this.orderId,\n      driverId: this.driverId,\n      addresses: {\n        pickup: this.pickupAddress,\n        delivery: this.deliveryAddress\n      },\n      route: {\n        estimatedDistance: this.estimatedDistance,\n        estimatedDuration: this.estimatedDuration\n      },\n      status: this.status,\n      timeline: {\n        assignedAt: this.assignedAt,\n        pickupTime: this.pickupTime,\n        deliveryTime: this.deliveryTime\n      },\n      confirmation: {\n        signature: this.deliverySignature,\n        photoUrl: this.deliveryPhotoUrl,\n        notes: this.deliveryNotes\n      },\n      payment: {\n        deliveryFee: this.deliveryFee,\n        driverEarnings: this.driverEarnings\n      },\n      order: this.order,\n      driver: this.driver,\n      createdAt: this.createdAt,\n      updatedAt: this.updatedAt\n    };\n  }\n}\n\nmodule.exports = Delivery;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\order.model.js","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":71,"column":1,"nodeType":"Program","messageId":"max","endLine":71,"endColumn":105}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass Order {\n  constructor(data) {\n    this.id = data.id;\n    this.orderNumber = data.order_number;\n    this.buyerId = data.buyer_id;\n    this.subtotal = parseFloat(data.subtotal);\n    this.shippingCost = parseFloat(data.shipping_cost);\n    this.taxAmount = parseFloat(data.tax_amount);\n    this.totalAmount = parseFloat(data.total_amount);\n    this.currency = data.currency;\n    this.shippingAddress = data.shipping_address;\n    this.shippingMethod = data.shipping_method;\n    this.estimatedDeliveryDate = data.estimated_delivery_date;\n    this.paymentMethod = data.payment_method;\n    this.paymentStatus = data.payment_status;\n    this.paymentReference = data.payment_reference;\n    this.paidAt = data.paid_at;\n    this.status = data.status;\n    this.notes = data.notes;\n    this.metadata = data.metadata || {};\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.confirmedAt = data.confirmed_at;\n    this.shippedAt = data.shipped_at;\n    this.deliveredAt = data.delivered_at;\n    this.cancelledAt = data.cancelled_at;\n    this.items = data.items || [];\n    this.delivery = data.delivery || null;\n  }\n\n  static async create(orderData) {\n    const client = await db.getClient();\n\n    try {\n      await client.query('BEGIN');\n\n      const {\n        buyerId,\n        items,\n        shippingAddress,\n        shippingMethod = 'standard',\n        paymentMethod,\n        notes,\n        metadata = {}\n      } = orderData;\n\n      // Validate items\n      if (!items || items.length === 0) {\n        throw new Error('Order must contain at least one item');\n      }\n\n      // Calculate totals\n      let subtotal = 0;\n      const processedItems = [];\n\n      // Process each item and verify inventory\n      const productChecks = await Promise.all(\n        items.map(async (item) => {\n          const productQuery = 'SELECT * FROM products WHERE id = $1 AND status = $2';\n          const { rows: productRows } = await client.query(productQuery, [item.productId, 'active']);\n\n          if (!productRows.length) {\n            throw new Error(`Product ${item.productId} not found or not available`);\n          }\n\n          const product = productRows[0];\n\n          // Check inventory\n          if (product.track_inventory && product.quantity < item.quantity && !product.allow_backorder) {\n            throw new Error(`Insufficient inventory for product \"${product.title}\"`);\n          }\n\n          const itemTotal = parseFloat(product.price) * item.quantity;\n\n          return {\n            product,\n            item,\n            itemTotal,\n            processedItem: {\n              productId: product.id,\n              vendorId: product.vendor_id,\n              productTitle: product.title,\n              productDescription: product.description,\n              quantity: item.quantity,\n              unitPrice: parseFloat(product.price),\n              totalPrice: itemTotal,\n              productSnapshot: {\n                title: product.title,\n                description: product.description,\n                price: product.price,\n                images: product.images,\n                category: product.category,\n                tags: product.tags\n              }\n            }\n          };\n        })\n      );\n\n      productChecks.forEach(({ itemTotal, processedItem }) => {\n        subtotal += itemTotal;\n        processedItems.push(processedItem);\n      });\n\n      // Calculate shipping and tax (simplified for now)\n      const shippingCost = shippingMethod === 'express' ? 5.00 : 2.00;\n      const taxAmount = 0; // No tax for now\n      const totalAmount = subtotal + shippingCost + taxAmount;\n\n      // Create order\n      const orderQuery = `\n        INSERT INTO orders (\n          buyer_id, subtotal, shipping_cost, tax_amount, total_amount,\n          shipping_address, shipping_method, payment_method, notes, metadata\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n        RETURNING *\n      `;\n\n      const orderValues = [\n        buyerId, subtotal, shippingCost, taxAmount, totalAmount,\n        JSON.stringify(shippingAddress), shippingMethod, paymentMethod,\n        notes, JSON.stringify(metadata)\n      ];\n\n      const { rows: orderRows } = await client.query(orderQuery, orderValues);\n      const order = orderRows[0];\n\n      // Add order items\n      await Promise.all(\n        processedItems.map(async (item) => {\n          const itemQuery = `\n            INSERT INTO order_items (\n              order_id, product_id, vendor_id, product_title, product_description,\n              quantity, unit_price, total_price, product_snapshot\n            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n          `;\n\n          await client.query(itemQuery, [\n            order.id, item.productId, item.vendorId, item.productTitle,\n            item.productDescription, item.quantity, item.unitPrice,\n            item.totalPrice, JSON.stringify(item.productSnapshot)\n          ]);\n\n          // Decrease inventory if tracking is enabled\n          const product = await client.query('SELECT * FROM products WHERE id = $1', [item.productId]);\n          if (product.rows[0].track_inventory) {\n            await client.query(\n              'UPDATE products SET quantity = quantity - $1 WHERE id = $2',\n              [item.quantity, item.productId]\n            );\n          }\n        })\n      );\n\n      // Create delivery record\n      const deliveryQuery = `\n        INSERT INTO deliveries (order_id, delivery_address, estimated_distance)\n        VALUES ($1, $2, $3)\n      `;\n      await client.query(deliveryQuery, [\n        order.id,\n        JSON.stringify(shippingAddress),\n        0 // Will be calculated later\n      ]);\n\n      await client.query('COMMIT');\n\n      // Return full order with items\n      return await Order.findById(order.id);\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async findById(id) {\n    const query = `\n      SELECT \n        o.*,\n        COALESCE(\n          JSON_AGG(\n            JSON_BUILD_OBJECT(\n              'id', oi.id,\n              'productId', oi.product_id,\n              'vendorId', oi.vendor_id,\n              'productTitle', oi.product_title,\n              'productDescription', oi.product_description,\n              'quantity', oi.quantity,\n              'unitPrice', oi.unit_price,\n              'totalPrice', oi.total_price,\n              'productSnapshot', oi.product_snapshot,\n              'createdAt', oi.created_at\n            )\n          ) FILTER (WHERE oi.id IS NOT NULL), \n          '[]'\n        ) as items\n      FROM orders o\n      LEFT JOIN order_items oi ON o.id = oi.order_id\n      WHERE o.id = $1\n      GROUP BY o.id\n    `;\n\n    const { rows } = await db.query(query, [id]);\n    if (!rows.length) return null;\n\n    // Get delivery info\n    const deliveryQuery = 'SELECT * FROM deliveries WHERE order_id = $1';\n    const { rows: deliveryRows } = await db.query(deliveryQuery, [id]);\n\n    const orderData = {\n      ...rows[0],\n      delivery: deliveryRows.length > 0 ? deliveryRows[0] : null\n    };\n\n    return new Order(orderData);\n  }\n\n  static async findByUser(userId, options = {}) {\n    const { status = null, limit = 20, offset = 0 } = options;\n\n    let query = `\n      SELECT o.*, \n        COALESCE(\n          JSON_AGG(\n            JSON_BUILD_OBJECT(\n              'id', oi.id,\n              'productTitle', oi.product_title,\n              'quantity', oi.quantity,\n              'unitPrice', oi.unit_price,\n              'totalPrice', oi.total_price\n            )\n          ) FILTER (WHERE oi.id IS NOT NULL), \n          '[]'\n        ) as items\n      FROM orders o\n      LEFT JOIN order_items oi ON o.id = oi.order_id\n      WHERE o.buyer_id = $1\n    `;\n\n    const values = [userId];\n\n    if (status) {\n      query += ' AND o.status = $2';\n      values.push(status);\n    }\n\n    query += ` \n      GROUP BY o.id \n      ORDER BY o.created_at DESC \n      LIMIT $${values.length + 1} OFFSET $${values.length + 2}\n    `;\n    values.push(limit, offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new Order(row));\n  }\n\n  static async findByVendor(vendorId, options = {}) {\n    const { status = null, limit = 20, offset = 0 } = options;\n\n    let query = `\n      SELECT DISTINCT o.*, \n        COALESCE(\n          JSON_AGG(\n            JSON_BUILD_OBJECT(\n              'id', oi.id,\n              'productTitle', oi.product_title,\n              'quantity', oi.quantity,\n              'unitPrice', oi.unit_price,\n              'totalPrice', oi.total_price\n            )\n          ) FILTER (WHERE oi.vendor_id = $1), \n          '[]'\n        ) as items\n      FROM orders o\n      JOIN order_items oi ON o.id = oi.order_id\n      WHERE oi.vendor_id = $1\n    `;\n\n    const values = [vendorId];\n\n    if (status) {\n      query += ' AND o.status = $2';\n      values.push(status);\n    }\n\n    query += ` \n      GROUP BY o.id \n      ORDER BY o.created_at DESC \n      LIMIT $${values.length + 1} OFFSET $${values.length + 2}\n    `;\n    values.push(limit, offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new Order(row));\n  }\n\n  async updateStatus(newStatus) {\n    const allowedTransitions = {\n      pending: ['confirmed', 'cancelled'],\n      confirmed: ['processing', 'cancelled'],\n      processing: ['shipped', 'cancelled'],\n      shipped: ['delivered', 'cancelled'],\n      delivered: [],\n      cancelled: []\n    };\n\n    if (!allowedTransitions[this.status].includes(newStatus)) {\n      throw new Error(`Cannot transition from ${this.status} to ${newStatus}`);\n    }\n\n    const timestampField = {\n      confirmed: 'confirmed_at',\n      shipped: 'shipped_at',\n      delivered: 'delivered_at',\n      cancelled: 'cancelled_at'\n    }[newStatus];\n\n    let query = 'UPDATE orders SET status = $1, updated_at = CURRENT_TIMESTAMP';\n    const values = [newStatus, this.id];\n\n    if (timestampField) {\n      query += `, ${timestampField} = CURRENT_TIMESTAMP`;\n    }\n\n    query += ' WHERE id = $2 RETURNING *';\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new Order(rows[0]));\n    return this;\n  }\n\n  async updatePaymentStatus(paymentStatus, paymentReference = null) {\n    let query = `\n      UPDATE orders \n      SET payment_status = $1, updated_at = CURRENT_TIMESTAMP\n    `;\n    const values = [paymentStatus, this.id];\n\n    if (paymentReference) {\n      query += ', payment_reference = $3';\n      values.splice(1, 0, paymentReference);\n    }\n\n    if (paymentStatus === 'paid') {\n      query += ', paid_at = CURRENT_TIMESTAMP';\n    }\n\n    query += ` WHERE id = $${values.length} RETURNING *`;\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new Order(rows[0]));\n    return this;\n  }\n\n  async cancel(reason = null) {\n    if (this.status === 'delivered') {\n      throw new Error('Cannot cancel delivered order');\n    }\n\n    if (this.status === 'cancelled') {\n      throw new Error('Order is already cancelled');\n    }\n\n    const client = await db.getClient();\n\n    try {\n      await client.query('BEGIN');\n\n      // Update order status\n      await client.query(\n        `UPDATE orders \n         SET status = 'cancelled', cancelled_at = CURRENT_TIMESTAMP, \n             notes = COALESCE(notes || '; ', '') || $1\n         WHERE id = $2`,\n        [reason || 'Cancelled by user', this.id]\n      );\n\n      // Restore inventory\n      const itemsQuery = 'SELECT * FROM order_items WHERE order_id = $1';\n      const { rows: items } = await client.query(itemsQuery, [this.id]);\n\n      await Promise.all(\n        items.map(async (item) => {\n          const productQuery = 'SELECT track_inventory FROM products WHERE id = $1';\n          const { rows: productRows } = await client.query(productQuery, [item.product_id]);\n\n          if (productRows.length > 0 && productRows[0].track_inventory) {\n            await client.query(\n              'UPDATE products SET quantity = quantity + $1 WHERE id = $2',\n              [item.quantity, item.product_id]\n            );\n          }\n        })\n      );\n\n      await client.query('COMMIT');\n\n      // Reload order\n      const updatedOrder = await Order.findById(this.id);\n      Object.assign(this, updatedOrder);\n      return this;\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  // Get order summary for vendor\n  getVendorSummary(vendorId) {\n    const vendorItems = this.items.filter((item) => item.vendorId === vendorId);\n    const vendorTotal = vendorItems.reduce((sum, item) => sum + item.totalPrice, 0);\n\n    return {\n      orderId: this.id,\n      orderNumber: this.orderNumber,\n      buyerId: this.buyerId,\n      items: vendorItems,\n      vendorTotal: parseFloat(vendorTotal.toFixed(2)),\n      status: this.status,\n      paymentStatus: this.paymentStatus,\n      createdAt: this.createdAt,\n      shippingAddress: this.shippingAddress\n    };\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      orderNumber: this.orderNumber,\n      buyerId: this.buyerId,\n      totals: {\n        subtotal: this.subtotal,\n        shippingCost: this.shippingCost,\n        taxAmount: this.taxAmount,\n        totalAmount: this.totalAmount,\n        currency: this.currency\n      },\n      shipping: {\n        address: this.shippingAddress,\n        method: this.shippingMethod,\n        estimatedDeliveryDate: this.estimatedDeliveryDate\n      },\n      payment: {\n        method: this.paymentMethod,\n        status: this.paymentStatus,\n        reference: this.paymentReference,\n        paidAt: this.paidAt\n      },\n      status: this.status,\n      notes: this.notes,\n      metadata: this.metadata,\n      items: this.items,\n      delivery: this.delivery,\n      timestamps: {\n        createdAt: this.createdAt,\n        updatedAt: this.updatedAt,\n        confirmedAt: this.confirmedAt,\n        shippedAt: this.shippedAt,\n        deliveredAt: this.deliveredAt,\n        cancelledAt: this.cancelledAt\n      }\n    };\n  }\n}\n\nmodule.exports = Order;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\payment.model.js","messages":[{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":139,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":139,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":144,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":144,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":151,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":151,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":161,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":161,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":168,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":168,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":175,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":175,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":182,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":182,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":188,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":188,"endColumn":19},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":218,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":218,"endColumn":46,"suggestions":[{"messageId":"removeAwait","fix":{"range":[7236,7242],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":231,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":231,"endColumn":60,"suggestions":[{"messageId":"removeAwait","fix":{"range":[7583,7589],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":248,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":248,"endColumn":59,"suggestions":[{"messageId":"removeAwait","fix":{"range":[8033,8039],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":292,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":292,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":298,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":298,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":304,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":304,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":310,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":310,"endColumn":19},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":321,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":321,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9985,9985],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":333,"column":12,"nodeType":"CallExpression","messageId":"missingRadix","endLine":333,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[10428,10428],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass Payment {\n  constructor(data) {\n    this.id = data.id;\n    this.orderId = data.order_id;\n    this.paymentMethod = data.payment_method;\n    this.paymentProvider = data.payment_provider;\n    this.transactionId = data.transaction_id;\n    this.externalTransactionId = data.external_transaction_id;\n    this.paymentReference = data.payment_reference;\n    this.amount = parseFloat(data.amount);\n    this.currency = data.currency;\n    this.fees = parseFloat(data.fees || 0);\n    this.netAmount = parseFloat(data.net_amount);\n    this.status = data.status;\n    this.customerPhone = data.customer_phone;\n    this.customerName = data.customer_name;\n    this.customerEmail = data.customer_email;\n    this.paymentUrl = data.payment_url;\n    this.returnUrl = data.return_url;\n    this.cancelUrl = data.cancel_url;\n    this.webhookUrl = data.webhook_url;\n    this.otpCode = data.otp_code;\n    this.paymentToken = data.payment_token;\n    this.authorizationCode = data.authorization_code;\n    this.webhookData = data.webhook_data || {};\n    this.gatewayResponse = data.gateway_response || {};\n    this.errorDetails = data.error_details || {};\n    this.riskScore = data.risk_score || 0;\n    this.fraudFlags = data.fraud_flags || [];\n    this.initiatedAt = data.initiated_at;\n    this.expiresAt = data.expires_at;\n    this.completedAt = data.completed_at;\n    this.failedAt = data.failed_at;\n    this.cancelledAt = data.cancelled_at;\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.createdBy = data.created_by;\n    this.updatedBy = data.updated_by;\n    this.ipAddress = data.ip_address;\n    this.userAgent = data.user_agent;\n  }\n\n  static async create(paymentData) {\n    const {\n      orderId,\n      paymentMethod,\n      amount,\n      currency = 'XOF',\n      customerPhone,\n      customerName,\n      customerEmail,\n      returnUrl,\n      cancelUrl,\n      createdBy,\n      ipAddress,\n      userAgent,\n      paymentReference\n    } = paymentData;\n\n    // Calculate fees based on payment method\n    const fees = Payment.calculateFees(paymentMethod, amount);\n    const netAmount = amount - fees;\n\n    const query = `\n      INSERT INTO payments (\n        order_id, payment_method, amount, currency, fees, net_amount,\n        customer_phone, customer_name, customer_email, return_url, cancel_url,\n        payment_reference, expires_at, created_by, ip_address, user_agent\n      ) VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,\n        COALESCE($12, generate_payment_reference()),\n        calculate_payment_expiry($2),\n        $13, $14, $15\n      ) RETURNING *\n    `;\n\n    const values = [\n      orderId, paymentMethod, amount, currency, fees, netAmount,\n      customerPhone, customerName, customerEmail, returnUrl, cancelUrl,\n      paymentReference, createdBy, ipAddress, userAgent\n    ];\n\n    const { rows } = await db.query(query, values);\n    return new Payment(rows[0]);\n  }\n\n  static async findById(id) {\n    const query = 'SELECT * FROM payments WHERE id = $1';\n    const { rows } = await db.query(query, [id]);\n    return rows.length ? new Payment(rows[0]) : null;\n  }\n\n  static async findByReference(paymentReference) {\n    const query = 'SELECT * FROM payments WHERE payment_reference = $1';\n    const { rows } = await db.query(query, [paymentReference]);\n    return rows.length ? new Payment(rows[0]) : null;\n  }\n\n  static async findByOrderId(orderId) {\n    const query = 'SELECT * FROM payments WHERE order_id = $1 ORDER BY created_at DESC';\n    const { rows } = await db.query(query, [orderId]);\n    return rows.map((row) => new Payment(row));\n  }\n\n  static async findByTransactionId(transactionId) {\n    const query = 'SELECT * FROM payments WHERE transaction_id = $1 OR external_transaction_id = $1';\n    const { rows } = await db.query(query, [transactionId]);\n    return rows.length ? new Payment(rows[0]) : null;\n  }\n\n  async updateStatus(newStatus, updateData = {}) {\n    const allowedTransitions = {\n      pending: ['processing', 'failed', 'cancelled', 'expired'],\n      processing: ['completed', 'failed', 'cancelled'],\n      completed: ['refunded'],\n      failed: [],\n      cancelled: [],\n      refunded: [],\n      expired: []\n    };\n\n    if (!allowedTransitions[this.status].includes(newStatus)) {\n      throw new Error(`Cannot transition from ${this.status} to ${newStatus}`);\n    }\n\n    let query = `\n      UPDATE payments \n      SET status = $1, updated_at = CURRENT_TIMESTAMP, updated_by = $2\n    `;\n    const values = [newStatus, updateData.updatedBy || null, this.id];\n    let paramCount = 2;\n\n    // Set timestamp fields based on status\n    if (newStatus === 'completed') {\n      query += ', completed_at = CURRENT_TIMESTAMP';\n      if (updateData.externalTransactionId) {\n        paramCount++;\n        query += `, external_transaction_id = $${paramCount}`;\n        values.splice(-1, 0, updateData.externalTransactionId);\n      }\n      if (updateData.authorizationCode) {\n        paramCount++;\n        query += `, authorization_code = $${paramCount}`;\n        values.splice(-1, 0, updateData.authorizationCode);\n      }\n    } else if (newStatus === 'failed') {\n      query += ', failed_at = CURRENT_TIMESTAMP';\n      if (updateData.errorDetails) {\n        paramCount++;\n        query += `, error_details = $${paramCount}`;\n        values.splice(-1, 0, JSON.stringify(updateData.errorDetails));\n      }\n    } else if (newStatus === 'cancelled') {\n      query += ', cancelled_at = CURRENT_TIMESTAMP';\n    }\n\n    // Update gateway response if provided\n    if (updateData.gatewayResponse) {\n      paramCount++;\n      query += `, gateway_response = $${paramCount}`;\n      values.splice(-1, 0, JSON.stringify(updateData.gatewayResponse));\n    }\n\n    // Update webhook data if provided\n    if (updateData.webhookData) {\n      paramCount++;\n      query += `, webhook_data = $${paramCount}`;\n      values.splice(-1, 0, JSON.stringify(updateData.webhookData));\n    }\n\n    // Update fraud score if provided\n    if (updateData.riskScore !== undefined) {\n      paramCount++;\n      query += `, risk_score = $${paramCount}`;\n      values.splice(-1, 0, updateData.riskScore);\n    }\n\n    // Update IP and user agent for audit trail\n    if (updateData.ipAddress) {\n      paramCount++;\n      query += `, ip_address = $${paramCount}`;\n      values.splice(-1, 0, updateData.ipAddress);\n    }\n\n    if (updateData.userAgent) {\n      paramCount++;\n      query += `, user_agent = $${paramCount}`;\n      values.splice(-1, 0, updateData.userAgent);\n    }\n\n    query += ` WHERE id = $${values.length} RETURNING *`;\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new Payment(rows[0]));\n    return this;\n  }\n\n  async updatePaymentUrl(paymentUrl, paymentToken = null) {\n    const query = `\n      UPDATE payments \n      SET payment_url = $1, payment_token = $2, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $3\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, [paymentUrl, paymentToken, this.id]);\n    Object.assign(this, new Payment(rows[0]));\n    return this;\n  }\n\n  async expire() {\n    if (this.status !== 'pending') {\n      throw new Error('Only pending payments can be expired');\n    }\n\n    return await this.updateStatus('expired');\n  }\n\n  async cancel(reason = null) {\n    if (!['pending', 'processing'].includes(this.status)) {\n      throw new Error('Only pending or processing payments can be cancelled');\n    }\n\n    const updateData = {};\n    if (reason) {\n      updateData.errorDetails = { cancellation_reason: reason };\n    }\n\n    return await this.updateStatus('cancelled', updateData);\n  }\n\n  async refund(refundAmount = null, reason = null) {\n    if (this.status !== 'completed') {\n      throw new Error('Only completed payments can be refunded');\n    }\n\n    const amount = refundAmount || this.amount;\n    const updateData = {\n      errorDetails: {\n        refund_amount: amount,\n        refund_reason: reason,\n        refunded_at: new Date().toISOString()\n      }\n    };\n\n    return await this.updateStatus('refunded', updateData);\n  }\n\n  // Calculate fees based on payment method and amount\n  static calculateFees(paymentMethod, amount) {\n    switch (paymentMethod) {\n      case 'orange_money':\n        // Orange Money typically charges around 1-2% + fixed fee\n        return Math.min(amount * 0.015 + 50, amount * 0.02); // 1.5% + 50 XOF, max 2%\n      case 'bank_transfer':\n        return Math.min(amount * 0.01 + 100, 500); // 1% + 100 XOF, max 500 XOF\n      case 'cash_on_delivery':\n        return 0; // No processing fees for COD\n      default:\n        return 0;\n    }\n  }\n\n  // Get payment statistics\n  static async getStatistics(options = {}) {\n    const {\n      startDate = null,\n      endDate = null,\n      paymentMethod = null,\n      status = null\n    } = options;\n\n    let query = `\n      SELECT \n        payment_method,\n        status,\n        COUNT(*) as transaction_count,\n        SUM(amount) as total_amount,\n        AVG(amount) as average_amount,\n        SUM(fees) as total_fees,\n        SUM(net_amount) as total_net_amount\n      FROM payments\n      WHERE 1=1\n    `;\n\n    const values = [];\n    let paramCount = 0;\n\n    if (startDate) {\n      paramCount++;\n      query += ` AND created_at >= $${paramCount}`;\n      values.push(startDate);\n    }\n\n    if (endDate) {\n      paramCount++;\n      query += ` AND created_at <= $${paramCount}`;\n      values.push(endDate);\n    }\n\n    if (paymentMethod) {\n      paramCount++;\n      query += ` AND payment_method = $${paramCount}`;\n      values.push(paymentMethod);\n    }\n\n    if (status) {\n      paramCount++;\n      query += ` AND status = $${paramCount}`;\n      values.push(status);\n    }\n\n    query += ' GROUP BY payment_method, status ORDER BY payment_method, status';\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => ({\n      paymentMethod: row.payment_method,\n      status: row.status,\n      transactionCount: parseInt(row.transaction_count),\n      totalAmount: parseFloat(row.total_amount),\n      averageAmount: parseFloat(row.average_amount),\n      totalFees: parseFloat(row.total_fees),\n      totalNetAmount: parseFloat(row.total_net_amount)\n    }));\n  }\n\n  // Clean up expired payments\n  static async cleanupExpiredPayments() {\n    const query = 'SELECT cleanup_expired_payments()';\n    const { rows } = await db.query(query);\n    return parseInt(rows[0].cleanup_expired_payments);\n  }\n\n  // Get payment audit trail\n  async getAuditTrail() {\n    const query = `\n      SELECT \n        pal.old_status,\n        pal.new_status,\n        pal.changed_at,\n        pal.changed_by,\n        pal.ip_address,\n        pal.user_agent,\n        pal.notes,\n        u.first_name,\n        u.last_name,\n        u.email\n      FROM payment_audit_log pal\n      LEFT JOIN users u ON pal.changed_by = u.id\n      WHERE pal.payment_id = $1\n      ORDER BY pal.changed_at DESC\n    `;\n\n    const { rows } = await db.query(query, [this.id]);\n    return rows.map((row) => ({\n      oldStatus: row.old_status,\n      newStatus: row.new_status,\n      changedAt: row.changed_at,\n      changedBy: {\n        id: row.changed_by,\n        name: row.changed_by ? `${row.first_name} ${row.last_name}` : 'System',\n        email: row.email\n      },\n      ipAddress: row.ip_address,\n      userAgent: row.user_agent,\n      notes: row.notes\n    }));\n  }\n\n  // Check if payment is expired\n  isExpired() {\n    return this.expiresAt && new Date() > new Date(this.expiresAt);\n  }\n\n  // Check if payment can be retried\n  canRetry() {\n    return ['failed', 'expired', 'cancelled'].includes(this.status);\n  }\n\n  // Get formatted amount for display\n  getFormattedAmount() {\n    return `${this.amount.toLocaleString()} ${this.currency}`;\n  }\n\n  // Detect potential fraud\n  detectFraud() {\n    let riskScore = 0;\n    const flags = [];\n\n    // High amount flag\n    if (this.amount > 1000000) { // 1M XOF\n      riskScore += 30;\n      flags.push('high_amount');\n    }\n\n    // Multiple failed attempts (would need additional logic)\n    // Unusual customer phone patterns\n    if (this.customerPhone && !this.customerPhone.match(/^\\+226\\d{8}$/)) {\n      riskScore += 10;\n      flags.push('invalid_phone_format');\n    }\n\n    // Set fraud indicators\n    this.riskScore = Math.min(riskScore, 100);\n    this.fraudFlags = flags;\n\n    let recommendation;\n    if (riskScore > 70) {\n      recommendation = 'block';\n    } else if (riskScore > 40) {\n      recommendation = 'review';\n    } else {\n      recommendation = 'approve';\n    }\n\n    return {\n      riskScore: this.riskScore,\n      flags: this.fraudFlags,\n      recommendation\n    };\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      orderId: this.orderId,\n      paymentMethod: this.paymentMethod,\n      paymentProvider: this.paymentProvider,\n      transactionId: this.transactionId,\n      externalTransactionId: this.externalTransactionId,\n      paymentReference: this.paymentReference,\n      amount: this.amount,\n      currency: this.currency,\n      fees: this.fees,\n      netAmount: this.netAmount,\n      status: this.status,\n      customer: {\n        phone: this.customerPhone,\n        name: this.customerName,\n        email: this.customerEmail\n      },\n      urls: {\n        payment: this.paymentUrl,\n        return: this.returnUrl,\n        cancel: this.cancelUrl,\n        webhook: this.webhookUrl\n      },\n      security: {\n        riskScore: this.riskScore,\n        fraudFlags: this.fraudFlags\n      },\n      timestamps: {\n        initiatedAt: this.initiatedAt,\n        expiresAt: this.expiresAt,\n        completedAt: this.completedAt,\n        failedAt: this.failedAt,\n        cancelledAt: this.cancelledAt,\n        createdAt: this.createdAt,\n        updatedAt: this.updatedAt\n      },\n      // Only include sensitive data for internal use\n      ...(this.includeInternal && {\n        otpCode: this.otpCode,\n        paymentToken: this.paymentToken,\n        authorizationCode: this.authorizationCode,\n        webhookData: this.webhookData,\n        gatewayResponse: this.gatewayResponse,\n        errorDetails: this.errorDetails\n      })\n    };\n  }\n}\n\nmodule.exports = Payment;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\product.model.js","messages":[{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":16,"column":21,"nodeType":"CallExpression","messageId":"missingRadix","endLine":16,"endColumn":44,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[573,573],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":131,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":131,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":138,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":138,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":145,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":145,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":152,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":152,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":159,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":159,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":165,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":165,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":172,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":172,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":179,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":179,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":192,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":192,"endColumn":17},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":196,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":196,"endColumn":17},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":217,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":217,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":223,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":223,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":229,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":229,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":235,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":235,"endColumn":19},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":242,"column":12,"nodeType":"CallExpression","messageId":"missingRadix","endLine":242,"endColumn":35,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6647,6647],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":269,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":269,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass Product {\n  constructor(data) {\n    this.id = data.id;\n    this.vendorId = data.vendor_id;\n    this.title = data.title;\n    this.description = data.description;\n    this.price = parseFloat(data.price);\n    this.compareAtPrice = data.compare_at_price ? parseFloat(data.compare_at_price) : null;\n    this.currency = data.currency;\n    this.category = data.category;\n    this.subcategory = data.subcategory;\n    this.tags = data.tags || [];\n    this.images = data.images || [];\n    this.quantity = parseInt(data.quantity);\n    this.trackInventory = data.track_inventory;\n    this.allowBackorder = data.allow_backorder;\n    this.weight = data.weight ? parseFloat(data.weight) : null;\n    this.dimensions = data.dimensions;\n    this.freeShipping = data.free_shipping;\n    this.shippingPrice = parseFloat(data.shipping_price);\n    this.status = data.status;\n    this.metadata = data.metadata || {};\n    this.slug = data.slug;\n    this.metaTitle = data.meta_title;\n    this.metaDescription = data.meta_description;\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.publishedAt = data.published_at;\n  }\n\n  static async create(productData) {\n    const {\n      vendorId,\n      title,\n      description,\n      price,\n      compareAtPrice,\n      currency = 'XOF',\n      category,\n      subcategory,\n      tags = [],\n      images = [],\n      quantity = 0,\n      trackInventory = true,\n      allowBackorder = false,\n      weight,\n      dimensions,\n      freeShipping = false,\n      shippingPrice = 0,\n      status = 'draft',\n      metadata = {},\n      metaTitle,\n      metaDescription\n    } = productData;\n\n    const query = `\n      INSERT INTO products (\n        vendor_id, title, description, price, compare_at_price,\n        currency, category, subcategory, tags, images,\n        quantity, track_inventory, allow_backorder,\n        weight, dimensions, free_shipping, shipping_price,\n        status, metadata, meta_title, meta_description\n      ) VALUES (\n        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,\n        $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21\n      )\n      RETURNING *\n    `;\n\n    const values = [\n      vendorId, title, description, price, compareAtPrice,\n      currency, category, subcategory, tags, JSON.stringify(images),\n      quantity, trackInventory, allowBackorder,\n      weight, dimensions ? JSON.stringify(dimensions) : null,\n      freeShipping, shippingPrice, status,\n      JSON.stringify(metadata), metaTitle, metaDescription\n    ];\n\n    const { rows } = await db.query(query, values);\n    return new Product(rows[0]);\n  }\n\n  static async findById(id) {\n    const query = 'SELECT * FROM products WHERE id = $1';\n    const { rows } = await db.query(query, [id]);\n    return rows.length ? new Product(rows[0]) : null;\n  }\n\n  static async findByVendor(vendorId, options = {}) {\n    const { status = null, limit = 50, offset = 0 } = options;\n\n    let query = 'SELECT * FROM products WHERE vendor_id = $1';\n    const values = [vendorId];\n\n    if (status) {\n      query += ' AND status = $2';\n      values.push(status);\n    }\n\n    query += ` ORDER BY created_at DESC LIMIT $${values.length + 1} OFFSET $${values.length + 2}`;\n    values.push(limit, offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new Product(row));\n  }\n\n  static async findAll(options = {}) {\n    const {\n      status = 'active',\n      category = null,\n      subcategory = null,\n      vendorId = null,\n      minPrice = null,\n      maxPrice = null,\n      tags = [],\n      search = null,\n      sortBy = 'created_at',\n      sortOrder = 'DESC',\n      limit = 50,\n      offset = 0\n    } = options;\n\n    let query = 'SELECT * FROM products WHERE 1=1';\n    const values = [];\n    let paramCount = 0;\n\n    // Status filter\n    if (status) {\n      paramCount++;\n      query += ` AND status = $${paramCount}`;\n      values.push(status);\n    }\n\n    // Category filter\n    if (category) {\n      paramCount++;\n      query += ` AND category = $${paramCount}`;\n      values.push(category);\n    }\n\n    // Subcategory filter\n    if (subcategory) {\n      paramCount++;\n      query += ` AND subcategory = $${paramCount}`;\n      values.push(subcategory);\n    }\n\n    // Vendor filter\n    if (vendorId) {\n      paramCount++;\n      query += ` AND vendor_id = $${paramCount}`;\n      values.push(vendorId);\n    }\n\n    // Price range filter\n    if (minPrice !== null) {\n      paramCount++;\n      query += ` AND price >= $${paramCount}`;\n      values.push(minPrice);\n    }\n\n    if (maxPrice !== null) {\n      paramCount++;\n      query += ` AND price <= $${paramCount}`;\n      values.push(maxPrice);\n    }\n\n    // Tags filter\n    if (tags.length > 0) {\n      paramCount++;\n      query += ` AND tags && $${paramCount}`;\n      values.push(tags);\n    }\n\n    // Search filter\n    if (search) {\n      paramCount++;\n      query += ` AND to_tsvector('english', coalesce(title, '') || ' ' || coalesce(description, ''))\n        @@ plainto_tsquery('english', $${paramCount})`;\n      values.push(search);\n    }\n\n    // Sorting\n    const allowedSortFields = ['created_at', 'price', 'title', 'updated_at'];\n    const sortField = allowedSortFields.includes(sortBy) ? sortBy : 'created_at';\n    const sortDirection = sortOrder.toUpperCase() === 'ASC' ? 'ASC' : 'DESC';\n    query += ` ORDER BY ${sortField} ${sortDirection}`;\n\n    // Pagination\n    paramCount++;\n    query += ` LIMIT $${paramCount}`;\n    values.push(limit);\n\n    paramCount++;\n    query += ` OFFSET $${paramCount}`;\n    values.push(offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new Product(row));\n  }\n\n  static async count(options = {}) {\n    const {\n      status = 'active',\n      category = null,\n      vendorId = null,\n      search = null\n    } = options;\n\n    let query = 'SELECT COUNT(*) as total FROM products WHERE 1=1';\n    const values = [];\n    let paramCount = 0;\n\n    if (status) {\n      paramCount++;\n      query += ` AND status = $${paramCount}`;\n      values.push(status);\n    }\n\n    if (category) {\n      paramCount++;\n      query += ` AND category = $${paramCount}`;\n      values.push(category);\n    }\n\n    if (vendorId) {\n      paramCount++;\n      query += ` AND vendor_id = $${paramCount}`;\n      values.push(vendorId);\n    }\n\n    if (search) {\n      paramCount++;\n      query += ` AND to_tsvector('english', coalesce(title, '') || ' ' || coalesce(description, ''))\n        @@ plainto_tsquery('english', $${paramCount})`;\n      values.push(search);\n    }\n\n    const { rows } = await db.query(query, values);\n    return parseInt(rows[0].total);\n  }\n\n  async update(updates) {\n    const allowedUpdates = [\n      'title', 'description', 'price', 'compare_at_price',\n      'category', 'subcategory', 'tags', 'images',\n      'quantity', 'track_inventory', 'allow_backorder',\n      'weight', 'dimensions', 'free_shipping', 'shipping_price',\n      'status', 'metadata', 'meta_title', 'meta_description'\n    ];\n\n    const updateFields = [];\n    const values = [];\n    let paramCount = 1;\n\n    Object.keys(updates).forEach((key) => {\n      if (allowedUpdates.includes(key)) {\n        const dbKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n        updateFields.push(`${dbKey} = $${paramCount}`);\n\n        if (key === 'images' || key === 'dimensions' || key === 'metadata') {\n          values.push(JSON.stringify(updates[key]));\n        } else {\n          values.push(updates[key]);\n        }\n\n        paramCount++;\n      }\n    });\n\n    if (updateFields.length === 0) {\n      return this;\n    }\n\n    // Add published_at if status is changing to active\n    if (updates.status === 'active' && this.status !== 'active' && !this.publishedAt) {\n      updateFields.push('published_at = CURRENT_TIMESTAMP');\n    }\n\n    values.push(this.id);\n    const query = `\n      UPDATE products \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new Product(rows[0]));\n    return this;\n  }\n\n  async delete() {\n    const query = 'DELETE FROM products WHERE id = $1';\n    await db.query(query, [this.id]);\n    return true;\n  }\n\n  async adjustInventory(quantity, operation = 'decrease') {\n    if (!this.trackInventory) {\n      return this;\n    }\n\n    const newQuantity = operation === 'decrease'\n      ? this.quantity - quantity\n      : this.quantity + quantity;\n\n    if (newQuantity < 0 && !this.allowBackorder) {\n      throw new Error('Insufficient inventory');\n    }\n\n    const query = 'UPDATE products SET quantity = $1 WHERE id = $2 RETURNING *';\n    const { rows } = await db.query(query, [newQuantity, this.id]);\n    Object.assign(this, new Product(rows[0]));\n    return this;\n  }\n\n  static async getCategories() {\n    const query = `\n      SELECT DISTINCT category, COUNT(*) as count \n      FROM products \n      WHERE status = 'active' \n      GROUP BY category \n      ORDER BY category\n    `;\n    const { rows } = await db.query(query);\n    return rows;\n  }\n\n  static async getTags() {\n    const query = `\n      SELECT DISTINCT unnest(tags) as tag, COUNT(*) as count\n      FROM products\n      WHERE status = 'active'\n      GROUP BY tag\n      ORDER BY count DESC, tag\n      LIMIT 50\n    `;\n    const { rows } = await db.query(query);\n    return rows;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      vendorId: this.vendorId,\n      title: this.title,\n      description: this.description,\n      price: this.price,\n      compareAtPrice: this.compareAtPrice,\n      currency: this.currency,\n      category: this.category,\n      subcategory: this.subcategory,\n      tags: this.tags,\n      images: this.images,\n      inventory: {\n        quantity: this.quantity,\n        trackInventory: this.trackInventory,\n        allowBackorder: this.allowBackorder\n      },\n      shipping: {\n        weight: this.weight,\n        dimensions: this.dimensions,\n        freeShipping: this.freeShipping,\n        shippingPrice: this.shippingPrice\n      },\n      status: this.status,\n      metadata: this.metadata,\n      slug: this.slug,\n      seo: {\n        metaTitle: this.metaTitle,\n        metaDescription: this.metaDescription\n      },\n      createdAt: this.createdAt,\n      updatedAt: this.updatedAt,\n      publishedAt: this.publishedAt\n    };\n  }\n}\n\nmodule.exports = Product;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\models\\user.model.js","messages":[{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":135,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":135,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":241,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":241,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":254,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":254,"endColumn":17},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":258,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":258,"endColumn":17},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":274,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":274,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":281,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":281,"endColumn":17},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":285,"column":5,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":285,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const bcrypt = require('bcrypt');\nconst db = require('../config/database.config');\n\nclass User {\n  constructor(data) {\n    this.id = data.id;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.password = data.password;\n    this.role = data.role;\n    this.firstName = data.first_name;\n    this.lastName = data.last_name;\n    this.businessName = data.business_name;\n    this.nationalId = data.national_id;\n    this.address = {\n      street: data.address_street,\n      city: data.address_city,\n      region: data.address_region,\n      coordinates: {\n        lat: data.address_lat,\n        lng: data.address_lng\n      }\n    };\n    this.verification = {\n      email: data.email_verified,\n      phone: data.phone_verified,\n      identity: data.identity_verified,\n      businessLicense: data.business_license_verified\n    };\n    this.status = data.status;\n    this.createdAt = data.created_at;\n    this.updatedAt = data.updated_at;\n    this.lastLoginAt = data.last_login_at;\n  }\n\n  static async create(userData) {\n    const {\n      email,\n      phone,\n      password,\n      role,\n      firstName,\n      lastName,\n      businessName,\n      nationalId\n    } = userData;\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const query = `\n      INSERT INTO users (\n        email, phone, password, role, \n        first_name, last_name, business_name, national_id\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING *\n    `;\n\n    const values = [\n      email.toLowerCase(),\n      phone,\n      hashedPassword,\n      role,\n      firstName,\n      lastName,\n      businessName,\n      nationalId\n    ];\n\n    try {\n      const { rows } = await db.query(query, values);\n      return new User(rows[0]);\n    } catch (error) {\n      if (error.code === '23505') { // Unique violation\n        if (error.constraint === 'users_email_key') {\n          throw new Error('Email already exists');\n        }\n        if (error.constraint === 'users_phone_key') {\n          throw new Error('Phone number already exists');\n        }\n      }\n      throw error;\n    }\n  }\n\n  static async findById(id) {\n    const query = 'SELECT * FROM users WHERE id = $1';\n    const { rows } = await db.query(query, [id]);\n    return rows.length ? new User(rows[0]) : null;\n  }\n\n  static async findByEmail(email) {\n    const query = 'SELECT * FROM users WHERE email = $1';\n    const { rows } = await db.query(query, [email.toLowerCase()]);\n    return rows.length ? new User(rows[0]) : null;\n  }\n\n  static async findByPhone(phone) {\n    const query = 'SELECT * FROM users WHERE phone = $1';\n    const { rows } = await db.query(query, [phone]);\n    return rows.length ? new User(rows[0]) : null;\n  }\n\n  async validatePassword(password) {\n    return bcrypt.compare(password, this.password);\n  }\n\n  async updateLastLogin() {\n    const query = 'UPDATE users SET last_login_at = CURRENT_TIMESTAMP WHERE id = $1';\n    await db.query(query, [this.id]);\n    this.lastLoginAt = new Date();\n  }\n\n  async updateStatus(status) {\n    const query = 'UPDATE users SET status = $1 WHERE id = $2 RETURNING *';\n    const { rows } = await db.query(query, [status, this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  async update(updates) {\n    const allowedUpdates = [\n      'first_name', 'last_name', 'business_name',\n      'address_street', 'address_city', 'address_region',\n      'address_lat', 'address_lng'\n    ];\n\n    const updateFields = [];\n    const values = [];\n    let paramCount = 1;\n\n    Object.keys(updates).forEach((key) => {\n      if (allowedUpdates.includes(key)) {\n        updateFields.push(`${key} = $${paramCount}`);\n        values.push(updates[key]);\n        paramCount++;\n      }\n    });\n\n    if (updateFields.length === 0) {\n      return this;\n    }\n\n    values.push(this.id);\n    const query = `\n      UPDATE users \n      SET ${updateFields.join(', ')}\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, values);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  async verifyEmail() {\n    const query = 'UPDATE users SET email_verified = TRUE WHERE id = $1 RETURNING *';\n    const { rows } = await db.query(query, [this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  async verifyPhone() {\n    const query = 'UPDATE users SET phone_verified = TRUE WHERE id = $1 RETURNING *';\n    const { rows } = await db.query(query, [this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  async verifyIdentity() {\n    const query = 'UPDATE users SET identity_verified = TRUE WHERE id = $1 RETURNING *';\n    const { rows } = await db.query(query, [this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  async verifyBusinessLicense() {\n    if (this.role !== 'vendor') {\n      throw new Error('Only vendors can have business license verified');\n    }\n    const query = 'UPDATE users SET business_license_verified = TRUE WHERE id = $1 RETURNING *';\n    const { rows } = await db.query(query, [this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  isVendor() {\n    return this.role === 'vendor';\n  }\n\n  isVerifiedVendor() {\n    return this.role === 'vendor'\n           && this.status === 'active'\n           && this.verification.identity\n           && this.verification.businessLicense;\n  }\n\n  canManageProducts() {\n    return this.isVendor() && this.status === 'active';\n  }\n\n  async applyAsVendor(vendorData) {\n    if (this.role !== 'buyer') {\n      throw new Error('Only buyers can apply to become vendors');\n    }\n\n    const { businessName, nationalId } = vendorData;\n\n    if (!businessName || !nationalId) {\n      throw new Error('Business name and national ID are required');\n    }\n\n    const query = `\n      UPDATE users \n      SET role = 'vendor', \n          business_name = $1, \n          national_id = $2,\n          status = 'pending'\n      WHERE id = $3\n      RETURNING *\n    `;\n\n    const { rows } = await db.query(query, [businessName, nationalId, this.id]);\n    Object.assign(this, new User(rows[0]));\n    return this;\n  }\n\n  static async getVendors(options = {}) {\n    const {\n      status = 'active',\n      verified = null,\n      limit = 50,\n      offset = 0\n    } = options;\n\n    let query = \"SELECT * FROM users WHERE role = 'vendor'\";\n    const values = [];\n    let paramCount = 0;\n\n    if (status) {\n      paramCount++;\n      query += ` AND status = $${paramCount}`;\n      values.push(status);\n    }\n\n    if (verified === true) {\n      query += ' AND identity_verified = TRUE AND business_license_verified = TRUE';\n    } else if (verified === false) {\n      query += ' AND (identity_verified = FALSE OR business_license_verified = FALSE)';\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    paramCount++;\n    query += ` LIMIT $${paramCount}`;\n    values.push(limit);\n\n    paramCount++;\n    query += ` OFFSET $${paramCount}`;\n    values.push(offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new User(row));\n  }\n\n  static async getByRole(role, options = {}) {\n    const { status = null, limit = 50, offset = 0 } = options;\n\n    let query = 'SELECT * FROM users WHERE role = $1';\n    const values = [role];\n    let paramCount = 1;\n\n    if (status) {\n      paramCount++;\n      query += ` AND status = $${paramCount}`;\n      values.push(status);\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    paramCount++;\n    query += ` LIMIT $${paramCount}`;\n    values.push(limit);\n\n    paramCount++;\n    query += ` OFFSET $${paramCount}`;\n    values.push(offset);\n\n    const { rows } = await db.query(query, values);\n    return rows.map((row) => new User(row));\n  }\n\n  toJSON() {\n    // eslint-disable-next-line no-unused-vars\n    const { password, ...userWithoutPassword } = this;\n    return userWithoutPassword;\n  }\n}\n\nmodule.exports = User;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\analytics.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\auth.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\cart.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\delivery.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\job-queue.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\order.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\payment.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\product.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\routes\\vendor.routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\analytics.service.js","messages":[{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getAnalyticsSummary'.","line":53,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":53,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2404,2453],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getDailyOverview'.","line":89,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":89,"endColumn":25},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":103,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":103,"endColumn":50,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2981,2981],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":105,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":105,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3091,3091],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3254,3300],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getProductAnalytics'.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":117,"endColumn":28},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":155,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":155,"endColumn":45,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4722,4722],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":156,"column":23,"nodeType":"CallExpression","messageId":"missingRadix","endLine":156,"endColumn":51,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4774,4774],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":157,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":157,"endColumn":62,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4837,4837],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":158,"column":21,"nodeType":"CallExpression","messageId":"missingRadix","endLine":158,"endColumn":47,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[4885,4885],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5157,5206],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getVendorAnalytics'.","line":173,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":173,"endColumn":27},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":215,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":215,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6915,6915],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":216,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":216,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6976,6976],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":217,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":217,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7037,7037],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":221,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":221,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7272,7272],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":222,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":222,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7333,7333],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7642,7690],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getPaymentAnalytics'.","line":238,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":238,"endColumn":28},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":267,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":267,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8830,8830],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":268,"column":33,"nodeType":"CallExpression","messageId":"missingRadix","endLine":268,"endColumn":66,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8897,8897],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":269,"column":29,"nodeType":"CallExpression","messageId":"missingRadix","endLine":269,"endColumn":58,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8956,8956],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":270,"column":32,"nodeType":"CallExpression","messageId":"missingRadix","endLine":270,"endColumn":64,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9021,9021],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":275,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":275,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[9309,9309],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9404,9453],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getUserBehaviorAnalytics'.","line":287,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":287,"endColumn":33},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":331,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":331,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11218,11218],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":332,"column":29,"nodeType":"CallExpression","messageId":"missingRadix","endLine":332,"endColumn":59,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11278,11278],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":333,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":333,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11335,11335],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":334,"column":34,"nodeType":"CallExpression","messageId":"missingRadix","endLine":334,"endColumn":69,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11405,11405],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":335,"column":33,"nodeType":"CallExpression","messageId":"missingRadix","endLine":335,"endColumn":67,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11473,11473],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":336,"column":32,"nodeType":"CallExpression","messageId":"missingRadix","endLine":336,"endColumn":65,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11539,11539],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":337,"column":29,"nodeType":"CallExpression","messageId":"missingRadix","endLine":337,"endColumn":59,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[11599,11599],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12005,12060],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getRealTimeDashboard'.","line":355,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":355,"endColumn":29},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":415,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":415,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14012,14012],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":420,"column":23,"nodeType":"CallExpression","messageId":"missingRadix","endLine":420,"endColumn":45,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14231,14231],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":421,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":421,"endColumn":49,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14281,14281],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":424,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":424,"endColumn":73,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14469,14469],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":425,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":425,"endColumn":81,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14551,14551],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":428,"column":21,"nodeType":"CallExpression","messageId":"missingRadix","endLine":428,"endColumn":41,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[14683,14683],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":434,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":434,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14792,14843],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":489,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":489,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16533,16589],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":502,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":502,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16919,16978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17054,17116],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":561,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":561,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18755,18803],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'convertToCSV'.","line":567,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":567,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\nconst EventLogger = require('./event-logger.service');\n\nclass AnalyticsService {\n  constructor() {\n    this.eventLogger = new EventLogger();\n  }\n\n  // Calculate and store daily statistics\n  async calculateDailyStats(targetDate = null) {\n    const startTime = Date.now();\n    const date = targetDate || new Date().toISOString().split('T')[0];\n\n    try {\n      // Use the database function to calculate stats\n      const result = await db.query('SELECT calculate_daily_stats($1)', [date]);\n      const statsCalculated = result.rows[0].calculate_daily_stats;\n\n      await this.eventLogger.log({\n        eventType: 'analytics_calculation',\n        eventCategory: 'system',\n        actorType: 'system',\n        eventData: {\n          date,\n          stats_calculated: statsCalculated,\n          duration_ms: Date.now() - startTime\n        },\n        success: true\n      });\n\n      return {\n        success: true,\n        date,\n        statsCalculated,\n        duration: Date.now() - startTime\n      };\n    } catch (error) {\n      await this.eventLogger.log({\n        eventType: 'analytics_calculation_failed',\n        eventCategory: 'system',\n        actorType: 'system',\n        eventData: { date, error: error.message },\n        severity: 'error',\n        success: false,\n        errorMessage: error.message\n      });\n\n      throw error;\n    }\n  }\n\n  // Get analytics summary with trends\n  async getAnalyticsSummary(startDate = null, endDate = null) {\n    try {\n      const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const end = endDate || new Date().toISOString().split('T')[0];\n\n      const result = await db.query(\n        'SELECT * FROM get_analytics_summary($1, $2)',\n        [start, end]\n      );\n\n      const summary = result.rows.reduce((acc, row) => {\n        if (!acc[row.metric_type]) {\n          acc[row.metric_type] = {};\n        }\n        acc[row.metric_type][row.metric_name] = {\n          current: parseFloat(row.current_value),\n          previous: parseFloat(row.previous_value),\n          changePercent: parseFloat(row.change_percent),\n          trend: row.trend\n        };\n        return acc;\n      }, {});\n\n      return {\n        success: true,\n        period: { start, end },\n        summary,\n        generatedAt: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Analytics summary error:', error);\n      throw new Error('Failed to generate analytics summary');\n    }\n  }\n\n  // Get daily overview for dashboard\n  async getDailyOverview(days = 30) {\n    try {\n      const query = `\n        SELECT * FROM daily_overview \n        WHERE stat_date >= CURRENT_DATE - INTERVAL '${days} days'\n        ORDER BY stat_date DESC\n      `;\n\n      const { rows } = await db.query(query);\n\n      return {\n        success: true,\n        data: rows.map((row) => ({\n          date: row.stat_date,\n          totalOrders: parseInt(row.total_orders),\n          totalRevenue: parseFloat(row.total_revenue),\n          activeVendors: parseInt(row.active_vendors),\n          avgPaymentSuccessRate: parseFloat(row.avg_payment_success_rate) || 0\n        })),\n        period: `${days} days`\n      };\n    } catch (error) {\n      console.error('Daily overview error:', error);\n      throw new Error('Failed to get daily overview');\n    }\n  }\n\n  // Get product performance analytics\n  async getProductAnalytics(productId = null, days = 30) {\n    try {\n      let query = `\n        SELECT \n          p.id,\n          p.title,\n          p.price,\n          p.category,\n          COALESCE(SUM(pa.views), 0) as total_views,\n          COALESCE(SUM(pa.searches), 0) as total_searches,\n          COALESCE(SUM(pa.cart_additions), 0) as total_cart_additions,\n          COALESCE(SUM(pa.orders), 0) as total_orders,\n          COALESCE(SUM(pa.revenue), 0) as total_revenue,\n          COALESCE(AVG(pa.conversion_rate), 0) as avg_conversion_rate,\n          COALESCE(AVG(pa.avg_order_value), 0) as avg_order_value\n        FROM products p\n        LEFT JOIN product_analytics pa ON p.id = pa.product_id \n          AND pa.date >= CURRENT_DATE - INTERVAL '${days} days'\n      `;\n\n      const values = [];\n      if (productId) {\n        query += ' WHERE p.id = $1';\n        values.push(productId);\n      }\n\n      query += ' GROUP BY p.id, p.title, p.price, p.category ORDER BY total_revenue DESC';\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        data: rows.map((row) => ({\n          productId: row.id,\n          title: row.title,\n          price: parseFloat(row.price),\n          category: row.category,\n          metrics: {\n            views: parseInt(row.total_views),\n            searches: parseInt(row.total_searches),\n            cartAdditions: parseInt(row.total_cart_additions),\n            orders: parseInt(row.total_orders),\n            revenue: parseFloat(row.total_revenue),\n            conversionRate: parseFloat(row.avg_conversion_rate),\n            avgOrderValue: parseFloat(row.avg_order_value)\n          }\n        })),\n        period: `${days} days`\n      };\n    } catch (error) {\n      console.error('Product analytics error:', error);\n      throw new Error('Failed to get product analytics');\n    }\n  }\n\n  // Get vendor performance analytics\n  async getVendorAnalytics(vendorId = null, days = 30) {\n    try {\n      let query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.business_name,\n          u.email,\n          COALESCE(SUM(va.total_orders), 0) as total_orders,\n          COALESCE(SUM(va.fulfilled_orders), 0) as fulfilled_orders,\n          COALESCE(SUM(va.cancelled_orders), 0) as cancelled_orders,\n          COALESCE(SUM(va.total_revenue), 0) as total_revenue,\n          COALESCE(AVG(va.avg_fulfillment_time_hours), 0) as avg_fulfillment_time,\n          COALESCE(AVG(va.customer_rating), 0) as avg_rating,\n          COALESCE(SUM(va.products_added), 0) as products_added,\n          COALESCE(SUM(va.products_updated), 0) as products_updated,\n          COALESCE(AVG(va.inventory_value), 0) as avg_inventory_value\n        FROM users u\n        LEFT JOIN vendor_analytics va ON u.id = va.vendor_id \n          AND va.date >= CURRENT_DATE - INTERVAL '${days} days'\n        WHERE u.role = 'vendor'\n      `;\n\n      const values = [];\n      if (vendorId) {\n        query += ' AND u.id = $1';\n        values.push(vendorId);\n      }\n\n      query += ' GROUP BY u.id, u.first_name, u.last_name, u.business_name, u.email ORDER BY total_revenue DESC';\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        data: rows.map((row) => ({\n          vendorId: row.id,\n          name: `${row.first_name} ${row.last_name}`,\n          businessName: row.business_name,\n          email: row.email,\n          metrics: {\n            totalOrders: parseInt(row.total_orders),\n            fulfilledOrders: parseInt(row.fulfilled_orders),\n            cancelledOrders: parseInt(row.cancelled_orders),\n            totalRevenue: parseFloat(row.total_revenue),\n            avgFulfillmentTime: parseFloat(row.avg_fulfillment_time),\n            avgRating: parseFloat(row.avg_rating),\n            productsAdded: parseInt(row.products_added),\n            productsUpdated: parseInt(row.products_updated),\n            avgInventoryValue: parseFloat(row.avg_inventory_value),\n            fulfillmentRate: row.total_orders > 0\n              ? ((row.fulfilled_orders / row.total_orders) * 100).toFixed(2)\n              : 0\n          }\n        })),\n        period: `${days} days`\n      };\n    } catch (error) {\n      console.error('Vendor analytics error:', error);\n      throw new Error('Failed to get vendor analytics');\n    }\n  }\n\n  // Get payment analytics\n  async getPaymentAnalytics(days = 30) {\n    try {\n      const query = `\n        SELECT \n          payment_method,\n          region,\n          SUM(total_attempts) as total_attempts,\n          SUM(successful_payments) as successful_payments,\n          SUM(failed_payments) as failed_payments,\n          SUM(cancelled_payments) as cancelled_payments,\n          SUM(total_amount) as total_amount,\n          AVG(avg_amount) as avg_amount,\n          AVG(success_rate) as avg_success_rate,\n          AVG(avg_processing_time_seconds) as avg_processing_time,\n          SUM(fraud_flagged) as fraud_flagged\n        FROM payment_analytics\n        WHERE date >= CURRENT_DATE - INTERVAL '${days} days'\n        GROUP BY payment_method, region\n        ORDER BY total_amount DESC\n      `;\n\n      const { rows } = await db.query(query);\n\n      return {\n        success: true,\n        data: rows.map((row) => ({\n          paymentMethod: row.payment_method,\n          region: row.region,\n          metrics: {\n            totalAttempts: parseInt(row.total_attempts),\n            successfulPayments: parseInt(row.successful_payments),\n            failedPayments: parseInt(row.failed_payments),\n            cancelledPayments: parseInt(row.cancelled_payments),\n            totalAmount: parseFloat(row.total_amount),\n            avgAmount: parseFloat(row.avg_amount),\n            successRate: parseFloat(row.avg_success_rate),\n            avgProcessingTime: parseFloat(row.avg_processing_time),\n            fraudFlagged: parseInt(row.fraud_flagged)\n          }\n        })),\n        period: `${days} days`\n      };\n    } catch (error) {\n      console.error('Payment analytics error:', error);\n      throw new Error('Failed to get payment analytics');\n    }\n  }\n\n  // Get user behavior analytics\n  async getUserBehaviorAnalytics(userId = null, days = 30) {\n    try {\n      let query = `\n        SELECT \n          u.id,\n          u.first_name,\n          u.last_name,\n          u.email,\n          u.role,\n          u.created_at as registration_date,\n          COALESCE(SUM(uba.session_count), 0) as total_sessions,\n          COALESCE(SUM(uba.page_views), 0) as total_page_views,\n          COALESCE(SUM(uba.search_queries), 0) as total_searches,\n          COALESCE(SUM(uba.products_viewed), 0) as total_products_viewed,\n          COALESCE(SUM(uba.cart_additions), 0) as total_cart_additions,\n          COALESCE(SUM(uba.orders_placed), 0) as total_orders_placed,\n          COALESCE(SUM(uba.time_spent_minutes), 0) as total_time_spent,\n          COALESCE(MAX(uba.last_activity_at), u.created_at) as last_activity\n        FROM users u\n        LEFT JOIN user_behavior_analytics uba ON u.id = uba.user_id \n          AND uba.date >= CURRENT_DATE - INTERVAL '${days} days'\n      `;\n\n      const values = [];\n      if (userId) {\n        query += ' WHERE u.id = $1';\n        values.push(userId);\n      }\n\n      query += ` GROUP BY u.id, u.first_name, u.last_name, u.email, u.role, u.created_at\n        ORDER BY total_orders_placed DESC`;\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        data: rows.map((row) => ({\n          userId: row.id,\n          name: `${row.first_name} ${row.last_name}`,\n          email: row.email,\n          role: row.role,\n          registrationDate: row.registration_date,\n          lastActivity: row.last_activity,\n          metrics: {\n            totalSessions: parseInt(row.total_sessions),\n            totalPageViews: parseInt(row.total_page_views),\n            totalSearches: parseInt(row.total_searches),\n            totalProductsViewed: parseInt(row.total_products_viewed),\n            totalCartAdditions: parseInt(row.total_cart_additions),\n            totalOrdersPlaced: parseInt(row.total_orders_placed),\n            totalTimeSpent: parseInt(row.total_time_spent),\n            avgSessionDuration: row.total_sessions > 0\n              ? (row.total_time_spent / row.total_sessions).toFixed(2)\n              : 0,\n            conversionRate: row.total_products_viewed > 0\n              ? ((row.total_orders_placed / row.total_products_viewed) * 100).toFixed(2)\n              : 0\n          }\n        })),\n        period: `${days} days`\n      };\n    } catch (error) {\n      console.error('User behavior analytics error:', error);\n      throw new Error('Failed to get user behavior analytics');\n    }\n  }\n\n  // Get real-time dashboard metrics\n  async getRealTimeDashboard() {\n    try {\n      const queries = await Promise.all([\n        // Today's orders\n        db.query(`\n          SELECT COUNT(*) as count, COALESCE(SUM(total_amount), 0) as revenue\n          FROM orders \n          WHERE DATE(created_at) = CURRENT_DATE\n        `),\n\n        // Today's payments\n        db.query(`\n          SELECT \n            payment_method,\n            COUNT(*) as attempts,\n            COUNT(*) FILTER (WHERE status = 'completed') as successful\n          FROM payments \n          WHERE DATE(created_at) = CURRENT_DATE\n          GROUP BY payment_method\n        `),\n\n        // Active users (last 24 hours)\n        db.query(`\n          SELECT COUNT(DISTINCT actor_id) as active_users\n          FROM event_logs \n          WHERE created_at >= NOW() - INTERVAL '24 hours'\n            AND actor_type = 'user'\n            AND actor_id IS NOT NULL\n        `),\n\n        // Pending deliveries\n        db.query(`\n          SELECT COUNT(*) as pending_deliveries\n          FROM deliveries \n          WHERE status IN ('pending', 'assigned', 'picked_up', 'in_transit')\n        `),\n\n        // Top products today\n        db.query(`\n          SELECT \n            p.title,\n            COUNT(oi.id) as orders,\n            SUM(oi.total_price) as revenue\n          FROM order_items oi\n          JOIN products p ON oi.product_id = p.id\n          JOIN orders o ON oi.order_id = o.id\n          WHERE DATE(o.created_at) = CURRENT_DATE\n          GROUP BY p.id, p.title\n          ORDER BY orders DESC\n          LIMIT 5\n        `)\n      ]);\n\n      const [ordersData, paymentsData, activeUsersData, deliveriesData, topProductsData] = queries;\n\n      return {\n        success: true,\n        timestamp: new Date().toISOString(),\n        metrics: {\n          todayOrders: {\n            count: parseInt(ordersData.rows[0].count),\n            revenue: parseFloat(ordersData.rows[0].revenue)\n          },\n          paymentMethods: paymentsData.rows.map((row) => ({\n            method: row.payment_method,\n            attempts: parseInt(row.attempts),\n            successful: parseInt(row.successful),\n            successRate: row.attempts > 0 ? ((row.successful / row.attempts) * 100).toFixed(2) : 0\n          })),\n          activeUsers24h: parseInt(activeUsersData.rows[0].active_users),\n          pendingDeliveries: parseInt(deliveriesData.rows[0].pending_deliveries),\n          topProducts: topProductsData.rows.map((row) => ({\n            title: row.title,\n            orders: parseInt(row.orders),\n            revenue: parseFloat(row.revenue)\n          }))\n        }\n      };\n    } catch (error) {\n      console.error('Real-time dashboard error:', error);\n      throw new Error('Failed to get real-time dashboard data');\n    }\n  }\n\n  // Update product analytics (called when product events occur)\n  async updateProductAnalytics(productId, eventType, metadata = {}) {\n    try {\n      const date = new Date().toISOString().split('T')[0];\n\n      let updateField = '';\n      switch (eventType) {\n        case 'view':\n          updateField = 'views = views + 1';\n          break;\n        case 'search':\n          updateField = 'searches = searches + 1';\n          break;\n        case 'cart_add':\n          updateField = 'cart_additions = cart_additions + 1';\n          break;\n        case 'order':\n          updateField = `orders = orders + 1, revenue = revenue + ${metadata.amount || 0}`;\n          break;\n        default:\n          return;\n      }\n\n      const query = `\n        INSERT INTO product_analytics (\n          product_id, date, \n          ${eventType === 'order' ? 'orders, revenue' : eventType.replace('_add', '_additions')}\n        )\n        VALUES ($1, $2, ${eventType === 'order' ? '1, $3' : '1'})\n        ON CONFLICT (product_id, date)\n        DO UPDATE SET ${updateField}, updated_at = CURRENT_TIMESTAMP\n      `;\n\n      const values = [productId, date];\n      if (eventType === 'order' && metadata.amount) {\n        values.push(metadata.amount);\n      }\n\n      await db.query(query, values);\n\n      // Log the analytics update\n      await this.eventLogger.log({\n        eventType: 'analytics_updated',\n        eventCategory: 'system',\n        actorType: 'system',\n        targetId: productId,\n        targetType: 'product',\n        eventData: { analyticsType: 'product', eventType, metadata }\n      });\n    } catch (error) {\n      console.error('Product analytics update error:', error);\n    }\n  }\n\n  // Schedule daily analytics calculation (to be called by cron job)\n  async scheduleDailyCalculation() {\n    try {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const dateStr = yesterday.toISOString().split('T')[0];\n\n      await this.calculateDailyStats(dateStr);\n\n      console.log(`✅ Daily analytics calculated for ${dateStr}`);\n      return { success: true, date: dateStr };\n    } catch (error) {\n      console.error('❌ Daily analytics calculation failed:', error);\n      throw error;\n    }\n  }\n\n  // Get analytics export data (for admin downloads)\n  async getAnalyticsExport(type = 'overview', startDate = null, endDate = null, format = 'json') {\n    try {\n      const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const end = endDate || new Date().toISOString().split('T')[0];\n\n      let data;\n      switch (type) {\n        case 'overview':\n          data = await this.getDailyOverview(30);\n          break;\n        case 'products':\n          data = await this.getProductAnalytics();\n          break;\n        case 'vendors':\n          data = await this.getVendorAnalytics();\n          break;\n        case 'payments':\n          data = await this.getPaymentAnalytics();\n          break;\n        case 'users':\n          data = await this.getUserBehaviorAnalytics();\n          break;\n        default:\n          throw new Error('Invalid export type');\n      }\n\n      if (format === 'csv') {\n        // Convert to CSV format (simplified implementation)\n        const csvData = this.convertToCSV(data.data);\n        return {\n          success: true,\n          format: 'csv',\n          filename: `${type}_analytics_${start}_to_${end}.csv`,\n          data: csvData\n        };\n      }\n\n      return {\n        success: true,\n        format: 'json',\n        filename: `${type}_analytics_${start}_to_${end}.json`,\n        data: data.data,\n        metadata: {\n          exportType: type,\n          period: { start, end },\n          generatedAt: new Date().toISOString(),\n          recordCount: data.data.length\n        }\n      };\n    } catch (error) {\n      console.error('Analytics export error:', error);\n      throw new Error('Failed to generate analytics export');\n    }\n  }\n\n  // Helper method to convert data to CSV\n  convertToCSV(data) {\n    if (!data || data.length === 0) return '';\n\n    const headers = Object.keys(data[0]);\n    const csvRows = [headers.join(',')];\n\n    data.forEach((row) => {\n      const values = headers.map((header) => {\n        const value = row[header];\n        return typeof value === 'string' ? `\"${value}\"` : value;\n      });\n      csvRows.push(values.join(','));\n    });\n\n    return csvRows.join('\\n');\n  }\n}\n\nmodule.exports = new AnalyticsService();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\auth.service.js","messages":[{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":174,"column":20,"nodeType":"CallExpression","messageId":"unexpected","endLine":174,"endColumn":37},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":177,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":177,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const User = require('../models/user.model');\nconst { generateAccessToken, generateRefreshToken, verifyToken } = require('../utils/jwt');\n\nclass AuthService {\n  static async register(userData) {\n    const { email, phone, password, role = 'buyer', ...profile } = userData;\n\n    // Validate role\n    const allowedRoles = ['buyer', 'vendor', 'driver', 'admin'];\n    if (!allowedRoles.includes(role)) {\n      throw new Error('Invalid role');\n    }\n\n    // Create user\n    const user = await User.create({\n      email,\n      phone,\n      password,\n      role,\n      ...profile\n    });\n\n    // Generate tokens\n    const payload = {\n      userId: user.id,\n      email: user.email,\n      role: user.role\n    };\n\n    const accessToken = generateAccessToken(payload);\n    const refreshToken = generateRefreshToken(payload);\n\n    return {\n      user: user.toJSON(),\n      tokens: {\n        accessToken,\n        refreshToken\n      }\n    };\n  }\n\n  static async login(credentials) {\n    const { email, phone, password } = credentials;\n\n    // Find user by email or phone\n    let user;\n    if (email) {\n      user = await User.findByEmail(email);\n    } else if (phone) {\n      user = await User.findByPhone(phone);\n    } else {\n      throw new Error('Email or phone number required');\n    }\n\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Check password\n    const isValidPassword = await user.validatePassword(password);\n    if (!isValidPassword) {\n      throw new Error('Invalid credentials');\n    }\n\n    // Check if account is active\n    if (user.status !== 'active' && user.status !== 'pending') {\n      throw new Error('Account is suspended');\n    }\n\n    // Update last login\n    await user.updateLastLogin();\n\n    // Generate tokens\n    const payload = {\n      userId: user.id,\n      email: user.email,\n      role: user.role\n    };\n\n    const accessToken = generateAccessToken(payload);\n    const refreshToken = generateRefreshToken(payload);\n\n    return {\n      user: user.toJSON(),\n      tokens: {\n        accessToken,\n        refreshToken\n      }\n    };\n  }\n\n  static async refreshTokens(refreshToken) {\n    try {\n      // Verify refresh token\n      const decoded = verifyToken(refreshToken, true);\n\n      // Get user\n      const user = await User.findById(decoded.userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      if (user.status !== 'active' && user.status !== 'pending') {\n        throw new Error('Account is suspended');\n      }\n\n      // Generate new tokens\n      const payload = {\n        userId: user.id,\n        email: user.email,\n        role: user.role\n      };\n\n      const newAccessToken = generateAccessToken(payload);\n      const newRefreshToken = generateRefreshToken(payload);\n\n      return {\n        user: user.toJSON(),\n        tokens: {\n          accessToken: newAccessToken,\n          refreshToken: newRefreshToken\n        }\n      };\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new Error('Refresh token expired');\n      }\n      if (error.name === 'JsonWebTokenError') {\n        throw new Error('Invalid refresh token');\n      }\n      throw error;\n    }\n  }\n\n  static async validateToken(token) {\n    try {\n      const decoded = verifyToken(token);\n      const user = await User.findById(decoded.userId);\n\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      if (user.status !== 'active' && user.status !== 'pending') {\n        throw new Error('Account is suspended');\n      }\n\n      return {\n        valid: true,\n        user: user.toJSON(),\n        decoded\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n\n  static async changePassword(userId, currentPassword, newPassword) {\n    const user = await User.findById(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Validate current password\n    const isValidPassword = await user.validatePassword(currentPassword);\n    if (!isValidPassword) {\n      throw new Error('Invalid current password');\n    }\n\n    // Update password\n    const bcrypt = require('bcrypt');\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n    const db = require('../config/database.config');\n    await db.query(\n      'UPDATE users SET password = $1 WHERE id = $2',\n      [hashedPassword, userId]\n    );\n\n    return { message: 'Password updated successfully' };\n  }\n}\n\nmodule.exports = AuthService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\delivery.service.js","messages":[{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":24,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":24,"endColumn":52},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":43,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":43,"endColumn":39,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1238,1244],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":53,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":53,"endColumn":64,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1576,1582],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":62,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":62,"endColumn":51,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1831,1837],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":67,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":67,"endColumn":70,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2010,2016],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":81,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":81,"endColumn":62,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2460,2466],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":91,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":91,"endColumn":58,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2764,2770],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":101,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":101,"endColumn":59,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3063,3069],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":157,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":157,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5955,6029],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":229,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":229,"endColumn":52},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":233,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":233,"endColumn":58,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7811,7811],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":234,"column":28,"nodeType":"CallExpression","messageId":"missingRadix","endLine":234,"endColumn":66,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7878,7878],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":235,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":235,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[7939,7939],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":236,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":236,"endColumn":62,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8002,8002],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":241,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":241,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8331,8331],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 106. Maximum allowed is 100.","line":242,"column":1,"nodeType":"Program","messageId":"max","endLine":242,"endColumn":107},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":242,"column":13,"nodeType":"CallExpression","messageId":"missingRadix","endLine":242,"endColumn":51,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8386,8386],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":242,"column":54,"nodeType":"CallExpression","messageId":"missingRadix","endLine":242,"endColumn":88,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[8423,8423],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":254,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":254,"endColumn":47,"suggestions":[{"messageId":"removeAwait","fix":{"range":[8688,8694],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":270,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":270,"endColumn":50,"suggestions":[{"messageId":"removeAwait","fix":{"range":[9192,9198],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":305,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":305,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":311,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":311,"endColumn":19},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":319,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":319,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const Delivery = require('../models/delivery.model');\nconst User = require('../models/user.model');\nconst Order = require('../models/order.model');\n\nclass DeliveryService {\n  static async applyAsDriver(userId, applicationData) {\n    // Verify user exists and can become a driver\n    const user = await User.findById(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    if (user.role !== 'buyer') {\n      throw new Error('Only buyers can apply to become drivers');\n    }\n\n    const { nationalId, vehicleType, licenseNumber } = applicationData;\n\n    if (!nationalId || !vehicleType || !licenseNumber) {\n      throw new Error('National ID, vehicle type, and license number are required');\n    }\n\n    // Update user role to driver (pending approval)\n    const db = require('../config/database.config');\n    await db.query(\n      `UPDATE users \n       SET role = 'driver', \n           national_id = $1, \n           status = 'pending',\n           metadata = COALESCE(metadata, '{}') || $2\n       WHERE id = $3`,\n      [\n        nationalId,\n        JSON.stringify({\n          vehicleType,\n          licenseNumber,\n          applicationDate: new Date().toISOString()\n        }),\n        userId\n      ]\n    );\n\n    return await User.findById(userId);\n  }\n\n  static async getAvailableDeliveries(driverId, driverRegion = null) {\n    // Verify driver is active\n    const driver = await User.findById(driverId);\n    if (!driver || driver.role !== 'driver' || driver.status !== 'active') {\n      throw new Error('Driver not found or not active');\n    }\n\n    return await Delivery.findAvailableDeliveries(driverRegion);\n  }\n\n  static async assignDelivery(deliveryId, driverId) {\n    const delivery = await Delivery.findById(deliveryId);\n    if (!delivery) {\n      throw new Error('Delivery not found');\n    }\n\n    return await delivery.assignToDriver(driverId);\n  }\n\n  static async acceptDelivery(deliveryId, driverId) {\n    // This is the same as assigning, but from driver's perspective\n    return await DeliveryService.assignDelivery(deliveryId, driverId);\n  }\n\n  static async updateDeliveryStatus(deliveryId, newStatus, driverId, updateData = {}) {\n    const delivery = await Delivery.findById(deliveryId);\n    if (!delivery) {\n      throw new Error('Delivery not found');\n    }\n\n    // Verify driver owns this delivery\n    if (delivery.driverId !== driverId) {\n      throw new Error('You can only update your own deliveries');\n    }\n\n    return await delivery.updateStatus(newStatus, updateData);\n  }\n\n  static async getDriverDeliveries(driverId, options = {}) {\n    // Verify driver exists\n    const driver = await User.findById(driverId);\n    if (!driver || driver.role !== 'driver') {\n      throw new Error('Driver not found');\n    }\n\n    return await Delivery.findByDriver(driverId, options);\n  }\n\n  static async getDriverStats(driverId, period = 'month') {\n    // Verify driver exists\n    const driver = await User.findById(driverId);\n    if (!driver || driver.role !== 'driver') {\n      throw new Error('Driver not found');\n    }\n\n    return await Delivery.getDriverStats(driverId, period);\n  }\n\n  static async trackDelivery(deliveryId, userId, userRole) {\n    const delivery = await Delivery.findById(deliveryId);\n    if (!delivery) {\n      throw new Error('Delivery not found');\n    }\n\n    // Check authorization\n    if (userRole === 'buyer') {\n      // Verify buyer owns the order\n      const order = await Order.findById(delivery.orderId);\n      if (!order || order.buyerId !== userId) {\n        throw new Error('You can only track your own deliveries');\n      }\n    } else if (userRole === 'driver') {\n      // Verify driver owns the delivery\n      if (delivery.driverId !== userId) {\n        throw new Error('You can only track your own deliveries');\n      }\n    } else if (userRole === 'vendor') {\n      // Verify vendor has items in the order\n      const order = await Order.findById(delivery.orderId);\n      if (!order) {\n        throw new Error('Order not found');\n      }\n\n      const hasItems = order.items.some((item) => item.vendorId === userId);\n      if (!hasItems) {\n        throw new Error('You can only track deliveries for your products');\n      }\n    } else if (userRole !== 'admin') {\n      throw new Error('Unauthorized to track this delivery');\n    }\n\n    return delivery;\n  }\n\n  // Auto-matching system for deliveries\n  static async autoMatchDeliveries() {\n    // Get all pending deliveries\n    const pendingDeliveries = await Delivery.findAvailableDeliveries();\n\n    // Get all active drivers\n    const activeDrivers = await User.getByRole('driver', { status: 'active' });\n\n    const matches = [];\n\n    // Get busy drivers before the loop\n    const busyDriverQuery = `\n      SELECT DISTINCT driver_id \n      FROM deliveries \n      WHERE status IN ('assigned', 'picked_up', 'in_transit')\n    `;\n\n    const db = require('../config/database.config');\n    const { rows: busyDrivers } = await db.query(busyDriverQuery);\n    const busyDriverIds = busyDrivers.map((row) => row.driver_id);\n\n    const availableDrivers = activeDrivers.filter(\n      (driver) => !busyDriverIds.includes(driver.id)\n    );\n\n    // Process deliveries sequentially to avoid conflicts\n    let driverIndex = 0;\n    const assignmentPromises = pendingDeliveries.map(async (delivery) => {\n      // Simple matching algorithm - in production, this would be more sophisticated\n      // considering location, driver capacity, etc.\n\n      if (driverIndex < availableDrivers.length) {\n        // For now, assign to next available driver\n        // In production, you'd consider proximity, ratings, etc.\n        const selectedDriver = availableDrivers[driverIndex];\n        driverIndex += 1;\n\n        try {\n          await delivery.assignToDriver(selectedDriver.id);\n          return {\n            deliveryId: delivery.id,\n            driverId: selectedDriver.id,\n            orderId: delivery.orderId\n          };\n        } catch (error) {\n          console.error(`Failed to assign delivery ${delivery.id}:`, error.message);\n          return null;\n        }\n      }\n      return null;\n    });\n\n    const results = await Promise.all(assignmentPromises);\n    results.forEach((match) => {\n      if (match) matches.push(match);\n    });\n\n    return matches;\n  }\n\n  // Get delivery analytics for admin\n  static async getDeliveryAnalytics(period = 'month') {\n    let dateFilter = '';\n    const now = new Date();\n\n    if (period === 'week') {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND d.created_at >= '${weekAgo.toISOString()}'`;\n    } else if (period === 'month') {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND d.created_at >= '${monthAgo.toISOString()}'`;\n    }\n\n    const query = `\n      SELECT \n        COUNT(*) as total_deliveries,\n        COUNT(CASE WHEN d.status = 'delivered' THEN 1 END) as completed_deliveries,\n        COUNT(CASE WHEN d.status = 'failed' THEN 1 END) as failed_deliveries,\n        COUNT(CASE WHEN d.status = 'pending' THEN 1 END) as pending_deliveries,\n        COALESCE(AVG(CASE WHEN d.status = 'delivered' THEN d.delivery_fee END), 0) as avg_delivery_fee,\n        COALESCE(SUM(CASE WHEN d.status = 'delivered' THEN d.delivery_fee END), 0) as total_delivery_fees,\n        COALESCE(SUM(CASE WHEN d.status = 'delivered' THEN d.driver_earnings END), 0) as total_driver_earnings,\n        COALESCE(AVG(CASE WHEN d.status = 'delivered' THEN \n          EXTRACT(EPOCH FROM (d.delivery_time - d.pickup_time))/60 \n        END), 0) as avg_delivery_time_minutes\n      FROM deliveries d\n      WHERE 1=1 ${dateFilter}\n    `;\n\n    const db = require('../config/database.config');\n    const { rows } = await db.query(query);\n\n    return {\n      totalDeliveries: parseInt(rows[0].total_deliveries),\n      completedDeliveries: parseInt(rows[0].completed_deliveries),\n      failedDeliveries: parseInt(rows[0].failed_deliveries),\n      pendingDeliveries: parseInt(rows[0].pending_deliveries),\n      averageDeliveryFee: parseFloat(rows[0].avg_delivery_fee),\n      totalDeliveryFees: parseFloat(rows[0].total_delivery_fees),\n      totalDriverEarnings: parseFloat(rows[0].total_driver_earnings),\n      averageDeliveryTime: parseFloat(rows[0].avg_delivery_time_minutes),\n      successRate: parseInt(rows[0].total_deliveries) > 0\n        ? ((parseInt(rows[0].completed_deliveries) / parseInt(rows[0].total_deliveries)) * 100).toFixed(2)\n        : 0\n    };\n  }\n\n  // Admin functions\n  static async approveDriver(driverId) {\n    const driver = await User.findById(driverId);\n    if (!driver || driver.role !== 'driver') {\n      throw new Error('Driver not found');\n    }\n\n    return await driver.updateStatus('active');\n  }\n\n  static async suspendDriver(driverId) {\n    const driver = await User.findById(driverId);\n    if (!driver || driver.role !== 'driver') {\n      throw new Error('Driver not found');\n    }\n\n    // Cancel any active deliveries\n    const activeDeliveries = await Delivery.findByDriver(driverId, { status: ['assigned', 'picked_up', 'in_transit'] });\n\n    await Promise.all(\n      activeDeliveries.map((delivery) => delivery.updateStatus('failed'))\n    );\n\n    return await driver.updateStatus('suspended');\n  }\n\n  static async getAllDeliveries(options = {}) {\n    const {\n      status = null,\n      driverId = null,\n      page = 1,\n      limit = 20\n    } = options;\n\n    const offset = (page - 1) * limit;\n    let query = `\n      SELECT d.*,\n        JSON_BUILD_OBJECT(\n          'id', o.id,\n          'orderNumber', o.order_number,\n          'buyerId', o.buyer_id,\n          'totalAmount', o.total_amount\n        ) as order,\n        JSON_BUILD_OBJECT(\n          'id', u.id,\n          'firstName', u.first_name,\n          'lastName', u.last_name,\n          'phone', u.phone\n        ) as driver\n      FROM deliveries d\n      LEFT JOIN orders o ON d.order_id = o.id\n      LEFT JOIN users u ON d.driver_id = u.id\n      WHERE 1=1\n    `;\n    const values = [];\n    let paramCount = 0;\n\n    if (status) {\n      paramCount++;\n      query += ` AND d.status = $${paramCount}`;\n      values.push(status);\n    }\n\n    if (driverId) {\n      paramCount++;\n      query += ` AND d.driver_id = $${paramCount}`;\n      values.push(driverId);\n    }\n\n    query += ` ORDER BY d.created_at DESC LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`;\n    values.push(limit, offset);\n\n    const db = require('../config/database.config');\n    const { rows } = await db.query(query, values);\n\n    return rows.map((row) => new Delivery(row));\n  }\n}\n\nmodule.exports = DeliveryService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\event-logger.service.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1529,1637],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1760,1806],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1813,1849],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":80,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":93,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2023,2029],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":97,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":111,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2467,2473],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":115,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":129,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2952,2958],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":133,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":147,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3436,3442],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":151,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":165,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3952,3958],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":169,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":183,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4445,4451],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":187,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":205,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4931,4937],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":209,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":218,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5462,5468],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":222,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":239,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5769,5775],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getEventHistory'.","line":243,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":243,"endColumn":24},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":269,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":269,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":275,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":275,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":281,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":281,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":287,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":287,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8571,8620],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getEventsByActor'.","line":335,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":335,"endColumn":25},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":364,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":364,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":370,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":370,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":376,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":376,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":382,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":382,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":421,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":421,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11003,11054],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getEventStatistics'.","line":427,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":427,"endColumn":27},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":452,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":452,"endColumn":50,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[12018,12018],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":453,"column":29,"nodeType":"CallExpression","messageId":"missingRadix","endLine":453,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[12079,12079],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":454,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":454,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[12132,12132],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":455,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":455,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[12185,12185],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12469,12517],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":491,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":491,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13222,13267],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\n\nclass EventLogger {\n  constructor() {\n    this.defaultOptions = {\n      eventCategory: 'system',\n      actorType: 'user',\n      severity: 'info',\n      success: true\n    };\n  }\n\n  // Main logging method\n  async log(options) {\n    try {\n      const config = { ...this.defaultOptions, ...options };\n\n      const {\n        eventType,\n        eventCategory,\n        actorId = null,\n        actorType,\n        targetId = null,\n        targetType = null,\n        eventData = {},\n        metadata = {},\n        ipAddress = null,\n        userAgent = null,\n        sessionId = null,\n        severity,\n        success,\n        errorMessage = null,\n        durationMs = null\n      } = config;\n\n      // Validate required fields\n      if (!eventType) {\n        throw new Error('eventType is required for logging');\n      }\n\n      // Use the database function to log the event\n      const result = await db.query(`\n        SELECT log_event($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n      `, [\n        eventType,\n        eventCategory,\n        actorId,\n        actorType,\n        targetId,\n        targetType,\n        JSON.stringify(eventData),\n        JSON.stringify(metadata),\n        ipAddress,\n        userAgent,\n        sessionId,\n        severity,\n        success,\n        errorMessage,\n        durationMs\n      ]);\n\n      const eventId = result.rows[0].log_event;\n\n      // Console log for development\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`[EVENT] ${eventType} | ${eventCategory} | ${success ? 'SUCCESS' : 'FAILED'} | ID: ${eventId}`);\n      }\n\n      return eventId;\n    } catch (error) {\n      // Fallback logging to console if database logging fails\n      console.error('Event logging failed:', error);\n      console.log('Event data:', options);\n      return null;\n    }\n  }\n\n  // Convenience methods for common event types\n  async logAuth(eventType, userId, success = true, metadata = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'auth',\n      actorId: userId,\n      actorType: 'user',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...metadata\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID,\n      success\n    });\n  }\n\n  async logProductAction(eventType, userId, productId, actionData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'product',\n      actorId: userId,\n      actorType: 'user',\n      targetId: productId,\n      targetType: 'product',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...actionData\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logOrderAction(eventType, userId, orderId, orderData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'order',\n      actorId: userId,\n      actorType: 'user',\n      targetId: orderId,\n      targetType: 'order',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...orderData\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logPaymentAction(eventType, userId, paymentId, paymentData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'payment',\n      actorId: userId,\n      actorType: userId ? 'user' : 'webhook',\n      targetId: paymentId,\n      targetType: 'payment',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...paymentData\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logDeliveryAction(eventType, userId, deliveryId, deliveryData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'delivery',\n      actorId: userId,\n      actorType: 'user',\n      targetId: deliveryId,\n      targetType: 'delivery',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...deliveryData\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logVendorAction(eventType, userId, targetId, vendorData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'vendor',\n      actorId: userId,\n      actorType: 'user',\n      targetId,\n      targetType: 'vendor',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...vendorData\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logAdminAction(eventType, adminId, targetId, targetType, adminData = {}, request = null) {\n    return await this.log({\n      eventType,\n      eventCategory: 'admin',\n      actorId: adminId,\n      actorType: 'user',\n      targetId,\n      targetType,\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...adminData\n      },\n      metadata: {\n        admin_action: true,\n        requires_audit: true\n      },\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  async logSystemEvent(eventType, eventData = {}, severity = 'info') {\n    return await this.log({\n      eventType,\n      eventCategory: 'system',\n      actorType: 'system',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        ...eventData\n      },\n      severity\n    });\n  }\n\n  async logError(eventType, error, context = {}, userId = null, request = null) {\n    return await this.log({\n      eventType: eventType || 'error',\n      eventCategory: 'system',\n      actorId: userId,\n      actorType: userId ? 'user' : 'system',\n      eventData: {\n        timestamp: new Date().toISOString(),\n        error_name: error.name,\n        error_stack: error.stack,\n        ...context\n      },\n      severity: 'error',\n      success: false,\n      errorMessage: error.message,\n      ipAddress: request?.ip,\n      userAgent: request?.get('User-Agent'),\n      sessionId: request?.sessionID\n    });\n  }\n\n  // Get event history for a specific entity\n  async getEventHistory(targetType, targetId, options = {}) {\n    try {\n      const {\n        limit = 50,\n        offset = 0,\n        eventCategory = null,\n        severity = null,\n        startDate = null,\n        endDate = null\n      } = options;\n\n      let query = `\n        SELECT \n          el.*,\n          u.first_name,\n          u.last_name,\n          u.email\n        FROM event_logs el\n        LEFT JOIN users u ON el.actor_id = u.id\n        WHERE el.target_type = $1 AND el.target_id = $2\n      `;\n\n      const values = [targetType, targetId];\n      let paramCount = 2;\n\n      if (eventCategory) {\n        paramCount++;\n        query += ` AND el.event_category = $${paramCount}`;\n        values.push(eventCategory);\n      }\n\n      if (severity) {\n        paramCount++;\n        query += ` AND el.severity = $${paramCount}`;\n        values.push(severity);\n      }\n\n      if (startDate) {\n        paramCount++;\n        query += ` AND el.created_at >= $${paramCount}`;\n        values.push(startDate);\n      }\n\n      if (endDate) {\n        paramCount++;\n        query += ` AND el.created_at <= $${paramCount}`;\n        values.push(endDate);\n      }\n\n      query += ` \n        ORDER BY el.created_at DESC \n        LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n      `;\n      values.push(limit, offset);\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        events: rows.map((row) => ({\n          id: row.id,\n          eventType: row.event_type,\n          eventCategory: row.event_category,\n          actor: {\n            id: row.actor_id,\n            type: row.actor_type,\n            name: row.actor_id ? `${row.first_name} ${row.last_name}` : 'System',\n            email: row.email\n          },\n          eventData: row.event_data,\n          metadata: row.metadata,\n          severity: row.severity,\n          success: row.success,\n          errorMessage: row.error_message,\n          duration: row.duration_ms,\n          createdAt: row.created_at,\n          ipAddress: row.ip_address,\n          userAgent: row.user_agent\n        })),\n        pagination: {\n          limit,\n          offset,\n          hasMore: rows.length === limit\n        }\n      };\n    } catch (error) {\n      console.error('Get event history error:', error);\n      throw new Error('Failed to retrieve event history');\n    }\n  }\n\n  // Get events by actor (user)\n  async getEventsByActor(actorId, options = {}) {\n    try {\n      const {\n        limit = 50,\n        offset = 0,\n        eventCategory = null,\n        eventType = null,\n        startDate = null,\n        endDate = null\n      } = options;\n\n      let query = `\n        SELECT \n          el.*,\n          CASE \n            WHEN el.target_type = 'product' THEN p.title\n            WHEN el.target_type = 'order' THEN o.order_number\n            ELSE NULL\n          END as target_name\n        FROM event_logs el\n        LEFT JOIN products p ON el.target_type = 'product' AND el.target_id = p.id\n        LEFT JOIN orders o ON el.target_type = 'order' AND el.target_id = o.id\n        WHERE el.actor_id = $1\n      `;\n\n      const values = [actorId];\n      let paramCount = 1;\n\n      if (eventCategory) {\n        paramCount++;\n        query += ` AND el.event_category = $${paramCount}`;\n        values.push(eventCategory);\n      }\n\n      if (eventType) {\n        paramCount++;\n        query += ` AND el.event_type = $${paramCount}`;\n        values.push(eventType);\n      }\n\n      if (startDate) {\n        paramCount++;\n        query += ` AND el.created_at >= $${paramCount}`;\n        values.push(startDate);\n      }\n\n      if (endDate) {\n        paramCount++;\n        query += ` AND el.created_at <= $${paramCount}`;\n        values.push(endDate);\n      }\n\n      query += ` \n        ORDER BY el.created_at DESC \n        LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n      `;\n      values.push(limit, offset);\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        events: rows.map((row) => ({\n          id: row.id,\n          eventType: row.event_type,\n          eventCategory: row.event_category,\n          target: {\n            id: row.target_id,\n            type: row.target_type,\n            name: row.target_name\n          },\n          eventData: row.event_data,\n          metadata: row.metadata,\n          severity: row.severity,\n          success: row.success,\n          errorMessage: row.error_message,\n          duration: row.duration_ms,\n          createdAt: row.created_at\n        })),\n        pagination: {\n          limit,\n          offset,\n          hasMore: rows.length === limit\n        }\n      };\n    } catch (error) {\n      console.error('Get events by actor error:', error);\n      throw new Error('Failed to retrieve actor events');\n    }\n  }\n\n  // Get event statistics\n  async getEventStatistics(days = 30) {\n    try {\n      const query = `\n        SELECT \n          event_category,\n          event_type,\n          COUNT(*) as total_events,\n          COUNT(*) FILTER (WHERE success = true) as successful_events,\n          COUNT(*) FILTER (WHERE success = false) as failed_events,\n          COUNT(DISTINCT actor_id) as unique_actors,\n          AVG(duration_ms) as avg_duration_ms\n        FROM event_logs\n        WHERE created_at >= CURRENT_DATE - INTERVAL '${days} days'\n        GROUP BY event_category, event_type\n        ORDER BY total_events DESC\n      `;\n\n      const { rows } = await db.query(query);\n\n      return {\n        success: true,\n        period: `${days} days`,\n        statistics: rows.map((row) => ({\n          category: row.event_category,\n          type: row.event_type,\n          totalEvents: parseInt(row.total_events),\n          successfulEvents: parseInt(row.successful_events),\n          failedEvents: parseInt(row.failed_events),\n          uniqueActors: parseInt(row.unique_actors),\n          successRate: row.total_events > 0\n            ? ((row.successful_events / row.total_events) * 100).toFixed(2)\n            : 0,\n          avgDuration: row.avg_duration_ms ? parseFloat(row.avg_duration_ms).toFixed(2) : null\n        }))\n      };\n    } catch (error) {\n      console.error('Event statistics error:', error);\n      throw new Error('Failed to get event statistics');\n    }\n  }\n\n  // Clean up old events (for maintenance)\n  async cleanupOldEvents(retentionDays = 90) {\n    try {\n      const query = `\n        DELETE FROM event_logs \n        WHERE created_at < CURRENT_DATE - INTERVAL '${retentionDays} days'\n          AND severity NOT IN ('error', 'critical')\n      `;\n\n      const result = await db.query(query);\n      const deletedCount = result.rowCount;\n\n      await this.logSystemEvent('event_cleanup', {\n        retention_days: retentionDays,\n        deleted_count: deletedCount\n      });\n\n      return {\n        success: true,\n        deletedCount,\n        retentionDays\n      };\n    } catch (error) {\n      console.error('Event cleanup error:', error);\n      throw new Error('Failed to cleanup old events');\n    }\n  }\n}\n\nmodule.exports = EventLogger;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\fraud-detection.service.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3314,3360],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 109. Maximum allowed is 100.","line":122,"column":1,"nodeType":"Program","messageId":"max","endLine":122,"endColumn":110},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'updateUserBehavior'.","line":122,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":122,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4136,4188],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5650,5703],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6438,6525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6554,6596],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7655,7707],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getFraudIncidents'.","line":254,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":254,"endColumn":26},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":285,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":285,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":291,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":291,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":297,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":297,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":303,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":303,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":309,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":309,"endColumn":21},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":315,"column":9,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":315,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10830,10881],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":425,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":425,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12482,12536],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":440,"column":34,"nodeType":"CallExpression","messageId":"missingRadix","endLine":440,"endColumn":71,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[13044,13044],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":460,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":460,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13543,13627],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13664,13717],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getFraudStatistics'.","line":468,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":468,"endColumn":27},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":507,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":507,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15188,15188],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":508,"column":31,"nodeType":"CallExpression","messageId":"missingRadix","endLine":508,"endColumn":69,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15258,15258],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":509,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":509,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15319,15319],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":510,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":510,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15380,15380],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":512,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":512,"endColumn":67,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15513,15513],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":521,"column":18,"nodeType":"CallExpression","messageId":"missingRadix","endLine":521,"endColumn":46,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15867,15867],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":523,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":523,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[15976,15976],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":524,"column":29,"nodeType":"CallExpression","messageId":"missingRadix","endLine":524,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[16037,16037],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":528,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":528,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16088,16136],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getFraudDashboard'.","line":534,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":534,"endColumn":26},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":544,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":544,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[16627,16627],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":546,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":546,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[16740,16740],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":547,"column":27,"nodeType":"CallExpression","messageId":"missingRadix","endLine":547,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[16797,16797],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":548,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":548,"endColumn":52,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[16850,16850],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":552,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":552,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16901,16948],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'getActionMessage'.","line":565,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":565,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const db = require('../config/database.config');\nconst EventLogger = require('./event-logger.service');\n\nclass FraudDetectionService {\n  constructor() {\n    this.eventLogger = new EventLogger();\n    this.riskThresholds = {\n      low: 20,\n      medium: 40,\n      high: 60,\n      critical: 80\n    };\n  }\n\n  // Main fraud detection method\n  async analyzeTransaction(transactionData) {\n    const startTime = Date.now();\n\n    try {\n      const {\n        userId,\n        ipAddress,\n        userAgent,\n        deviceFingerprint,\n        paymentAmount,\n        paymentMethod,\n        sessionId,\n        context = {}\n      } = transactionData;\n\n      // Update user behavior tracking\n      await this.updateUserBehavior(userId, sessionId, ipAddress, userAgent, deviceFingerprint, 'payment', context);\n\n      // Calculate fraud score using database function\n      const result = await db.query(`\n        SELECT * FROM calculate_fraud_score($1, $2, $3, $4, $5)\n      `, [userId, ipAddress, deviceFingerprint, paymentAmount, JSON.stringify(context)]);\n\n      const fraudAnalysis = result.rows[0];\n      const riskLevel = this.getRiskLevel(fraudAnalysis.risk_score);\n\n      // Create fraud incident if risk is significant\n      let incidentId = null;\n      if (fraudAnalysis.risk_score >= this.riskThresholds.medium) {\n        incidentId = await this.createFraudIncident({\n          userId,\n          incidentType: 'payment_fraud',\n          triggeredRules: fraudAnalysis.triggered_rules,\n          riskScore: fraudAnalysis.risk_score,\n          severity: riskLevel,\n          ipAddress,\n          userAgent,\n          sessionId,\n          deviceFingerprint,\n          incidentData: {\n            payment_amount: paymentAmount,\n            payment_method: paymentMethod,\n            analysis_duration_ms: Date.now() - startTime,\n            ...context\n          },\n          recommendedAction: fraudAnalysis.recommended_action\n        });\n      }\n\n      // Log the fraud analysis\n      await this.eventLogger.log({\n        eventType: 'fraud_analysis_completed',\n        eventCategory: 'system',\n        actorId: userId,\n        actorType: 'user',\n        eventData: {\n          risk_score: fraudAnalysis.risk_score,\n          risk_level: riskLevel,\n          triggered_rules: fraudAnalysis.triggered_rules,\n          recommended_action: fraudAnalysis.recommended_action,\n          incident_created: incidentId !== null,\n          incident_id: incidentId,\n          analysis_duration_ms: Date.now() - startTime\n        },\n        ipAddress,\n        userAgent,\n        sessionId,\n        severity: riskLevel === 'critical' ? 'error' : 'info'\n      });\n\n      return {\n        success: true,\n        riskScore: fraudAnalysis.risk_score,\n        riskLevel,\n        triggeredRules: fraudAnalysis.triggered_rules,\n        recommendedAction: fraudAnalysis.recommended_action,\n        incidentId,\n        shouldBlock: fraudAnalysis.recommended_action === 'block',\n        shouldReview: fraudAnalysis.recommended_action === 'review',\n        message: this.getActionMessage(fraudAnalysis.recommended_action, fraudAnalysis.risk_score)\n      };\n    } catch (error) {\n      await this.eventLogger.logError('fraud_analysis_failed', error, {\n        user_id: transactionData.userId,\n        transaction_data: transactionData\n      });\n\n      console.error('Fraud analysis error:', error);\n\n      // Return safe default in case of system error\n      return {\n        success: false,\n        riskScore: 0,\n        riskLevel: 'low',\n        triggeredRules: [],\n        recommendedAction: 'allow',\n        incidentId: null,\n        shouldBlock: false,\n        shouldReview: false,\n        message: 'Fraud analysis temporarily unavailable',\n        error: error.message\n      };\n    }\n  }\n\n  // Update user behavior tracking\n  async updateUserBehavior(userId, sessionId, ipAddress, userAgent, deviceFingerprint, actionType, context) {\n    try {\n      await db.query(`\n        SELECT update_user_behavior($1, $2, $3, $4, $5, $6, $7)\n      `, [userId, sessionId, ipAddress, userAgent, deviceFingerprint, actionType, JSON.stringify(context)]);\n    } catch (error) {\n      console.error('User behavior update error:', error);\n      // Don't throw - this is supplementary data\n    }\n  }\n\n  // Create fraud incident\n  async createFraudIncident(incidentData) {\n    try {\n      const {\n        userId,\n        incidentType,\n        orderId = null,\n        paymentId = null,\n        triggeredRules,\n        riskScore,\n        severity,\n        ipAddress,\n        userAgent,\n        sessionId,\n        deviceFingerprint,\n        incidentData: data,\n        recommendedAction\n      } = incidentData;\n\n      const query = `\n        INSERT INTO fraud_incidents (\n          user_id, incident_type, order_id, payment_id, triggered_rules,\n          risk_score, severity, ip_address, user_agent, session_id,\n          device_fingerprint, incident_data, action_taken, automatic_action\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n        RETURNING id\n      `;\n\n      const values = [\n        userId, incidentType, orderId, paymentId, triggeredRules,\n        riskScore, severity, ipAddress, userAgent, sessionId,\n        deviceFingerprint, JSON.stringify(data), recommendedAction, true\n      ];\n\n      const result = await db.query(query, values);\n      const incidentId = result.rows[0].id;\n\n      // Automatically block user if critical risk\n      if (severity === 'critical' && recommendedAction === 'block') {\n        await this.blockUser(userId, incidentId, 'Automatic block due to fraud detection');\n      }\n\n      return incidentId;\n    } catch (error) {\n      console.error('Create fraud incident error:', error);\n      return null;\n    }\n  }\n\n  // Block user due to fraud\n  async blockUser(userId, incidentId, reason) {\n    try {\n      // Update user status to blocked\n      await db.query(\n        'UPDATE users SET status = $1 WHERE id = $2',\n        ['blocked', userId]\n      );\n\n      // Update incident to reflect user was blocked\n      await db.query(\n        'UPDATE fraud_incidents SET user_blocked = true WHERE id = $1',\n        [incidentId]\n      );\n\n      // Log the blocking action\n      await this.eventLogger.logAdminAction(\n        'user_blocked_fraud',\n        null, // System action\n        userId,\n        'user',\n        {\n          incident_id: incidentId,\n          reason,\n          automatic: true\n        }\n      );\n\n      console.log(`User ${userId} blocked due to fraud detection (Incident: ${incidentId})`);\n    } catch (error) {\n      console.error('Block user error:', error);\n    }\n  }\n\n  // Add IP to reputation list\n  async updateIPReputation(ipAddress, reputationType, reason, userId = null) {\n    try {\n      const query = `\n        INSERT INTO ip_reputation (ip_address, reputation_type, reason, source, created_by)\n        VALUES ($1, $2, $3, $4, $5)\n        ON CONFLICT (ip_address) \n        DO UPDATE SET\n          reputation_type = EXCLUDED.reputation_type,\n          reason = EXCLUDED.reason,\n          updated_at = CURRENT_TIMESTAMP\n        RETURNING id\n      `;\n\n      const source = userId ? 'manual' : 'automatic';\n      const result = await db.query(query, [ipAddress, reputationType, reason, source, userId]);\n\n      await this.eventLogger.log({\n        eventType: 'ip_reputation_updated',\n        eventCategory: 'admin',\n        actorId: userId,\n        actorType: userId ? 'user' : 'system',\n        eventData: {\n          ip_address: ipAddress.toString(),\n          reputation_type: reputationType,\n          reason,\n          source\n        }\n      });\n\n      return result.rows[0].id;\n    } catch (error) {\n      console.error('Update IP reputation error:', error);\n      throw error;\n    }\n  }\n\n  // Get fraud incidents\n  async getFraudIncidents(options = {}) {\n    try {\n      const {\n        status = null,\n        severity = null,\n        incidentType = null,\n        userId = null,\n        limit = 50,\n        offset = 0,\n        startDate = null,\n        endDate = null\n      } = options;\n\n      let query = `\n        SELECT \n          fi.*,\n          u.first_name,\n          u.last_name,\n          u.email,\n          resolver.first_name as resolver_first_name,\n          resolver.last_name as resolver_last_name\n        FROM fraud_incidents fi\n        LEFT JOIN users u ON fi.user_id = u.id\n        LEFT JOIN users resolver ON fi.resolved_by = resolver.id\n        WHERE 1=1\n      `;\n\n      const values = [];\n      let paramCount = 0;\n\n      if (status) {\n        paramCount++;\n        query += ` AND fi.status = $${paramCount}`;\n        values.push(status);\n      }\n\n      if (severity) {\n        paramCount++;\n        query += ` AND fi.severity = $${paramCount}`;\n        values.push(severity);\n      }\n\n      if (incidentType) {\n        paramCount++;\n        query += ` AND fi.incident_type = $${paramCount}`;\n        values.push(incidentType);\n      }\n\n      if (userId) {\n        paramCount++;\n        query += ` AND fi.user_id = $${paramCount}`;\n        values.push(userId);\n      }\n\n      if (startDate) {\n        paramCount++;\n        query += ` AND fi.created_at >= $${paramCount}`;\n        values.push(startDate);\n      }\n\n      if (endDate) {\n        paramCount++;\n        query += ` AND fi.created_at <= $${paramCount}`;\n        values.push(endDate);\n      }\n\n      query += ` \n        ORDER BY fi.created_at DESC \n        LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n      `;\n      values.push(limit, offset);\n\n      const { rows } = await db.query(query, values);\n\n      return {\n        success: true,\n        incidents: rows.map((row) => ({\n          id: row.id,\n          incidentType: row.incident_type,\n          userId: row.user_id,\n          user: row.user_id ? {\n            name: `${row.first_name} ${row.last_name}`,\n            email: row.email\n          } : null,\n          orderId: row.order_id,\n          paymentId: row.payment_id,\n          triggeredRules: row.triggered_rules,\n          riskScore: row.risk_score,\n          severity: row.severity,\n          status: row.status,\n          ipAddress: row.ip_address,\n          userAgent: row.user_agent,\n          deviceFingerprint: row.device_fingerprint,\n          incidentData: row.incident_data,\n          evidence: row.evidence,\n          actionTaken: row.action_taken,\n          userBlocked: row.user_blocked,\n          automaticAction: row.automatic_action,\n          resolutionNotes: row.resolution_notes,\n          resolvedBy: row.resolved_by ? { name: `${row.resolver_first_name} ${row.resolver_last_name}` } : null,\n          resolvedAt: row.resolved_at,\n          createdAt: row.created_at,\n          updatedAt: row.updated_at\n        })),\n        pagination: {\n          limit,\n          offset,\n          hasMore: rows.length === limit\n        }\n      };\n    } catch (error) {\n      console.error('Get fraud incidents error:', error);\n      throw new Error('Failed to retrieve fraud incidents');\n    }\n  }\n\n  // Resolve fraud incident\n  async resolveFraudIncident(incidentId, resolution, userId) {\n    try {\n      const { status, notes, evidence = {} } = resolution;\n\n      const query = `\n        UPDATE fraud_incidents \n        SET \n          status = $1,\n          resolution_notes = $2,\n          evidence = $3,\n          resolved_by = $4,\n          resolved_at = CURRENT_TIMESTAMP,\n          updated_at = CURRENT_TIMESTAMP\n        WHERE id = $5\n        RETURNING *\n      `;\n\n      const result = await db.query(query, [\n        status, notes, JSON.stringify(evidence), userId, incidentId\n      ]);\n\n      if (result.rows.length === 0) {\n        throw new Error('Fraud incident not found');\n      }\n\n      const incident = result.rows[0];\n\n      // If confirmed as false positive, consider unblocking user\n      if (status === 'false_positive' && incident.user_blocked) {\n        await this.considerUnblockUser(incident.user_id, incidentId, userId);\n      }\n\n      await this.eventLogger.logAdminAction(\n        'fraud_incident_resolved',\n        userId,\n        incident.user_id,\n        'fraud_incident',\n        {\n          incident_id: incidentId,\n          resolution_status: status,\n          was_false_positive: status === 'false_positive'\n        }\n      );\n\n      return {\n        success: true,\n        incident: {\n          id: incident.id,\n          status: incident.status,\n          resolutionNotes: incident.resolution_notes,\n          resolvedAt: incident.resolved_at\n        }\n      };\n    } catch (error) {\n      console.error('Resolve fraud incident error:', error);\n      throw error;\n    }\n  }\n\n  // Consider unblocking user after false positive\n  async considerUnblockUser(userId, incidentId, adminId) {\n    try {\n      // Check if there are other confirmed fraud incidents for this user\n      const { rows } = await db.query(`\n        SELECT COUNT(*) as confirmed_incidents\n        FROM fraud_incidents\n        WHERE user_id = $1 AND status = 'confirmed' AND id != $2\n      `, [userId, incidentId]);\n\n      const confirmedIncidents = parseInt(rows[0].confirmed_incidents);\n\n      if (confirmedIncidents === 0) {\n        // No other confirmed incidents, safe to unblock\n        await db.query(\n          'UPDATE users SET status = $1 WHERE id = $2',\n          ['active', userId]\n        );\n\n        await this.eventLogger.logAdminAction(\n          'user_unblocked_false_positive',\n          adminId,\n          userId,\n          'user',\n          {\n            incident_id: incidentId,\n            reason: 'False positive fraud detection'\n          }\n        );\n\n        console.log(`User ${userId} unblocked after false positive incident ${incidentId}`);\n      }\n    } catch (error) {\n      console.error('Consider unblock user error:', error);\n    }\n  }\n\n  // Get fraud statistics\n  async getFraudStatistics(days = 30) {\n    try {\n      const query = `\n        SELECT \n          incident_type,\n          severity,\n          status,\n          COUNT(*) as incident_count,\n          AVG(risk_score) as avg_risk_score,\n          COUNT(*) FILTER (WHERE user_blocked = true) as users_blocked,\n          COUNT(*) FILTER (WHERE automatic_action = true) as automatic_actions\n        FROM fraud_incidents\n        WHERE created_at >= CURRENT_DATE - INTERVAL '${days} days'\n        GROUP BY incident_type, severity, status\n        ORDER BY incident_count DESC\n      `;\n\n      const { rows } = await db.query(query);\n\n      // Get overall statistics\n      const overallQuery = `\n        SELECT \n          COUNT(*) as total_incidents,\n          COUNT(DISTINCT user_id) as unique_users_flagged,\n          COUNT(*) FILTER (WHERE status = 'confirmed') as confirmed_fraud,\n          COUNT(*) FILTER (WHERE status = 'false_positive') as false_positives,\n          AVG(risk_score) as avg_risk_score,\n          COUNT(*) FILTER (WHERE user_blocked = true) as total_blocked_users\n        FROM fraud_incidents\n        WHERE created_at >= CURRENT_DATE - INTERVAL '${days} days'\n      `;\n\n      const overallResult = await db.query(overallQuery);\n      const overall = overallResult.rows[0];\n\n      return {\n        success: true,\n        period: `${days} days`,\n        overall: {\n          totalIncidents: parseInt(overall.total_incidents),\n          uniqueUsersFlagged: parseInt(overall.unique_users_flagged),\n          confirmedFraud: parseInt(overall.confirmed_fraud),\n          falsePositives: parseInt(overall.false_positives),\n          avgRiskScore: parseFloat(overall.avg_risk_score) || 0,\n          totalBlockedUsers: parseInt(overall.total_blocked_users),\n          accuracy: overall.total_incidents > 0\n            ? ((overall.confirmed_fraud / overall.total_incidents) * 100).toFixed(2)\n            : 0\n        },\n        breakdown: rows.map((row) => ({\n          incidentType: row.incident_type,\n          severity: row.severity,\n          status: row.status,\n          count: parseInt(row.incident_count),\n          avgRiskScore: parseFloat(row.avg_risk_score),\n          usersBlocked: parseInt(row.users_blocked),\n          automaticActions: parseInt(row.automatic_actions)\n        }))\n      };\n    } catch (error) {\n      console.error('Fraud statistics error:', error);\n      throw new Error('Failed to get fraud statistics');\n    }\n  }\n\n  // Get fraud dashboard data\n  async getFraudDashboard() {\n    try {\n      const { rows } = await db.query('SELECT * FROM fraud_dashboard ORDER BY incident_date DESC LIMIT 30');\n\n      return {\n        success: true,\n        dashboard: rows.map((row) => ({\n          date: row.incident_date,\n          incidentType: row.incident_type,\n          severity: row.severity,\n          incidentCount: parseInt(row.incident_count),\n          avgRiskScore: parseFloat(row.avg_risk_score),\n          confirmedFraud: parseInt(row.confirmed_fraud),\n          falsePositives: parseInt(row.false_positives),\n          usersBlocked: parseInt(row.users_blocked)\n        }))\n      };\n    } catch (error) {\n      console.error('Fraud dashboard error:', error);\n      throw new Error('Failed to get fraud dashboard data');\n    }\n  }\n\n  // Helper methods\n  getRiskLevel(riskScore) {\n    if (riskScore >= this.riskThresholds.critical) return 'critical';\n    if (riskScore >= this.riskThresholds.high) return 'high';\n    if (riskScore >= this.riskThresholds.medium) return 'medium';\n    return 'low';\n  }\n\n  getActionMessage(action, riskScore) {\n    switch (action) {\n      case 'block':\n        return `Transaction blocked due to high fraud risk (${riskScore}/100)`;\n      case 'review':\n        return `Transaction flagged for manual review (${riskScore}/100)`;\n      case 'flag':\n        return `Transaction flagged with medium risk (${riskScore}/100)`;\n      default:\n        return `Transaction approved with low risk (${riskScore}/100)`;\n    }\n  }\n\n  // Validate if transaction should proceed\n  shouldBlockTransaction(analysis) {\n    return analysis.shouldBlock || analysis.riskScore >= this.riskThresholds.critical;\n  }\n\n  shouldReviewTransaction(analysis) {\n    return analysis.shouldReview || analysis.riskScore >= this.riskThresholds.high;\n  }\n}\n\nmodule.exports = new FraudDetectionService();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\job-queue.service.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[495,539],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[565,616],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[841,900],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[907,968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[997,1055],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2959,3015],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3503,3578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3788,3830],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3856,3899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":128,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":128,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4738,4797],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5312,5373],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runAnalyticsCalculation'.","line":184,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":184,"endColumn":32},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runPaymentCleanup'.","line":189,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":189,"endColumn":26},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runFraudModelUpdate'.","line":199,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":199,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6014,6087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":206,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":206,"endColumn":52},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":220,"column":26,"nodeType":"CallExpression","messageId":"missingRadix","endLine":220,"endColumn":55,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6630,6630],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runDatabaseMaintenance'.","line":237,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":237,"endColumn":31},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":238,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":238,"endColumn":52},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":255,"column":11,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":255,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7730,7830],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7974,8026],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runVendorReports'.","line":268,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":268,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8192,8265],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8335,8381],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'runEmailDigest'.","line":279,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":279,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8534,8600],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8663,8707],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":296,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":296,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9010,9102],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10406,10448],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":360,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":360,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10642,10684],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11046,11096],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11232,11281],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":382,"column":5,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":384,"endColumn":6},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11384,11418],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":392,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":392,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11467,11518],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.","line":397,"column":7,"nodeType":"ForOfStatement","messageId":"restrictedSyntax","endLine":399,"endColumn":8},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11675,11711],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'getNextRunTime'.","line":407,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":407,"endColumn":17},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":449,"column":1,"nodeType":"Program","messageId":"max","endLine":449,"endColumn":105},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13584,13648],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const cron = require('node-cron');\nconst EventLogger = require('./event-logger.service');\nconst analyticsService = require('./analytics.service');\nconst paymentService = require('./payment.service');\n\nclass JobQueueService {\n  constructor() {\n    this.eventLogger = new EventLogger();\n    this.jobs = new Map();\n    this.isRunning = false;\n    this.jobHistory = [];\n    this.maxHistorySize = 1000;\n  }\n\n  // Initialize the job queue system\n  async initialize() {\n    if (this.isRunning) {\n      console.log('Job queue is already running');\n      return;\n    }\n\n    console.log('🚀 Initializing Job Queue System...');\n\n    try {\n      // Schedule recurring jobs\n      this.scheduleRecurringJobs();\n\n      this.isRunning = true;\n\n      await this.eventLogger.logSystemEvent('job_queue_initialized', { scheduled_jobs: this.jobs.size });\n\n      console.log('✅ Job Queue System initialized successfully');\n      console.log(`📋 Scheduled ${this.jobs.size} recurring jobs`);\n    } catch (error) {\n      console.error('❌ Failed to initialize job queue:', error);\n      await this.eventLogger.logError('job_queue_init_failed', error);\n      throw error;\n    }\n  }\n\n  // Schedule all recurring jobs\n  scheduleRecurringJobs() {\n    // Daily analytics calculation (runs at 2 AM every day)\n    this.scheduleJob('daily-analytics', '0 2 * * *', async () => {\n      await this.runAnalyticsCalculation();\n    }, 'Calculate daily analytics statistics');\n\n    // Payment cleanup (runs every 6 hours)\n    this.scheduleJob('payment-cleanup', '0 */6 * * *', async () => {\n      await this.runPaymentCleanup();\n    }, 'Clean up expired payments');\n\n    // Event log cleanup (runs weekly on Sunday at 3 AM)\n    this.scheduleJob('event-cleanup', '0 3 * * 0', async () => {\n      await this.runEventCleanup();\n    }, 'Clean up old event logs');\n\n    // Fraud detection model update (runs daily at 1 AM)\n    this.scheduleJob('fraud-model-update', '0 1 * * *', async () => {\n      await this.runFraudModelUpdate();\n    }, 'Update fraud detection patterns');\n\n    // System health check (runs every 15 minutes)\n    this.scheduleJob('health-check', '*/15 * * * *', async () => {\n      await this.runHealthCheck();\n    }, 'System health monitoring');\n\n    // Database maintenance (runs daily at 4 AM)\n    this.scheduleJob('db-maintenance', '0 4 * * *', async () => {\n      await this.runDatabaseMaintenance();\n    }, 'Database optimization and maintenance');\n\n    // Generate vendor reports (runs daily at 6 AM)\n    this.scheduleJob('vendor-reports', '0 6 * * *', async () => {\n      await this.runVendorReports();\n    }, 'Generate daily vendor performance reports');\n\n    // Email digest (runs daily at 8 AM)\n    this.scheduleJob('email-digest', '0 8 * * *', async () => {\n      await this.runEmailDigest();\n    }, 'Send daily email digest to admins');\n  }\n\n  // Schedule a single job\n  scheduleJob(name, cronPattern, jobFunction, description = '') {\n    if (this.jobs.has(name)) {\n      console.warn(`Job ${name} already exists, skipping...`);\n      return;\n    }\n\n    const task = cron.schedule(cronPattern, async () => {\n      await this.executeJob(name, jobFunction, description);\n    }, {\n      scheduled: true,\n      timezone: 'Africa/Ouagadougou' // Burkina Faso timezone\n    });\n\n    this.jobs.set(name, {\n      name,\n      cronPattern,\n      description,\n      task,\n      lastRun: null,\n      nextRun: this.getNextRunTime(cronPattern),\n      runCount: 0,\n      lastDuration: null,\n      lastStatus: 'pending'\n    });\n\n    console.log(`📅 Scheduled job: ${name} (${cronPattern}) - ${description}`);\n  }\n\n  // Execute a job with error handling and logging\n  async executeJob(jobName, jobFunction, description) {\n    const startTime = Date.now();\n    const job = this.jobs.get(jobName);\n\n    if (!job) {\n      console.error(`Job ${jobName} not found`);\n      return;\n    }\n\n    console.log(`🔄 Starting job: ${jobName}`);\n\n    try {\n      // Update job status\n      job.lastRun = new Date();\n      job.runCount++;\n      job.lastStatus = 'running';\n\n      // Execute the job function\n      const result = await jobFunction();\n\n      // Calculate duration\n      const duration = Date.now() - startTime;\n      job.lastDuration = duration;\n      job.lastStatus = 'completed';\n      job.nextRun = this.getNextRunTime(job.cronPattern);\n\n      // Log successful execution\n      await this.eventLogger.logSystemEvent('job_executed', {\n        job_name: jobName,\n        description,\n        duration_ms: duration,\n        result: result || 'success'\n      });\n\n      // Add to history\n      this.addToHistory({\n        jobName,\n        status: 'completed',\n        startTime: new Date(startTime),\n        duration,\n        result: result || 'success'\n      });\n\n      console.log(`✅ Job completed: ${jobName} (${duration}ms)`);\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      job.lastDuration = duration;\n      job.lastStatus = 'failed';\n\n      // Log error\n      await this.eventLogger.logError('job_execution_failed', error, {\n        job_name: jobName,\n        description,\n        duration_ms: duration\n      });\n\n      // Add to history\n      this.addToHistory({\n        jobName,\n        status: 'failed',\n        startTime: new Date(startTime),\n        duration,\n        error: error.message\n      });\n\n      console.error(`❌ Job failed: ${jobName} - ${error.message}`);\n    }\n  }\n\n  // Job implementations\n  async runAnalyticsCalculation() {\n    const result = await analyticsService.calculateDailyStats();\n    return `Calculated ${result.statsCalculated} statistics`;\n  }\n\n  async runPaymentCleanup() {\n    const expiredCount = await paymentService.cleanupExpiredPayments();\n    return `Cleaned up ${expiredCount} expired payments`;\n  }\n\n  async runEventCleanup() {\n    const deletedCount = await this.eventLogger.cleanupOldEvents(90);\n    return `Cleaned up ${deletedCount.deletedCount} old events`;\n  }\n\n  async runFraudModelUpdate() {\n    // This would integrate with ML model updates in a real system\n    console.log('Fraud model update placeholder - would update ML patterns');\n    return 'Fraud detection patterns updated';\n  }\n\n  async runHealthCheck() {\n    const db = require('../config/database.config');\n\n    try {\n      // Test database connectivity\n      await db.query('SELECT 1');\n\n      // Check recent error rates\n      const errorQuery = `\n        SELECT COUNT(*) as error_count\n        FROM event_logs \n        WHERE severity = 'error' \n        AND created_at >= NOW() - INTERVAL '15 minutes'\n      `;\n      const { rows } = await db.query(errorQuery);\n      const errorCount = parseInt(rows[0].error_count);\n\n      // Log health check if there are errors\n      if (errorCount > 10) {\n        await this.eventLogger.logSystemEvent('health_check_warning', {\n          error_count: errorCount,\n          threshold: 10\n        }, 'warn');\n      }\n\n      return `Health check: DB healthy, ${errorCount} errors in 15min`;\n    } catch (error) {\n      await this.eventLogger.logError('health_check_failed', error);\n      return 'Health check failed - database connection error';\n    }\n  }\n\n  async runDatabaseMaintenance() {\n    const db = require('../config/database.config');\n\n    try {\n      // Analyze and vacuum tables for optimization\n      const maintenanceTasks = [\n        'ANALYZE users, products, orders, payments',\n        'VACUUM ANALYZE event_logs',\n        'REINDEX INDEX CONCURRENTLY idx_event_logs_created_at'\n      ];\n\n      const results = await Promise.allSettled(\n        maintenanceTasks.map((task) => db.query(task))\n      );\n\n      let completed = 0;\n      results.forEach((result, index) => {\n        if (result.status === 'fulfilled') {\n          completed++;\n        } else {\n          console.warn(`Database maintenance task failed: ${maintenanceTasks[index]}`, result.reason.message);\n        }\n      });\n\n      return `Database maintenance: ${completed}/${maintenanceTasks.length} tasks completed`;\n    } catch (error) {\n      console.error('Database maintenance error:', error);\n      return 'Database maintenance failed';\n    }\n  }\n\n  async runVendorReports() {\n    try {\n      // This would generate and send vendor performance reports\n      console.log('Vendor reports placeholder - would generate daily reports');\n      return 'Vendor reports generated';\n    } catch (error) {\n      console.error('Vendor reports error:', error);\n      return 'Vendor reports generation failed';\n    }\n  }\n\n  async runEmailDigest() {\n    try {\n      // This would send email digests to admins\n      console.log('Email digest placeholder - would send admin digest');\n      return 'Email digest sent';\n    } catch (error) {\n      console.error('Email digest error:', error);\n      return 'Email digest failed';\n    }\n  }\n\n  // Queue a one-time job for immediate or delayed execution\n  async queueJob(jobName, jobFunction, delay = 0) {\n    setTimeout(async () => {\n      await this.executeJob(`one-time-${jobName}`, jobFunction, `One-time job: ${jobName}`);\n    }, delay);\n\n    console.log(`⏰ Queued one-time job: ${jobName}${delay > 0 ? ` (delayed ${delay}ms)` : ''}`);\n  }\n\n  // Get job status\n  getJobStatus(jobName = null) {\n    if (jobName) {\n      const job = this.jobs.get(jobName);\n      return job ? {\n        name: job.name,\n        cronPattern: job.cronPattern,\n        description: job.description,\n        lastRun: job.lastRun,\n        nextRun: job.nextRun,\n        runCount: job.runCount,\n        lastDuration: job.lastDuration,\n        lastStatus: job.lastStatus,\n        isActive: job.task.getStatus() !== null\n      } : null;\n    }\n\n    // Return all jobs\n    return Array.from(this.jobs.values()).map((job) => ({\n      name: job.name,\n      cronPattern: job.cronPattern,\n      description: job.description,\n      lastRun: job.lastRun,\n      nextRun: job.nextRun,\n      runCount: job.runCount,\n      lastDuration: job.lastDuration,\n      lastStatus: job.lastStatus,\n      isActive: job.task.getStatus() !== null\n    }));\n  }\n\n  // Get job execution history\n  getJobHistory(limit = 50) {\n    return this.jobHistory\n      .slice(-limit)\n      .reverse() // Most recent first\n      .map((entry) => ({\n        ...entry,\n        duration: `${entry.duration}ms`\n      }));\n  }\n\n  // Stop a specific job\n  stopJob(jobName) {\n    const job = this.jobs.get(jobName);\n    if (!job) {\n      throw new Error(`Job ${jobName} not found`);\n    }\n\n    job.task.stop();\n    console.log(`⏹️ Stopped job: ${jobName}`);\n  }\n\n  // Start a specific job\n  startJob(jobName) {\n    const job = this.jobs.get(jobName);\n    if (!job) {\n      throw new Error(`Job ${jobName} not found`);\n    }\n\n    job.task.start();\n    console.log(`▶️ Started job: ${jobName}`);\n  }\n\n  // Manually trigger a job\n  async triggerJob(jobName) {\n    const job = this.jobs.get(jobName);\n    if (!job) {\n      throw new Error(`Job ${jobName} not found`);\n    }\n\n    // Create a one-time execution\n    await this.executeJob(`manual-${jobName}`, async () => {\n      // This is a bit of a workaround - we'd need to store the original function\n      console.log(`Manually triggered job: ${jobName}`);\n      return 'Manual execution completed';\n    }, `Manual execution of ${job.description}`);\n  }\n\n  // Stop all jobs\n  stopAll() {\n    console.log('⏹️ Stopping all scheduled jobs...');\n\n    for (const [, job] of this.jobs) {\n      job.task.stop();\n    }\n\n    this.isRunning = false;\n    console.log('✅ All jobs stopped');\n  }\n\n  // Restart all jobs\n  restartAll() {\n    console.log('🔄 Restarting all scheduled jobs...');\n\n    this.stopAll();\n\n    setTimeout(() => {\n      for (const [, job] of this.jobs) {\n        job.task.start();\n      }\n\n      this.isRunning = true;\n      console.log('✅ All jobs restarted');\n    }, 1000);\n  }\n\n  // Helper methods\n  getNextRunTime() {\n    try {\n      // This is a simplified calculation - in production you'd use a proper cron parser\n      return new Date(Date.now() + 24 * 60 * 60 * 1000); // Placeholder: next day\n    } catch (error) {\n      return null;\n    }\n  }\n\n  addToHistory(entry) {\n    this.jobHistory.push(entry);\n\n    // Keep history size manageable\n    if (this.jobHistory.length > this.maxHistorySize) {\n      this.jobHistory = this.jobHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  // Get system statistics\n  getSystemStats() {\n    const now = Date.now();\n    const last24Hours = now - (24 * 60 * 60 * 1000);\n\n    const recentHistory = this.jobHistory.filter(\n      (entry) => entry.startTime.getTime() > last24Hours\n    );\n\n    const completedJobs = recentHistory.filter((entry) => entry.status === 'completed');\n    const failedJobs = recentHistory.filter((entry) => entry.status === 'failed');\n\n    return {\n      isRunning: this.isRunning,\n      totalScheduledJobs: this.jobs.size,\n      totalHistoryEntries: this.jobHistory.length,\n      last24Hours: {\n        totalExecutions: recentHistory.length,\n        completedJobs: completedJobs.length,\n        failedJobs: failedJobs.length,\n        successRate: recentHistory.length > 0\n          ? ((completedJobs.length / recentHistory.length) * 100).toFixed(2)\n          : 0,\n        averageDuration: completedJobs.length > 0\n          ? Math.round(completedJobs.reduce((sum, job) => sum + job.duration, 0) / completedJobs.length)\n          : 0\n      }\n    };\n  }\n}\n\n// Create singleton instance\nconst jobQueueService = new JobQueueService();\n\n// Auto-initialize if not in test environment\nif (process.env.NODE_ENV !== 'test') {\n  // Initialize after a short delay to ensure all services are loaded\n  setTimeout(() => {\n    jobQueueService.initialize().catch((error) => {\n      console.error('Failed to initialize job queue service:', error);\n    });\n  }, 5000);\n}\n\nmodule.exports = jobQueueService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\order.service.js","messages":[{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":48,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":51,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1325,1331],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":84,"column":14,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":84,"endColumn":53,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2265,2271],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":86,"column":14,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":86,"endColumn":55,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2354,2360],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":123,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":123,"endColumn":47,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3636,3642],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":145,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":145,"endColumn":38,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4340,4346],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":154,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":154,"endColumn":76,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4586,4592],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":202,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":202,"endColumn":52},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":206,"column":20,"nodeType":"CallExpression","messageId":"missingRadix","endLine":206,"endColumn":50,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6538,6538],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":207,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":207,"endColumn":58,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6597,6597],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":208,"column":24,"nodeType":"CallExpression","messageId":"missingRadix","endLine":208,"endColumn":58,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6656,6656],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":214,"column":30,"nodeType":"CallExpression","messageId":"missingRadix","endLine":214,"endColumn":64,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6903,6903],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":259,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":259,"endColumn":19},{"ruleId":"no-plusplus","severity":1,"message":"Unary operator '++' used.","line":265,"column":7,"nodeType":"UpdateExpression","messageId":"unexpectedUnaryOp","endLine":265,"endColumn":19},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":273,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":273,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const Order = require('../models/order.model');\nconst Cart = require('../models/cart.model');\nconst User = require('../models/user.model');\n\nclass OrderService {\n  static async createFromCart(userId, orderData) {\n    // Get user's cart\n    const cart = await Cart.getByUserId(userId);\n    if (!cart || !cart.items || cart.items.length === 0) {\n      throw new Error('Cart is empty');\n    }\n\n    // Validate cart before creating order\n    const validation = await cart.validateForCheckout();\n    if (!validation.valid) {\n      throw new Error(`Cart validation failed: ${validation.issues.join(', ')}`);\n    }\n\n    // Prepare order data\n    const items = cart.items.map((item) => ({\n      productId: item.productId,\n      quantity: item.quantity\n    }));\n\n    const order = await Order.create({\n      buyerId: userId,\n      items,\n      ...orderData\n    });\n\n    // Clear cart after successful order creation\n    await Cart.clear(userId);\n\n    return order;\n  }\n\n  static async createOrder(buyerId, orderData) {\n    // Verify buyer exists and is active\n    const buyer = await User.findById(buyerId);\n    if (!buyer || buyer.status !== 'active') {\n      throw new Error('Buyer not found or account not active');\n    }\n\n    if (buyer.role !== 'buyer') {\n      throw new Error('Only buyers can create orders');\n    }\n\n    return await Order.create({\n      buyerId,\n      ...orderData\n    });\n  }\n\n  static async getOrder(orderId, userId, userRole) {\n    const order = await Order.findById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    // Check authorization\n    if (userRole === 'buyer' && order.buyerId !== userId) {\n      throw new Error('You can only view your own orders');\n    }\n\n    if (userRole === 'vendor') {\n      // Check if vendor has items in this order\n      const hasItems = order.items.some((item) => item.vendorId === userId);\n      if (!hasItems) {\n        throw new Error('You can only view orders containing your products');\n      }\n\n      // Return vendor-specific view\n      return {\n        ...order.toJSON(),\n        vendorSummary: order.getVendorSummary(userId)\n      };\n    }\n\n    return order;\n  }\n\n  static async getUserOrders(userId, userRole, options = {}) {\n    if (userRole === 'buyer') {\n      return await Order.findByUser(userId, options);\n    } if (userRole === 'vendor') {\n      return await Order.findByVendor(userId, options);\n    }\n    throw new Error('Invalid user role for order access');\n  }\n\n  static async updateOrderStatus(orderId, newStatus, userId, userRole) {\n    const order = await Order.findById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    // Authorization checks\n    if (userRole === 'buyer') {\n      if (order.buyerId !== userId) {\n        throw new Error('You can only update your own orders');\n      }\n\n      // Buyers can only cancel orders\n      if (newStatus !== 'cancelled') {\n        throw new Error('Buyers can only cancel orders');\n      }\n    } else if (userRole === 'vendor') {\n      // Vendors can only update orders containing their products\n      const hasItems = order.items.some((item) => item.vendorId === userId);\n      if (!hasItems) {\n        throw new Error('You can only update orders containing your products');\n      }\n\n      // Vendors can confirm and mark as processing\n      const allowedStatuses = ['confirmed', 'processing'];\n      if (!allowedStatuses.includes(newStatus)) {\n        throw new Error('Vendors can only confirm or mark orders as processing');\n      }\n    } else if (userRole !== 'admin') {\n      throw new Error('Invalid user role for order updates');\n    }\n\n    return await order.updateStatus(newStatus);\n  }\n\n  static async cancelOrder(orderId, userId, userRole, reason = null) {\n    const order = await Order.findById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    // Check authorization\n    if (userRole === 'buyer' && order.buyerId !== userId) {\n      throw new Error('You can only cancel your own orders');\n    }\n\n    if (userRole === 'vendor') {\n      // Vendors can cancel orders containing their products if not yet shipped\n      const hasItems = order.items.some((item) => item.vendorId === userId);\n      if (!hasItems) {\n        throw new Error('You can only cancel orders containing your products');\n      }\n    }\n\n    return await order.cancel(reason);\n  }\n\n  static async updatePaymentStatus(orderId, paymentStatus, paymentReference = null) {\n    const order = await Order.findById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    return await order.updatePaymentStatus(paymentStatus, paymentReference);\n  }\n\n  static async getOrderStats(userId, userRole, period = 'month') {\n    let dateFilter = '';\n    const now = new Date();\n\n    if (period === 'week') {\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND o.created_at >= '${weekAgo.toISOString()}'`;\n    } else if (period === 'month') {\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      dateFilter = `AND o.created_at >= '${monthAgo.toISOString()}'`;\n    }\n\n    let query;\n    let params;\n\n    if (userRole === 'buyer') {\n      query = `\n        SELECT \n          COUNT(*) as total_orders,\n          COUNT(CASE WHEN o.status = 'delivered' THEN 1 END) as completed_orders,\n          COUNT(CASE WHEN o.status = 'cancelled' THEN 1 END) as cancelled_orders,\n          COALESCE(SUM(o.total_amount), 0) as total_spent,\n          COALESCE(AVG(o.total_amount), 0) as average_order_value\n        FROM orders o\n        WHERE o.buyer_id = $1 ${dateFilter}\n      `;\n      params = [userId];\n    } else if (userRole === 'vendor') {\n      query = `\n        SELECT \n          COUNT(DISTINCT o.id) as total_orders,\n          COUNT(DISTINCT CASE WHEN o.status = 'delivered' THEN o.id END) as completed_orders,\n          COUNT(DISTINCT CASE WHEN o.status = 'cancelled' THEN o.id END) as cancelled_orders,\n          COALESCE(SUM(oi.total_price), 0) as total_revenue,\n          COALESCE(AVG(oi.total_price), 0) as average_order_value,\n          COUNT(oi.id) as total_items_sold\n        FROM orders o\n        JOIN order_items oi ON o.id = oi.order_id\n        WHERE oi.vendor_id = $1 ${dateFilter}\n      `;\n      params = [userId];\n    } else {\n      throw new Error('Invalid user role for stats');\n    }\n\n    const db = require('../config/database.config');\n    const { rows } = await db.query(query, params);\n\n    const stats = {\n      totalOrders: parseInt(rows[0].total_orders),\n      completedOrders: parseInt(rows[0].completed_orders),\n      cancelledOrders: parseInt(rows[0].cancelled_orders),\n      totalValue: parseFloat(rows[0].total_spent || rows[0].total_revenue),\n      averageOrderValue: parseFloat(rows[0].average_order_value)\n    };\n\n    if (userRole === 'vendor') {\n      stats.totalItemsSold = parseInt(rows[0].total_items_sold);\n    }\n\n    return stats;\n  }\n\n  static async getRecentOrders(userId, userRole, limit = 5) {\n    const orders = await OrderService.getUserOrders(userId, userRole, { limit });\n\n    return orders.map((order) => ({\n      id: order.id,\n      orderNumber: order.orderNumber,\n      totalAmount: order.totalAmount,\n      status: order.status,\n      createdAt: order.createdAt,\n      itemCount: order.items.length\n    }));\n  }\n\n  // Admin functions\n  static async getAllOrders(options = {}) {\n    const {\n      status = null,\n      paymentStatus = null,\n      page = 1,\n      limit = 20\n    } = options;\n\n    const offset = (page - 1) * limit;\n    let query = `\n      SELECT o.*,\n        JSON_BUILD_OBJECT(\n          'id', u.id,\n          'firstName', u.first_name,\n          'lastName', u.last_name,\n          'email', u.email\n        ) as buyer\n      FROM orders o\n      JOIN users u ON o.buyer_id = u.id\n      WHERE 1=1\n    `;\n    const values = [];\n    let paramCount = 0;\n\n    if (status) {\n      paramCount++;\n      query += ` AND o.status = $${paramCount}`;\n      values.push(status);\n    }\n\n    if (paymentStatus) {\n      paramCount++;\n      query += ` AND o.payment_status = $${paramCount}`;\n      values.push(paymentStatus);\n    }\n\n    query += ` ORDER BY o.created_at DESC LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`;\n    values.push(limit, offset);\n\n    const db = require('../config/database.config');\n    const { rows } = await db.query(query, values);\n\n    return rows.map((row) => ({\n      ...new Order(row).toJSON(),\n      buyer: row.buyer\n    }));\n  }\n}\n\nmodule.exports = OrderService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\payment.service.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7292,7352],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'processCashOnDeliveryPayment'.","line":258,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":258,"endColumn":37},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'processBankTransferPayment'.","line":271,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":271,"endColumn":35},{"ruleId":"camelcase","severity":1,"message":"Identifier 'transaction_id' is not in camel case.","line":301,"column":32,"nodeType":"Identifier","messageId":"notCamelCase","endLine":301,"endColumn":46},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_message' is not in camel case.","line":301,"column":48,"nodeType":"Identifier","messageId":"notCamelCase","endLine":301,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9960,10035],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"camelcase","severity":1,"message":"Identifier 'transaction_id' is not in camel case.","line":325,"column":36,"nodeType":"Identifier","messageId":"notCamelCase","endLine":325,"endColumn":50},{"ruleId":"camelcase","severity":1,"message":"Identifier 'error_message' is not in camel case.","line":342,"column":29,"nodeType":"Identifier","messageId":"notCamelCase","endLine":342,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11224,11293],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12666,12750],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12819,12897],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'verifyMockPayment'.","line":416,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":416,"endColumn":26},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'confirmMockPayment'.","line":437,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":437,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":455,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":455,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14276,14342],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":503,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":503,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[15625,15711],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class method 'isValidPaymentMethod'.","line":519,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":519,"endColumn":23},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'getPaymentStatistics'.","line":525,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":525,"endColumn":29},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":526,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":526,"endColumn":48,"suggestions":[{"messageId":"removeAwait","fix":{"range":[16329,16335],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"class-methods-use-this","severity":1,"message":"Expected 'this' to be used by class async method 'cleanupExpiredPayments'.","line":530,"column":3,"nodeType":"FunctionExpression","messageId":"missingThis","endLine":530,"endColumn":31},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":531,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":531,"endColumn":50,"suggestions":[{"messageId":"removeAwait","fix":{"range":[16449,16455],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":548,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":548,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17016,17086],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5151,5237],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const crypto = require('crypto');\nconst axios = require('axios');\nconst Payment = require('../models/payment.model');\nconst Order = require('../models/order.model');\n\nclass PaymentService {\n  constructor() {\n    this.orangeMoneyConfig = {\n      mode: process.env.ORANGE_MONEY_MODE || 'development',\n      apiUrl: process.env.ORANGE_MONEY_API_URL,\n      username: process.env.ORANGE_MONEY_USERNAME,\n      password: process.env.ORANGE_MONEY_PASSWORD,\n      merchantNumber: process.env.ORANGE_MONEY_MERCHANT_NUMBER,\n      webhookSecret: process.env.ORANGE_MONEY_WEBHOOK_SECRET,\n      callbackUrl: process.env.ORANGE_MONEY_CALLBACK_URL,\n      returnUrl: process.env.ORANGE_MONEY_RETURN_URL,\n      cancelUrl: process.env.ORANGE_MONEY_CANCEL_URL\n    };\n\n    this.mockMode = process.env.PAYMENT_MOCK_MODE === 'true';\n    this.autoConfirmDelay = parseInt(process.env.PAYMENT_AUTO_CONFIRM_DELAY, 10) || 5000;\n  }\n\n  // Initiate payment process\n  async initiatePayment(paymentData) {\n    const {\n      orderId,\n      paymentMethod,\n      customerPhone,\n      customerName,\n      customerEmail,\n      otpCode,\n      userId,\n      ipAddress,\n      userAgent\n    } = paymentData;\n\n    // Get order details\n    const order = await Order.findById(orderId);\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    if (order.paymentStatus === 'paid') {\n      throw new Error('Order is already paid');\n    }\n\n    // Validate payment method\n    if (!this.isValidPaymentMethod(paymentMethod)) {\n      throw new Error(`Invalid payment method: ${paymentMethod}`);\n    }\n\n    // Create payment record\n    const payment = await Payment.create({\n      orderId,\n      paymentMethod,\n      amount: order.totalAmount,\n      currency: order.currency || 'XOF',\n      customerPhone,\n      customerName,\n      customerEmail,\n      returnUrl: this.orangeMoneyConfig.returnUrl,\n      cancelUrl: this.orangeMoneyConfig.cancelUrl,\n      createdBy: userId,\n      ipAddress,\n      userAgent\n    });\n\n    // Fraud detection\n    const fraudCheck = payment.detectFraud();\n    if (fraudCheck.recommendation === 'block') {\n      await payment.updateStatus('failed', {\n        errorDetails: { reason: 'fraud_detected', flags: fraudCheck.flags },\n        updatedBy: userId\n      });\n      throw new Error('Payment blocked due to fraud detection');\n    }\n\n    // Process payment based on method\n    let result;\n    switch (paymentMethod) {\n      case 'orange_money':\n        result = await this.processOrangeMoneyPayment(payment, otpCode);\n        break;\n      case 'cash_on_delivery':\n        result = await this.processCashOnDeliveryPayment(payment);\n        break;\n      case 'bank_transfer':\n        result = await this.processBankTransferPayment(payment);\n        break;\n      default:\n        throw new Error(`Payment method ${paymentMethod} not implemented`);\n    }\n\n    return result;\n  }\n\n  // Process Orange Money payment\n  async processOrangeMoneyPayment(payment, otpCode) {\n    try {\n      if (this.mockMode) {\n        return await this.processMockOrangeMoneyPayment(payment, otpCode);\n      }\n\n      // Real Orange Money API integration\n      const paymentRequest = {\n        merchant_key: this.orangeMoneyConfig.merchantNumber,\n        currency: payment.currency,\n        order_id: payment.paymentReference,\n        amount: payment.amount,\n        return_url: payment.returnUrl,\n        cancel_url: payment.cancelUrl,\n        notif_url: this.orangeMoneyConfig.callbackUrl,\n        lang: 'fr',\n        reference: payment.paymentReference,\n        customer_msisdn: payment.customerPhone,\n        customer_name: payment.customerName,\n        customer_email: payment.customerEmail\n      };\n\n      // Add OTP if provided (for direct payment)\n      if (otpCode) {\n        paymentRequest.otp = otpCode;\n      }\n\n      const response = await this.makeOrangeMoneyRequest('POST', '/webpayment', paymentRequest);\n\n      if (response.status === 'success') {\n        // Update payment with Orange Money response\n        await payment.updateStatus('processing', {\n          gatewayResponse: response,\n          externalTransactionId: response.transaction_id,\n          paymentToken: response.payment_token\n        });\n\n        // Update payment URL if redirect is needed\n        if (response.payment_url) {\n          await payment.updatePaymentUrl(response.payment_url, response.payment_token);\n        }\n\n        return {\n          success: true,\n          paymentReference: payment.paymentReference,\n          paymentUrl: response.payment_url,\n          status: 'processing',\n          message: 'Payment initiated successfully'\n        };\n      }\n      await payment.updateStatus('failed', {\n        errorDetails: response,\n        gatewayResponse: response\n      });\n\n      throw new Error(response.message || 'Payment initiation failed');\n    } catch (error) {\n      await payment.updateStatus('failed', { errorDetails: { error: error.message } });\n      throw error;\n    }\n  }\n\n  // Mock Orange Money payment for development\n  async processMockOrangeMoneyPayment(payment, otpCode) {\n    if (process.env.NODE_ENV !== 'test') {\n      // eslint-disable-next-line no-console\n      console.log(`[MOCK] Processing Orange Money payment for ${payment.paymentReference}`);\n    }\n\n    // Simulate different scenarios based on phone number\n    const lastDigit = payment.customerPhone.slice(-1);\n    let mockResponse;\n\n    if (lastDigit === '0') {\n      // Simulate failure\n      mockResponse = {\n        status: 'error',\n        message: 'Insufficient balance',\n        error_code: 'INSUFFICIENT_BALANCE'\n      };\n    } else if (lastDigit === '9') {\n      // Simulate OTP required\n      if (!otpCode) {\n        mockResponse = {\n          status: 'otp_required',\n          message: 'OTP code required',\n          payment_token: `MOCK_TOKEN_${Date.now()}`\n        };\n      } else if (otpCode !== '1234') {\n        mockResponse = {\n          status: 'error',\n          message: 'Invalid OTP code',\n          error_code: 'INVALID_OTP'\n        };\n      } else {\n        mockResponse = {\n          status: 'success',\n          transaction_id: `MOCK_TXN_${Date.now()}`,\n          payment_token: `MOCK_TOKEN_${Date.now()}`,\n          message: 'Payment successful'\n        };\n      }\n    } else {\n      // Simulate redirect flow\n      mockResponse = {\n        status: 'success',\n        transaction_id: `MOCK_TXN_${Date.now()}`,\n        payment_url: `${process.env.FRONTEND_URL}/mock-payment/${payment.paymentReference}`,\n        payment_token: `MOCK_TOKEN_${Date.now()}`,\n        message: 'Redirect to Orange Money'\n      };\n    }\n\n    // Update payment based on mock response\n    if (mockResponse.status === 'success') {\n      await payment.updateStatus('processing', {\n        gatewayResponse: mockResponse,\n        externalTransactionId: mockResponse.transaction_id,\n        paymentToken: mockResponse.payment_token\n      });\n\n      if (mockResponse.payment_url) {\n        await payment.updatePaymentUrl(mockResponse.payment_url, mockResponse.payment_token);\n      }\n\n      // Auto-confirm after delay (simulate user completing payment)\n      if (!mockResponse.payment_url) {\n        setTimeout(async () => {\n          try {\n            await this.confirmMockPayment(payment.paymentReference);\n          } catch (error) {\n            console.error('Error auto-confirming mock payment:', error);\n          }\n        }, this.autoConfirmDelay);\n      }\n    } else if (mockResponse.status === 'otp_required') {\n      await payment.updateStatus('processing', {\n        gatewayResponse: mockResponse,\n        paymentToken: mockResponse.payment_token\n      });\n    } else {\n      await payment.updateStatus('failed', {\n        errorDetails: mockResponse,\n        gatewayResponse: mockResponse\n      });\n    }\n\n    return {\n      success: mockResponse.status !== 'error',\n      paymentReference: payment.paymentReference,\n      paymentUrl: mockResponse.payment_url,\n      paymentToken: mockResponse.payment_token,\n      status: mockResponse.status === 'success' ? 'processing' : mockResponse.status,\n      message: mockResponse.message,\n      requiresOtp: mockResponse.status === 'otp_required'\n    };\n  }\n\n  // Process Cash on Delivery payment\n  async processCashOnDeliveryPayment(payment) {\n    // COD payments are confirmed manually by delivery driver\n    await payment.updateStatus('processing', { gatewayResponse: { method: 'cash_on_delivery', status: 'pending_delivery' } });\n\n    return {\n      success: true,\n      paymentReference: payment.paymentReference,\n      status: 'processing',\n      message: 'Cash on delivery payment registered. Payment will be collected upon delivery.'\n    };\n  }\n\n  // Process Bank Transfer payment\n  async processBankTransferPayment(payment) {\n    // Generate bank transfer details\n    const transferDetails = {\n      accountName: 'E-Commerce Platform',\n      accountNumber: '0123456789',\n      bankName: 'Ecobank Burkina Faso',\n      swiftCode: 'ECOCBFBF',\n      reference: payment.paymentReference,\n      amount: payment.amount,\n      currency: payment.currency\n    };\n\n    await payment.updateStatus('processing', { gatewayResponse: { method: 'bank_transfer', transferDetails } });\n\n    return {\n      success: true,\n      paymentReference: payment.paymentReference,\n      status: 'processing',\n      transferDetails,\n      message: 'Please make the bank transfer using the provided details'\n    };\n  }\n\n  // Handle webhook notifications\n  async handleWebhook(webhookData, signature, ipAddress, userAgent) {\n    // Validate webhook signature\n    if (!this.validateWebhookSignature(webhookData, signature)) {\n      throw new Error('Invalid webhook signature');\n    }\n\n    const { reference, status, transaction_id, error_message } = webhookData;\n\n    // Find payment by reference\n    const payment = await Payment.findByReference(reference);\n    if (!payment) {\n      throw new Error(`Payment not found for reference: ${reference}`);\n    }\n\n    // Log webhook data\n    console.log(`[WEBHOOK] Received notification for ${reference}: ${status}`);\n\n    const updateData = {\n      webhookData,\n      ipAddress,\n      userAgent\n    };\n\n    // Update payment status based on webhook\n    switch (status.toLowerCase()) {\n      case 'success':\n      case 'completed':\n        if (payment.status !== 'completed') {\n          await payment.updateStatus('completed', {\n            ...updateData,\n            externalTransactionId: transaction_id,\n            authorizationCode: webhookData.authorization_code\n          });\n\n          // Update order payment status\n          const order = await Order.findById(payment.orderId);\n          if (order) {\n            await order.updatePaymentStatus('paid', payment.paymentReference);\n          }\n        }\n        break;\n\n      case 'failed':\n      case 'error':\n        if (payment.status === 'processing') {\n          await payment.updateStatus('failed', {\n            ...updateData,\n            errorDetails: { error_message, webhook_data: webhookData }\n          });\n        }\n        break;\n\n      case 'cancelled':\n        if (['pending', 'processing'].includes(payment.status)) {\n          await payment.updateStatus('cancelled', updateData);\n        }\n        break;\n\n      default:\n        console.warn(`[WEBHOOK] Unknown status: ${status} for ${reference}`);\n    }\n\n    return { success: true, processed: true };\n  }\n\n  // Verify payment status\n  async verifyPayment(paymentReference) {\n    const payment = await Payment.findByReference(paymentReference);\n    if (!payment) {\n      throw new Error('Payment not found');\n    }\n\n    if (this.mockMode) {\n      return this.verifyMockPayment(payment);\n    }\n\n    try {\n      // Query Orange Money API for payment status\n      const response = await this.makeOrangeMoneyRequest('GET', `/webpayment/${paymentReference}`);\n\n      // Update payment status based on API response\n      const updateData = { gatewayResponse: response };\n\n      switch (response.status?.toLowerCase()) {\n        case 'success':\n        case 'completed':\n          if (payment.status !== 'completed') {\n            await payment.updateStatus('completed', {\n              ...updateData,\n              externalTransactionId: response.transaction_id\n            });\n          }\n          break;\n\n        case 'failed':\n        case 'error':\n          if (payment.status === 'processing') {\n            await payment.updateStatus('failed', {\n              ...updateData,\n              errorDetails: response\n            });\n          }\n          break;\n\n        case 'pending':\n        case 'processing':\n          // Status hasn't changed, just update gateway response\n          break;\n\n        default:\n          console.warn(`[VERIFY] Unknown status: ${response.status} for ${paymentReference}`);\n      }\n\n      return payment.toJSON();\n    } catch (error) {\n      console.error(`[VERIFY] Error verifying payment ${paymentReference}:`, error);\n      throw new Error('Payment verification failed');\n    }\n  }\n\n  // Mock payment verification\n  async verifyMockPayment(payment) {\n    // Simulate different verification results\n    const shouldSucceed = Math.random() > 0.1; // 90% success rate\n\n    if (shouldSucceed && payment.status === 'processing') {\n      await payment.updateStatus('completed', {\n        externalTransactionId: `MOCK_VERIFIED_${Date.now()}`,\n        gatewayResponse: { verified: true, mock: true }\n      });\n\n      // Update order payment status\n      const order = await Order.findById(payment.orderId);\n      if (order) {\n        await order.updatePaymentStatus('paid', payment.paymentReference);\n      }\n    }\n\n    return payment.toJSON();\n  }\n\n  // Confirm mock payment (for testing)\n  async confirmMockPayment(paymentReference) {\n    const payment = await Payment.findByReference(paymentReference);\n    if (!payment) {\n      throw new Error('Payment not found');\n    }\n\n    if (payment.status === 'processing') {\n      await payment.updateStatus('completed', {\n        externalTransactionId: `MOCK_CONFIRMED_${Date.now()}`,\n        gatewayResponse: { confirmed: true, mock: true }\n      });\n\n      // Update order payment status\n      const order = await Order.findById(payment.orderId);\n      if (order) {\n        await order.updatePaymentStatus('paid', payment.paymentReference);\n      }\n\n      console.log(`[MOCK] Auto-confirmed payment: ${paymentReference}`);\n    }\n\n    return payment.toJSON();\n  }\n\n  // Make request to Orange Money API\n  async makeOrangeMoneyRequest(method, endpoint, data = null) {\n    const url = `${this.orangeMoneyConfig.apiUrl}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: this.generateOrangeMoneyAuth()\n    };\n\n    const config = {\n      method,\n      url,\n      headers,\n      timeout: 30000\n    };\n\n    if (data) {\n      config.data = data;\n    }\n\n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(`Orange Money API error: ${error.response.data?.message || error.response.statusText}`);\n      } else if (error.request) {\n        throw new Error('Orange Money API is not responding');\n      } else {\n        throw new Error(`Request error: ${error.message}`);\n      }\n    }\n  }\n\n  // Generate Orange Money authentication\n  generateOrangeMoneyAuth() {\n    const credentials = `${this.orangeMoneyConfig.username}:${this.orangeMoneyConfig.password}`;\n    return `Basic ${Buffer.from(credentials).toString('base64')}`;\n  }\n\n  // Validate webhook signature\n  validateWebhookSignature(payload, signature) {\n    if (!this.orangeMoneyConfig.webhookSecret) {\n      console.warn('[WEBHOOK] No webhook secret configured, skipping signature validation');\n      return true; // Allow for development\n    }\n\n    const expectedSignature = crypto\n      .createHmac('sha256', this.orangeMoneyConfig.webhookSecret)\n      .update(JSON.stringify(payload))\n      .digest('hex');\n\n    return crypto.timingSafeEqual(\n      Buffer.from(signature, 'hex'),\n      Buffer.from(expectedSignature, 'hex')\n    );\n  }\n\n  // Validate payment method\n  isValidPaymentMethod(method) {\n    const validMethods = ['orange_money', 'cash_on_delivery', 'bank_transfer'];\n    return validMethods.includes(method);\n  }\n\n  // Get payment statistics\n  async getPaymentStatistics(options = {}) {\n    return await Payment.getStatistics(options);\n  }\n\n  // Clean up expired payments\n  async cleanupExpiredPayments() {\n    return await Payment.cleanupExpiredPayments();\n  }\n\n  // Refund payment\n  async refundPayment(paymentReference, refundAmount = null, reason = null) {\n    const payment = await Payment.findByReference(paymentReference);\n    if (!payment) {\n      throw new Error('Payment not found');\n    }\n\n    if (payment.status !== 'completed') {\n      throw new Error('Only completed payments can be refunded');\n    }\n\n    // In a real implementation, you would call the Orange Money refund API\n    if (!this.mockMode) {\n      // TODO: Implement actual Orange Money refund API call\n      console.log(`[REFUND] Would initiate refund for ${paymentReference}`);\n    }\n\n    await payment.refund(refundAmount, reason);\n\n    // Update order status if needed\n    const order = await Order.findById(payment.orderId);\n    if (order) {\n      await order.updatePaymentStatus('refunded', payment.paymentReference);\n    }\n\n    return payment.toJSON();\n  }\n}\n\nmodule.exports = new PaymentService();\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\services\\product.service.js","messages":[{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":67,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":67,"endColumn":41,"suggestions":[{"messageId":"removeAwait","fix":{"range":[1809,1815],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":81,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":81,"endColumn":34,"suggestions":[{"messageId":"removeAwait","fix":{"range":[2155,2161],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":104,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":104,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2673,2673],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":105,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":105,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[2705,2705],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":138,"column":15,"nodeType":"CallExpression","messageId":"missingRadix","endLine":138,"endColumn":29,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3430,3430],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":139,"column":16,"nodeType":"CallExpression","messageId":"missingRadix","endLine":139,"endColumn":31,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[3462,3462],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":149,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":153,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3651,3657],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":157,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":161,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3830,3836],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":165,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":169,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3991,3997],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":175,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":180,"endColumn":7,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4291,4297],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":184,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":184,"endColumn":41,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4461,4467],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":188,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":188,"endColumn":35,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4535,4541],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":1,"message":"Redundant use of `await` on a return value.","line":197,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":197,"endColumn":62,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4780,4786],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"global-require","severity":1,"message":"Unexpected require().","line":243,"column":16,"nodeType":"CallExpression","messageId":"unexpected","endLine":243,"endColumn":52},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":247,"column":23,"nodeType":"CallExpression","messageId":"missingRadix","endLine":247,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6235,6235],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":248,"column":22,"nodeType":"CallExpression","messageId":"missingRadix","endLine":248,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6290,6290],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":249,"column":25,"nodeType":"CallExpression","messageId":"missingRadix","endLine":249,"endColumn":60,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6351,6351],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":250,"column":22,"nodeType":"CallExpression","messageId":"missingRadix","endLine":250,"endColumn":54,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6406,6406],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]},{"ruleId":"radix","severity":1,"message":"Missing radix parameter.","line":252,"column":23,"nodeType":"CallExpression","messageId":"missingRadix","endLine":252,"endColumn":56,"suggestions":[{"messageId":"addRadixParameter10","fix":{"range":[6518,6518],"text":", 10"},"desc":"Add radix parameter `10` for parsing decimal numbers."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const Product = require('../models/product.model');\nconst User = require('../models/user.model');\n\nclass ProductService {\n  static async createProduct(vendorId, productData) {\n    // Verify vendor can manage products\n    const vendor = await User.findById(vendorId);\n    if (!vendor || !vendor.canManageProducts()) {\n      throw new Error('Only active vendors can create products');\n    }\n\n    // Validate required fields\n    const { title, price, category } = productData;\n    if (!title || !price || !category) {\n      throw new Error('Title, price, and category are required');\n    }\n\n    if (price <= 0) {\n      throw new Error('Price must be greater than 0');\n    }\n\n    return Product.create({\n      vendorId,\n      ...productData\n    });\n  }\n\n  static async getProduct(id, includeVendor = false) {\n    const product = await Product.findById(id);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    if (includeVendor) {\n      const vendor = await User.findById(product.vendorId);\n      return {\n        ...product.toJSON(),\n        vendor: vendor ? {\n          id: vendor.id,\n          businessName: vendor.businessName,\n          firstName: vendor.firstName,\n          lastName: vendor.lastName,\n          verification: vendor.verification\n        } : null\n      };\n    }\n\n    return product;\n  }\n\n  static async updateProduct(id, vendorId, updates) {\n    const product = await Product.findById(id);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    // Check ownership\n    if (product.vendorId !== vendorId) {\n      throw new Error('You can only update your own products');\n    }\n\n    // Validate price if being updated\n    if (updates.price !== undefined && updates.price <= 0) {\n      throw new Error('Price must be greater than 0');\n    }\n\n    return await product.update(updates);\n  }\n\n  static async deleteProduct(id, vendorId) {\n    const product = await Product.findById(id);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    // Check ownership\n    if (product.vendorId !== vendorId) {\n      throw new Error('You can only delete your own products');\n    }\n\n    return await product.delete();\n  }\n\n  static async getProducts(options = {}) {\n    const {\n      page = 1,\n      limit = 20,\n      ...filterOptions\n    } = options;\n\n    const offset = (page - 1) * limit;\n    const products = await Product.findAll({\n      ...filterOptions,\n      limit: Math.min(limit, 100), // Cap at 100\n      offset\n    });\n\n    const total = await Product.count(filterOptions);\n    const totalPages = Math.ceil(total / limit);\n\n    return {\n      products,\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    };\n  }\n\n  static async getVendorProducts(vendorId, options = {}) {\n    const {\n      page = 1,\n      limit = 20,\n      status = null\n    } = options;\n\n    const offset = (page - 1) * limit;\n    const products = await Product.findByVendor(vendorId, {\n      status,\n      limit: Math.min(limit, 100),\n      offset\n    });\n\n    // Count total for pagination\n    const countQuery = status\n      ? { vendorId, status }\n      : { vendorId };\n    const total = await Product.count(countQuery);\n    const totalPages = Math.ceil(total / limit);\n\n    return {\n      products,\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    };\n  }\n\n  static async searchProducts(searchTerm, options = {}) {\n    return await this.getProducts({\n      search: searchTerm,\n      status: 'active',\n      ...options\n    });\n  }\n\n  static async getProductsByCategory(category, options = {}) {\n    return await this.getProducts({\n      category,\n      status: 'active',\n      ...options\n    });\n  }\n\n  static async getProductsByTags(tags, options = {}) {\n    return await this.getProducts({\n      tags: Array.isArray(tags) ? tags : [tags],\n      status: 'active',\n      ...options\n    });\n  }\n\n  static async getFeaturedProducts(limit = 10) {\n    // For now, return newest active products\n    // In the future, this could be based on sales, ratings, etc.\n    return await Product.findAll({\n      status: 'active',\n      sortBy: 'created_at',\n      sortOrder: 'DESC',\n      limit\n    });\n  }\n\n  static async getCategories() {\n    return await Product.getCategories();\n  }\n\n  static async getTags() {\n    return await Product.getTags();\n  }\n\n  static async adjustInventory(productId, quantity, operation = 'decrease') {\n    const product = await Product.findById(productId);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    return await product.adjustInventory(quantity, operation);\n  }\n\n  static async checkAvailability(productId, requestedQuantity) {\n    const product = await Product.findById(productId);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n\n    if (product.status !== 'active') {\n      return {\n        available: false,\n        reason: 'Product is not active',\n        availableQuantity: 0\n      };\n    }\n\n    if (!product.trackInventory) {\n      return {\n        available: true,\n        availableQuantity: null // Unlimited\n      };\n    }\n\n    const available = product.quantity >= requestedQuantity || product.allowBackorder;\n\n    return {\n      available,\n      availableQuantity: product.quantity,\n      reason: available ? null : 'Insufficient inventory'\n    };\n  }\n\n  static async getProductStats(vendorId) {\n    const query = `\n      SELECT \n        COUNT(CASE WHEN status = 'active' THEN 1 END) as active_products,\n        COUNT(CASE WHEN status = 'draft' THEN 1 END) as draft_products,\n        COUNT(CASE WHEN status = 'archived' THEN 1 END) as archived_products,\n        COUNT(*) as total_products,\n        COALESCE(AVG(price), 0) as average_price,\n        COALESCE(SUM(quantity), 0) as total_inventory\n      FROM products \n      WHERE vendor_id = $1\n    `;\n\n    const db = require('../config/database.config');\n    const { rows } = await db.query(query, [vendorId]);\n\n    return {\n      activeProducts: parseInt(rows[0].active_products),\n      draftProducts: parseInt(rows[0].draft_products),\n      archivedProducts: parseInt(rows[0].archived_products),\n      totalProducts: parseInt(rows[0].total_products),\n      averagePrice: parseFloat(rows[0].average_price),\n      totalInventory: parseInt(rows[0].total_inventory)\n    };\n  }\n}\n\nmodule.exports = ProductService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]},{"filePath":"C:\\Users\\Fabrice\\OneDrive - University of Oklahoma\\Desktop\\Ecommerce\\backend\\src\\utils\\jwt.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]}]
