name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run linter
      working-directory: ./backend
      run: npm run lint
    
    - name: Run tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: ecommerce_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test_secret_for_ci_tests
        JWT_REFRESH_SECRET: test_refresh_secret_for_ci_tests
        JWT_EXPIRE: 7d
        JWT_REFRESH_EXPIRE: 30d
        PAYMENT_MOCK_MODE: true
        BCRYPT_SALT_ROUNDS: 10
        CI: true
      run: npx jest --testPathIgnorePatterns="tests/integration/models.test.js" --testPathIgnorePatterns="tests/integration/server.test.js" --testPathIgnorePatterns="tests/integration/real-implementations.test.js"
    
    - name: Generate coverage report
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: ecommerce_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test_secret_for_ci_tests
        JWT_REFRESH_SECRET: test_refresh_secret_for_ci_tests
        JWT_EXPIRE: 7d
        JWT_REFRESH_EXPIRE: 30d
        PAYMENT_MOCK_MODE: true
        BCRYPT_SALT_ROUNDS: 10
        CI: true
      run: npx jest --coverage --testPathIgnorePatterns="tests/integration/models.test.js" --testPathIgnorePatterns="tests/integration/server.test.js" --testPathIgnorePatterns="tests/integration/real-implementations.test.js"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci --production
    
    - name: Check if server starts
      working-directory: ./backend
      env:
        NODE_ENV: production
        JWT_SECRET: test_secret_for_ci_build
        JWT_REFRESH_SECRET: test_refresh_secret_for_ci_build
        PORT: 3000
      run: |
        npm start &
        sleep 5
        curl -f http://localhost:3000/health || exit 1
        kill %1

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: false # Temporarily disabled until Docker secrets are configured
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container \
          -p 3000:3000 \
          -e NODE_ENV=production \
          -e JWT_SECRET=test_secret_for_ci \
          -e DB_HOST=localhost \
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Clean up
        docker stop test-container